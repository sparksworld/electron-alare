;(() => {
  var e = {
      73: (e) => {
        e.exports = {
          trueFunc: function () {
            return !0
          },
          falseFunc: function () {
            return !1
          },
        }
      },
      172: (e, t, r) => {
        'use strict'
        const n = r(298)
        if ('string' == typeof n)
          throw new TypeError('Not running in an Electron environment!')
        const s = 'ELECTRON_IS_DEV' in process.env,
          a = 1 === Number.parseInt(process.env.ELECTRON_IS_DEV, 10)
        e.exports = s ? a : !n.app.isPackaged
      },
      298: (e) => {
        'use strict'
        e.exports = require('electron')
      },
    },
    t = {}
  function r(n) {
    var s = t[n]
    if (void 0 !== s) return s.exports
    var a = (t[n] = { exports: {} })
    return e[n](a, a.exports, r), a.exports
  }
  ;(r.n = (e) => {
    var t = e && e.__esModule ? () => e.default : () => e
    return r.d(t, { a: t }), t
  }),
    (r.d = (e, t) => {
      for (var n in t)
        r.o(t, n) &&
          !r.o(e, n) &&
          Object.defineProperty(e, n, { enumerable: !0, get: t[n] })
    }),
    (r.o = (e, t) => Object.prototype.hasOwnProperty.call(e, t)),
    (r.r = (e) => {
      'undefined' != typeof Symbol &&
        Symbol.toStringTag &&
        Object.defineProperty(e, Symbol.toStringTag, { value: 'Module' }),
        Object.defineProperty(e, '__esModule', { value: !0 })
    }),
    (() => {
      'use strict'
      var e = {}
      r.r(e),
        r.d(e, {
          contains: () => Qe,
          html: () => Fe,
          merge: () => We,
          parseHTML: () => Ve,
          root: () => Ye,
          text: () => Ge,
          xml: () => qe,
        })
      var t = {}
      r.r(t),
        r.d(t, {
          addClass: () => At,
          attr: () => it,
          data: () => dt,
          hasClass: () => ft,
          prop: () => lt,
          removeAttr: () => Tt,
          removeClass: () => gt,
          toggleClass: () => _t,
          val: () => pt,
        })
      var n = {}
      r.r(n),
        r.d(n, {
          DocumentPosition: () => tn,
          append: () => xr,
          appendChild: () => wr,
          compareDocumentPosition: () => rn,
          existsOne: () => Vr,
          filter: () => Hr,
          find: () => Fr,
          findAll: () => Yr,
          findOne: () => Gr,
          findOneChild: () => qr,
          getAttributeValue: () => Lr,
          getChildren: () => Sr,
          getElementById: () => $r,
          getElements: () => zr,
          getElementsByTagName: () => Zr,
          getElementsByTagType: () => Jr,
          getFeed: () => sn,
          getInnerHTML: () => Nr,
          getName: () => yr,
          getOuterHTML: () => _r,
          getParent: () => Dr,
          getSiblings: () => Rr,
          getText: () => Cr,
          hasAttrib: () => Or,
          hasChildren: () => Ft,
          innerText: () => br,
          isCDATA: () => xt,
          isComment: () => Ut,
          isDocument: () => Ht,
          isTag: () => wt,
          isText: () => Bt,
          nextElementSibling: () => kr,
          prepend: () => Ur,
          prependChild: () => Br,
          prevElementSibling: () => Mr,
          removeElement: () => Pr,
          removeSubsets: () => en,
          replaceElement: () => vr,
          testElement: () => Kr,
          textContent: () => Ir,
          uniqueSort: () => nn,
        })
      var s = {}
      r.r(s),
        r.d(s, {
          add: () => $s,
          addBack: () => Zs,
          children: () => Ps,
          closest: () => Ss,
          contents: () => vs,
          each: () => ws,
          end: () => zs,
          eq: () => Qs,
          filter: () => Us,
          filterArray: () => Hs,
          find: () => Ts,
          first: () => Vs,
          get: () => Ws,
          has: () => Gs,
          index: () => js,
          is: () => Fs,
          last: () => Ys,
          map: () => xs,
          next: () => Ds,
          nextAll: () => Rs,
          nextUntil: () => Ls,
          not: () => qs,
          parent: () => Cs,
          parents: () => Is,
          parentsUntil: () => bs,
          prev: () => Os,
          prevAll: () => ys,
          prevUntil: () => ks,
          siblings: () => Ms,
          slice: () => Ks,
          toArray: () => Xs,
        })
      var a = {}
      r.r(a),
        r.d(a, {
          _makeDomArray: () => ea,
          after: () => da,
          append: () => aa,
          appendTo: () => na,
          before: () => Ea,
          clone: () => Ca,
          empty: () => Aa,
          html: () => ga,
          insertAfter: () => pa,
          insertBefore: () => ma,
          prepend: () => ia,
          prependTo: () => sa,
          remove: () => Ta,
          replaceWith: () => fa,
          text: () => Na,
          toString: () => _a,
          unwrap: () => ha,
          wrap: () => ca,
          wrapAll: () => ua,
          wrapInner: () => la,
        })
      var i = {}
      r.r(i), r.d(i, { css: () => Ia })
      var o = {}
      r.r(o), r.d(o, { serialize: () => Oa, serializeArray: () => ya })
      var c = r(298),
        l = r(172),
        h = r.n(l)
      const u = require('path'),
        d = require('url'),
        p = require('fs')
      var E = r.n(p)
      const m = { xml: !1, decodeEntities: !0 },
        T = { _useHtmlParser2: !0, xmlMode: !0 }
      function f(e) {
        return (null == e ? void 0 : e.xml)
          ? 'boolean' == typeof e.xml
            ? T
            : { ...T, ...e.xml }
          : null != e
          ? e
          : void 0
      }
      var A, g
      function _(e) {
        return e.type === A.Tag || e.type === A.Script || e.type === A.Style
      }
      ;((g = A || (A = {})).Root = 'root'),
        (g.Text = 'text'),
        (g.Directive = 'directive'),
        (g.Comment = 'comment'),
        (g.Script = 'script'),
        (g.Style = 'style'),
        (g.Tag = 'tag'),
        (g.CDATA = 'cdata'),
        (g.Doctype = 'doctype')
      const N = A.Root,
        C = A.Text,
        I = A.Directive,
        b = A.Comment,
        S = A.Script,
        D = A.Style,
        R = A.Tag,
        L = A.CDATA,
        O = A.Doctype
      class y {
        constructor() {
          ;(this.parent = null),
            (this.prev = null),
            (this.next = null),
            (this.startIndex = null),
            (this.endIndex = null)
        }
        get parentNode() {
          return this.parent
        }
        set parentNode(e) {
          this.parent = e
        }
        get previousSibling() {
          return this.prev
        }
        set previousSibling(e) {
          this.prev = e
        }
        get nextSibling() {
          return this.next
        }
        set nextSibling(e) {
          this.next = e
        }
        cloneNode(e = !1) {
          return Q(this, e)
        }
      }
      class k extends y {
        constructor(e) {
          super(), (this.data = e)
        }
        get nodeValue() {
          return this.data
        }
        set nodeValue(e) {
          this.data = e
        }
      }
      class M extends k {
        constructor() {
          super(...arguments), (this.type = A.Text)
        }
        get nodeType() {
          return 3
        }
      }
      class P extends k {
        constructor() {
          super(...arguments), (this.type = A.Comment)
        }
        get nodeType() {
          return 8
        }
      }
      class v extends k {
        constructor(e, t) {
          super(t), (this.name = e), (this.type = A.Directive)
        }
        get nodeType() {
          return 1
        }
      }
      class w extends y {
        constructor(e) {
          super(), (this.children = e)
        }
        get firstChild() {
          var e
          return null !== (e = this.children[0]) && void 0 !== e ? e : null
        }
        get lastChild() {
          return this.children.length > 0
            ? this.children[this.children.length - 1]
            : null
        }
        get childNodes() {
          return this.children
        }
        set childNodes(e) {
          this.children = e
        }
      }
      class x extends w {
        constructor() {
          super(...arguments), (this.type = A.CDATA)
        }
        get nodeType() {
          return 4
        }
      }
      class B extends w {
        constructor() {
          super(...arguments), (this.type = A.Root)
        }
        get nodeType() {
          return 9
        }
      }
      class U extends w {
        constructor(
          e,
          t,
          r = [],
          n = 'script' === e ? A.Script : 'style' === e ? A.Style : A.Tag
        ) {
          super(r), (this.name = e), (this.attribs = t), (this.type = n)
        }
        get nodeType() {
          return 1
        }
        get tagName() {
          return this.name
        }
        set tagName(e) {
          this.name = e
        }
        get attributes() {
          return Object.keys(this.attribs).map((e) => {
            var t, r
            return {
              name: e,
              value: this.attribs[e],
              namespace:
                null === (t = this['x-attribsNamespace']) || void 0 === t
                  ? void 0
                  : t[e],
              prefix:
                null === (r = this['x-attribsPrefix']) || void 0 === r
                  ? void 0
                  : r[e],
            }
          })
        }
      }
      function H(e) {
        return _(e)
      }
      function F(e) {
        return e.type === A.CDATA
      }
      function q(e) {
        return e.type === A.Text
      }
      function G(e) {
        return e.type === A.Comment
      }
      function V(e) {
        return e.type === A.Root
      }
      function Y(e) {
        return Object.prototype.hasOwnProperty.call(e, 'children')
      }
      function Q(e, t = !1) {
        let r
        if (q(e)) r = new M(e.data)
        else if (G(e)) r = new P(e.data)
        else if (H(e)) {
          const n = t ? W(e.children) : [],
            s = new U(e.name, { ...e.attribs }, n)
          n.forEach((e) => (e.parent = s)),
            null != e.namespace && (s.namespace = e.namespace),
            e['x-attribsNamespace'] &&
              (s['x-attribsNamespace'] = { ...e['x-attribsNamespace'] }),
            e['x-attribsPrefix'] &&
              (s['x-attribsPrefix'] = { ...e['x-attribsPrefix'] }),
            (r = s)
        } else if (F(e)) {
          const n = t ? W(e.children) : [],
            s = new x(n)
          n.forEach((e) => (e.parent = s)), (r = s)
        } else if (V(e)) {
          const n = t ? W(e.children) : [],
            s = new B(n)
          n.forEach((e) => (e.parent = s)),
            e['x-mode'] && (s['x-mode'] = e['x-mode']),
            (r = s)
        } else {
          if (
            !(function (e) {
              return e.type === A.Directive
            })(e)
          )
            throw new Error(`Not implemented yet: ${e.type}`)
          {
            const t = new v(e.name, e.data)
            null != e['x-name'] &&
              ((t['x-name'] = e['x-name']),
              (t['x-publicId'] = e['x-publicId']),
              (t['x-systemId'] = e['x-systemId'])),
              (r = t)
          }
        }
        return (
          (r.startIndex = e.startIndex),
          (r.endIndex = e.endIndex),
          null != e.sourceCodeLocation &&
            (r.sourceCodeLocation = e.sourceCodeLocation),
          r
        )
      }
      function W(e) {
        const t = e.map((e) => Q(e, !0))
        for (let e = 1; e < t.length; e++)
          (t[e].prev = t[e - 1]), (t[e - 1].next = t[e])
        return t
      }
      const X = { withStartIndices: !1, withEndIndices: !1, xmlMode: !1 }
      class j {
        constructor(e, t, r) {
          ;(this.dom = []),
            (this.root = new B(this.dom)),
            (this.done = !1),
            (this.tagStack = [this.root]),
            (this.lastNode = null),
            (this.parser = null),
            'function' == typeof t && ((r = t), (t = X)),
            'object' == typeof e && ((t = e), (e = void 0)),
            (this.callback = null != e ? e : null),
            (this.options = null != t ? t : X),
            (this.elementCB = null != r ? r : null)
        }
        onparserinit(e) {
          this.parser = e
        }
        onreset() {
          ;(this.dom = []),
            (this.root = new B(this.dom)),
            (this.done = !1),
            (this.tagStack = [this.root]),
            (this.lastNode = null),
            (this.parser = null)
        }
        onend() {
          this.done ||
            ((this.done = !0), (this.parser = null), this.handleCallback(null))
        }
        onerror(e) {
          this.handleCallback(e)
        }
        onclosetag() {
          this.lastNode = null
          const e = this.tagStack.pop()
          this.options.withEndIndices && (e.endIndex = this.parser.endIndex),
            this.elementCB && this.elementCB(e)
        }
        onopentag(e, t) {
          const r = this.options.xmlMode ? A.Tag : void 0,
            n = new U(e, t, void 0, r)
          this.addNode(n), this.tagStack.push(n)
        }
        ontext(e) {
          const { lastNode: t } = this
          if (t && t.type === A.Text)
            (t.data += e),
              this.options.withEndIndices && (t.endIndex = this.parser.endIndex)
          else {
            const t = new M(e)
            this.addNode(t), (this.lastNode = t)
          }
        }
        oncomment(e) {
          if (this.lastNode && this.lastNode.type === A.Comment)
            return void (this.lastNode.data += e)
          const t = new P(e)
          this.addNode(t), (this.lastNode = t)
        }
        oncommentend() {
          this.lastNode = null
        }
        oncdatastart() {
          const e = new M(''),
            t = new x([e])
          this.addNode(t), (e.parent = t), (this.lastNode = e)
        }
        oncdataend() {
          this.lastNode = null
        }
        onprocessinginstruction(e, t) {
          const r = new v(e, t)
          this.addNode(r)
        }
        handleCallback(e) {
          if ('function' == typeof this.callback) this.callback(e, this.dom)
          else if (e) throw e
        }
        addNode(e) {
          const t = this.tagStack[this.tagStack.length - 1],
            r = t.children[t.children.length - 1]
          this.options.withStartIndices &&
            (e.startIndex = this.parser.startIndex),
            this.options.withEndIndices && (e.endIndex = this.parser.endIndex),
            t.children.push(e),
            r && ((e.prev = r), (r.next = e)),
            (e.parent = t),
            (this.lastNode = null)
        }
      }
      const K = new Uint16Array(
          'ᵁ<Õıʊҝջאٵ۞ޢߖࠏ੊ઑඡ๭༉༦჊ረዡᐕᒝᓃᓟᔥ\0\0\0\0\0\0ᕫᛍᦍᰒᷝ὾⁠↰⊍⏀⏻⑂⠤⤒ⴈ⹈⿎〖㊺㘹㞬㣾㨨㩱㫠㬮ࠀEMabcfglmnoprstu\\bfms¦³¹ÈÏlig耻Æ䃆P耻&䀦cute耻Á䃁reve;䄂Āiyx}rc耻Â䃂;䐐r;쀀𝔄rave耻À䃀pha;䎑acr;䄀d;橓Āgp¡on;䄄f;쀀𝔸plyFunction;恡ing耻Å䃅Ācs¾Ãr;쀀𝒜ign;扔ilde耻Ã䃃ml耻Ä䃄ЀaceforsuåûþėĜĢħĪĀcrêòkslash;或Ŷöø;櫧ed;挆y;䐑ƀcrtąċĔause;戵noullis;愬a;䎒r;쀀𝔅pf;쀀𝔹eve;䋘còēmpeq;扎܀HOacdefhilorsuōőŖƀƞƢƵƷƺǜȕɳɸɾcy;䐧PY耻©䂩ƀcpyŝŢźute;䄆Ā;iŧŨ拒talDifferentialD;慅leys;愭ȀaeioƉƎƔƘron;䄌dil耻Ç䃇rc;䄈nint;戰ot;䄊ĀdnƧƭilla;䂸terDot;䂷òſi;䎧rcleȀDMPTǇǋǑǖot;抙inus;抖lus;投imes;抗oĀcsǢǸkwiseContourIntegral;戲eCurlyĀDQȃȏoubleQuote;思uote;怙ȀlnpuȞȨɇɕonĀ;eȥȦ户;橴ƀgitȯȶȺruent;扡nt;戯ourIntegral;戮ĀfrɌɎ;愂oduct;成nterClockwiseContourIntegral;戳oss;樯cr;쀀𝒞pĀ;Cʄʅ拓ap;才րDJSZacefiosʠʬʰʴʸˋ˗ˡ˦̳ҍĀ;oŹʥtrahd;椑cy;䐂cy;䐅cy;䐏ƀgrsʿ˄ˇger;怡r;憡hv;櫤Āayː˕ron;䄎;䐔lĀ;t˝˞戇a;䎔r;쀀𝔇Āaf˫̧Ācm˰̢riticalȀADGT̖̜̀̆cute;䂴oŴ̋̍;䋙bleAcute;䋝rave;䁠ilde;䋜ond;拄ferentialD;慆Ѱ̽\0\0\0͔͂\0Ѕf;쀀𝔻ƀ;DE͈͉͍䂨ot;惜qual;扐blèCDLRUVͣͲ΂ϏϢϸontourIntegraìȹoɴ͹\0\0ͻ»͉nArrow;懓Āeo·ΤftƀARTΐΖΡrrow;懐ightArrow;懔eåˊngĀLRΫτeftĀARγιrrow;柸ightArrow;柺ightArrow;柹ightĀATϘϞrrow;懒ee;抨pɁϩ\0\0ϯrrow;懑ownArrow;懕erticalBar;戥ǹABLRTaВЪаўѿͼrrowƀ;BUНОТ憓ar;椓pArrow;懵reve;䌑eft˒к\0ц\0ѐightVector;楐eeVector;楞ectorĀ;Bљњ憽ar;楖ightǔѧ\0ѱeeVector;楟ectorĀ;BѺѻ懁ar;楗eeĀ;A҆҇护rrow;憧ĀctҒҗr;쀀𝒟rok;䄐ࠀNTacdfglmopqstuxҽӀӄӋӞӢӧӮӵԡԯԶՒ՝ՠեG;䅊H耻Ð䃐cute耻É䃉ƀaiyӒӗӜron;䄚rc耻Ê䃊;䐭ot;䄖r;쀀𝔈rave耻È䃈ement;戈ĀapӺӾcr;䄒tyɓԆ\0\0ԒmallSquare;旻erySmallSquare;斫ĀgpԦԪon;䄘f;쀀𝔼silon;䎕uĀaiԼՉlĀ;TՂՃ橵ilde;扂librium;懌Āci՗՚r;愰m;橳a;䎗ml耻Ë䃋Āipժկsts;戃onentialE;慇ʀcfiosօֈ֍ֲ׌y;䐤r;쀀𝔉lledɓ֗\0\0֣mallSquare;旼erySmallSquare;斪Ͱֺ\0ֿ\0\0ׄf;쀀𝔽All;戀riertrf;愱cò׋؀JTabcdfgorstר׬ׯ׺؀ؒؖ؛؝أ٬ٲcy;䐃耻>䀾mmaĀ;d׷׸䎓;䏜reve;䄞ƀeiy؇،ؐdil;䄢rc;䄜;䐓ot;䄠r;쀀𝔊;拙pf;쀀𝔾eater̀EFGLSTصلَٖٛ٦qualĀ;Lؾؿ扥ess;招ullEqual;执reater;檢ess;扷lantEqual;橾ilde;扳cr;쀀𝒢;扫ЀAacfiosuڅڋږڛڞڪھۊRDcy;䐪Āctڐڔek;䋇;䁞irc;䄤r;愌lbertSpace;愋ǰگ\0ڲf;愍izontalLine;攀Āctۃۅòکrok;䄦mpńېۘownHumðįqual;扏܀EJOacdfgmnostuۺ۾܃܇܎ܚܞܡܨ݄ݸދޏޕcy;䐕lig;䄲cy;䐁cute耻Í䃍Āiyܓܘrc耻Î䃎;䐘ot;䄰r;愑rave耻Ì䃌ƀ;apܠܯܿĀcgܴܷr;䄪inaryI;慈lieóϝǴ݉\0ݢĀ;eݍݎ戬Āgrݓݘral;戫section;拂isibleĀCTݬݲomma;恣imes;恢ƀgptݿރވon;䄮f;쀀𝕀a;䎙cr;愐ilde;䄨ǫޚ\0ޞcy;䐆l耻Ï䃏ʀcfosuެ޷޼߂ߐĀiyޱ޵rc;䄴;䐙r;쀀𝔍pf;쀀𝕁ǣ߇\0ߌr;쀀𝒥rcy;䐈kcy;䐄΀HJacfosߤߨ߽߬߱ࠂࠈcy;䐥cy;䐌ppa;䎚Āey߶߻dil;䄶;䐚r;쀀𝔎pf;쀀𝕂cr;쀀𝒦րJTaceflmostࠥࠩࠬࡐࡣ঳সে্਷ੇcy;䐉耻<䀼ʀcmnpr࠷࠼ࡁࡄࡍute;䄹bda;䎛g;柪lacetrf;愒r;憞ƀaeyࡗ࡜ࡡron;䄽dil;䄻;䐛Āfsࡨ॰tԀACDFRTUVarࡾࢩࢱࣦ࣠ࣼयज़ΐ४Ānrࢃ࢏gleBracket;柨rowƀ;BR࢙࢚࢞憐ar;懤ightArrow;懆eiling;挈oǵࢷ\0ࣃbleBracket;柦nǔࣈ\0࣒eeVector;楡ectorĀ;Bࣛࣜ懃ar;楙loor;挊ightĀAV࣯ࣵrrow;憔ector;楎Āerँगeƀ;AVउऊऐ抣rrow;憤ector;楚iangleƀ;BEतथऩ抲ar;槏qual;抴pƀDTVषूौownVector;楑eeVector;楠ectorĀ;Bॖॗ憿ar;楘ectorĀ;B॥०憼ar;楒ightáΜs̀EFGLSTॾঋকঝঢভqualGreater;拚ullEqual;扦reater;扶ess;檡lantEqual;橽ilde;扲r;쀀𝔏Ā;eঽা拘ftarrow;懚idot;䄿ƀnpw৔ਖਛgȀLRlr৞৷ਂਐeftĀAR০৬rrow;柵ightArrow;柷ightArrow;柶eftĀarγਊightáοightáϊf;쀀𝕃erĀLRਢਬeftArrow;憙ightArrow;憘ƀchtਾੀੂòࡌ;憰rok;䅁;扪Ѐacefiosuਗ਼੝੠੷੼અઋ઎p;椅y;䐜Ādl੥੯iumSpace;恟lintrf;愳r;쀀𝔐nusPlus;戓pf;쀀𝕄cò੶;䎜ҀJacefostuણધભીଔଙඑ඗ඞcy;䐊cute;䅃ƀaey઴હાron;䅇dil;䅅;䐝ƀgswે૰଎ativeƀMTV૓૟૨ediumSpace;怋hiĀcn૦૘ë૙eryThiî૙tedĀGL૸ଆreaterGreateòٳessLesóੈLine;䀊r;쀀𝔑ȀBnptଢନଷ଺reak;恠BreakingSpace;䂠f;愕ڀ;CDEGHLNPRSTV୕ୖ୪୼஡௫ఄ౞಄ದ೘ൡඅ櫬Āou୛୤ngruent;扢pCap;扭oubleVerticalBar;戦ƀlqxஃஊ஛ement;戉ualĀ;Tஒஓ扠ilde;쀀≂̸ists;戄reater΀;EFGLSTஶஷ஽௉௓௘௥扯qual;扱ullEqual;쀀≧̸reater;쀀≫̸ess;批lantEqual;쀀⩾̸ilde;扵umpń௲௽ownHump;쀀≎̸qual;쀀≏̸eĀfsఊధtTriangleƀ;BEచఛడ拪ar;쀀⧏̸qual;括s̀;EGLSTవశ఼ౄోౘ扮qual;扰reater;扸ess;쀀≪̸lantEqual;쀀⩽̸ilde;扴estedĀGL౨౹reaterGreater;쀀⪢̸essLess;쀀⪡̸recedesƀ;ESಒಓಛ技qual;쀀⪯̸lantEqual;拠ĀeiಫಹverseElement;戌ghtTriangleƀ;BEೋೌ೒拫ar;쀀⧐̸qual;拭ĀquೝഌuareSuĀbp೨೹setĀ;E೰ೳ쀀⊏̸qual;拢ersetĀ;Eഃആ쀀⊐̸qual;拣ƀbcpഓതൎsetĀ;Eഛഞ쀀⊂⃒qual;抈ceedsȀ;ESTലള഻െ抁qual;쀀⪰̸lantEqual;拡ilde;쀀≿̸ersetĀ;E൘൛쀀⊃⃒qual;抉ildeȀ;EFT൮൯൵ൿ扁qual;扄ullEqual;扇ilde;扉erticalBar;戤cr;쀀𝒩ilde耻Ñ䃑;䎝܀Eacdfgmoprstuvලෂ෉෕ෛ෠෧෼ขภยา฿ไlig;䅒cute耻Ó䃓Āiy෎ීrc耻Ô䃔;䐞blac;䅐r;쀀𝔒rave耻Ò䃒ƀaei෮ෲ෶cr;䅌ga;䎩cron;䎟pf;쀀𝕆enCurlyĀDQฎบoubleQuote;怜uote;怘;橔Āclวฬr;쀀𝒪ash耻Ø䃘iŬื฼de耻Õ䃕es;樷ml耻Ö䃖erĀBP๋๠Āar๐๓r;怾acĀek๚๜;揞et;掴arenthesis;揜Ҁacfhilors๿ງຊຏຒດຝະ໼rtialD;戂y;䐟r;쀀𝔓i;䎦;䎠usMinus;䂱Āipຢອncareplanåڝf;愙Ȁ;eio຺ູ໠໤檻cedesȀ;EST່້໏໚扺qual;檯lantEqual;扼ilde;找me;怳Ādp໩໮uct;戏ortionĀ;aȥ໹l;戝Āci༁༆r;쀀𝒫;䎨ȀUfos༑༖༛༟OT耻"䀢r;쀀𝔔pf;愚cr;쀀𝒬؀BEacefhiorsu༾གྷཇའཱིྦྷྪྭ႖ႩႴႾarr;椐G耻®䂮ƀcnrཎནབute;䅔g;柫rĀ;tཛྷཝ憠l;椖ƀaeyཧཬཱron;䅘dil;䅖;䐠Ā;vླྀཹ愜erseĀEUྂྙĀlq྇ྎement;戋uilibrium;懋pEquilibrium;楯r»ཹo;䎡ghtЀACDFTUVa࿁࿫࿳ဢဨၛႇϘĀnr࿆࿒gleBracket;柩rowƀ;BL࿜࿝࿡憒ar;懥eftArrow;懄eiling;按oǵ࿹\0စbleBracket;柧nǔည\0နeeVector;楝ectorĀ;Bဝသ懂ar;楕loor;挋Āerိ၃eƀ;AVဵံြ抢rrow;憦ector;楛iangleƀ;BEၐၑၕ抳ar;槐qual;抵pƀDTVၣၮၸownVector;楏eeVector;楜ectorĀ;Bႂႃ憾ar;楔ectorĀ;B႑႒懀ar;楓Āpuႛ႞f;愝ndImplies;楰ightarrow;懛ĀchႹႼr;愛;憱leDelayed;槴ڀHOacfhimoqstuფჱჷჽᄙᄞᅑᅖᅡᅧᆵᆻᆿĀCcჩხHcy;䐩y;䐨FTcy;䐬cute;䅚ʀ;aeiyᄈᄉᄎᄓᄗ檼ron;䅠dil;䅞rc;䅜;䐡r;쀀𝔖ortȀDLRUᄪᄴᄾᅉownArrow»ОeftArrow»࢚ightArrow»࿝pArrow;憑gma;䎣allCircle;战pf;쀀𝕊ɲᅭ\0\0ᅰt;戚areȀ;ISUᅻᅼᆉᆯ斡ntersection;抓uĀbpᆏᆞsetĀ;Eᆗᆘ抏qual;抑ersetĀ;Eᆨᆩ抐qual;抒nion;抔cr;쀀𝒮ar;拆ȀbcmpᇈᇛሉላĀ;sᇍᇎ拐etĀ;Eᇍᇕqual;抆ĀchᇠህeedsȀ;ESTᇭᇮᇴᇿ扻qual;檰lantEqual;扽ilde;承Tháྌ;我ƀ;esሒሓሣ拑rsetĀ;Eሜም抃qual;抇et»ሓրHRSacfhiorsሾቄ቉ቕ቞ቱቶኟዂወዑORN耻Þ䃞ADE;愢ĀHc቎ቒcy;䐋y;䐦Ābuቚቜ;䀉;䎤ƀaeyብቪቯron;䅤dil;䅢;䐢r;쀀𝔗Āeiቻ኉ǲኀ\0ኇefore;戴a;䎘Ācn኎ኘkSpace;쀀  Space;怉ldeȀ;EFTካኬኲኼ戼qual;扃ullEqual;扅ilde;扈pf;쀀𝕋ipleDot;惛Āctዖዛr;쀀𝒯rok;䅦ૡዷጎጚጦ\0ጬጱ\0\0\0\0\0ጸጽ፷ᎅ\0᏿ᐄᐊᐐĀcrዻጁute耻Ú䃚rĀ;oጇገ憟cir;楉rǣጓ\0጖y;䐎ve;䅬Āiyጞጣrc耻Û䃛;䐣blac;䅰r;쀀𝔘rave耻Ù䃙acr;䅪Ādiፁ፩erĀBPፈ፝Āarፍፐr;䁟acĀekፗፙ;揟et;掵arenthesis;揝onĀ;P፰፱拃lus;抎Āgp፻፿on;䅲f;쀀𝕌ЀADETadps᎕ᎮᎸᏄϨᏒᏗᏳrrowƀ;BDᅐᎠᎤar;椒ownArrow;懅ownArrow;憕quilibrium;楮eeĀ;AᏋᏌ报rrow;憥ownáϳerĀLRᏞᏨeftArrow;憖ightArrow;憗iĀ;lᏹᏺ䏒on;䎥ing;䅮cr;쀀𝒰ilde;䅨ml耻Ü䃜ҀDbcdefosvᐧᐬᐰᐳᐾᒅᒊᒐᒖash;披ar;櫫y;䐒ashĀ;lᐻᐼ抩;櫦Āerᑃᑅ;拁ƀbtyᑌᑐᑺar;怖Ā;iᑏᑕcalȀBLSTᑡᑥᑪᑴar;戣ine;䁼eparator;杘ilde;所ThinSpace;怊r;쀀𝔙pf;쀀𝕍cr;쀀𝒱dash;抪ʀcefosᒧᒬᒱᒶᒼirc;䅴dge;拀r;쀀𝔚pf;쀀𝕎cr;쀀𝒲Ȁfiosᓋᓐᓒᓘr;쀀𝔛;䎞pf;쀀𝕏cr;쀀𝒳ҀAIUacfosuᓱᓵᓹᓽᔄᔏᔔᔚᔠcy;䐯cy;䐇cy;䐮cute耻Ý䃝Āiyᔉᔍrc;䅶;䐫r;쀀𝔜pf;쀀𝕐cr;쀀𝒴ml;䅸ЀHacdefosᔵᔹᔿᕋᕏᕝᕠᕤcy;䐖cute;䅹Āayᕄᕉron;䅽;䐗ot;䅻ǲᕔ\0ᕛoWidtè૙a;䎖r;愨pf;愤cr;쀀𝒵௡ᖃᖊᖐ\0ᖰᖶᖿ\0\0\0\0ᗆᗛᗫᙟ᙭\0ᚕ᚛ᚲᚹ\0ᚾcute耻á䃡reve;䄃̀;Ediuyᖜᖝᖡᖣᖨᖭ戾;쀀∾̳;房rc耻â䃢te肻´̆;䐰lig耻æ䃦Ā;r²ᖺ;쀀𝔞rave耻à䃠ĀepᗊᗖĀfpᗏᗔsym;愵èᗓha;䎱ĀapᗟcĀclᗤᗧr;䄁g;樿ɤᗰ\0\0ᘊʀ;adsvᗺᗻᗿᘁᘇ戧nd;橕;橜lope;橘;橚΀;elmrszᘘᘙᘛᘞᘿᙏᙙ戠;榤e»ᘙsdĀ;aᘥᘦ戡ѡᘰᘲᘴᘶᘸᘺᘼᘾ;榨;榩;榪;榫;榬;榭;榮;榯tĀ;vᙅᙆ戟bĀ;dᙌᙍ抾;榝Āptᙔᙗh;戢»¹arr;捼Āgpᙣᙧon;䄅f;쀀𝕒΀;Eaeiop዁ᙻᙽᚂᚄᚇᚊ;橰cir;橯;扊d;手s;䀧roxĀ;e዁ᚒñᚃing耻å䃥ƀctyᚡᚦᚨr;쀀𝒶;䀪mpĀ;e዁ᚯñʈilde耻ã䃣ml耻ä䃤Āciᛂᛈoninôɲnt;樑ࠀNabcdefiklnoprsu᛭ᛱᜰ᜼ᝃᝈ᝸᝽០៦ᠹᡐᜍ᤽᥈ᥰot;櫭Ācrᛶ᜞kȀcepsᜀᜅᜍᜓong;扌psilon;䏶rime;怵imĀ;e᜚᜛戽q;拍Ŷᜢᜦee;抽edĀ;gᜬᜭ挅e»ᜭrkĀ;t፜᜷brk;掶Āoyᜁᝁ;䐱quo;怞ʀcmprtᝓ᝛ᝡᝤᝨausĀ;eĊĉptyv;榰séᜌnoõēƀahwᝯ᝱ᝳ;䎲;愶een;扬r;쀀𝔟g΀costuvwឍឝឳេ៕៛៞ƀaiuបពរðݠrc;旯p»፱ƀdptឤឨឭot;樀lus;樁imes;樂ɱឹ\0\0ើcup;樆ar;昅riangleĀdu៍្own;施p;斳plus;樄eåᑄåᒭarow;植ƀako៭ᠦᠵĀcn៲ᠣkƀlst៺֫᠂ozenge;槫riangleȀ;dlr᠒᠓᠘᠝斴own;斾eft;旂ight;斸k;搣Ʊᠫ\0ᠳƲᠯ\0ᠱ;斒;斑4;斓ck;斈ĀeoᠾᡍĀ;qᡃᡆ쀀=⃥uiv;쀀≡⃥t;挐Ȁptwxᡙᡞᡧᡬf;쀀𝕓Ā;tᏋᡣom»Ꮜtie;拈؀DHUVbdhmptuvᢅᢖᢪᢻᣗᣛᣬ᣿ᤅᤊᤐᤡȀLRlrᢎᢐᢒᢔ;敗;敔;敖;敓ʀ;DUduᢡᢢᢤᢦᢨ敐;敦;敩;敤;敧ȀLRlrᢳᢵᢷᢹ;敝;敚;敜;教΀;HLRhlrᣊᣋᣍᣏᣑᣓᣕ救;敬;散;敠;敫;敢;敟ox;槉ȀLRlrᣤᣦᣨᣪ;敕;敒;攐;攌ʀ;DUduڽ᣷᣹᣻᣽;敥;敨;攬;攴inus;抟lus;択imes;抠ȀLRlrᤙᤛᤝ᤟;敛;敘;攘;攔΀;HLRhlrᤰᤱᤳᤵᤷ᤻᤹攂;敪;敡;敞;攼;攤;攜Āevģ᥂bar耻¦䂦Ȁceioᥑᥖᥚᥠr;쀀𝒷mi;恏mĀ;e᜚᜜lƀ;bhᥨᥩᥫ䁜;槅sub;柈Ŭᥴ᥾lĀ;e᥹᥺怢t»᥺pƀ;Eeįᦅᦇ;檮Ā;qۜۛೡᦧ\0᧨ᨑᨕᨲ\0ᨷᩐ\0\0᪴\0\0᫁\0\0ᬡᬮ᭍᭒\0᯽\0ᰌƀcpr᦭ᦲ᧝ute;䄇̀;abcdsᦿᧀᧄ᧊᧕᧙戩nd;橄rcup;橉Āau᧏᧒p;橋p;橇ot;橀;쀀∩︀Āeo᧢᧥t;恁îړȀaeiu᧰᧻ᨁᨅǰ᧵\0᧸s;橍on;䄍dil耻ç䃧rc;䄉psĀ;sᨌᨍ橌m;橐ot;䄋ƀdmnᨛᨠᨦil肻¸ƭptyv;榲t脀¢;eᨭᨮ䂢räƲr;쀀𝔠ƀceiᨽᩀᩍy;䑇ckĀ;mᩇᩈ朓ark»ᩈ;䏇r΀;Ecefms᩟᩠ᩢᩫ᪤᪪᪮旋;槃ƀ;elᩩᩪᩭ䋆q;扗eɡᩴ\0\0᪈rrowĀlr᩼᪁eft;憺ight;憻ʀRSacd᪒᪔᪖᪚᪟»ཇ;擈st;抛irc;抚ash;抝nint;樐id;櫯cir;槂ubsĀ;u᪻᪼晣it»᪼ˬ᫇᫔᫺\0ᬊonĀ;eᫍᫎ䀺Ā;qÇÆɭ᫙\0\0᫢aĀ;t᫞᫟䀬;䁀ƀ;fl᫨᫩᫫戁îᅠeĀmx᫱᫶ent»᫩eóɍǧ᫾\0ᬇĀ;dኻᬂot;橭nôɆƀfryᬐᬔᬗ;쀀𝕔oäɔ脀©;sŕᬝr;愗Āaoᬥᬩrr;憵ss;朗Ācuᬲᬷr;쀀𝒸Ābpᬼ᭄Ā;eᭁᭂ櫏;櫑Ā;eᭉᭊ櫐;櫒dot;拯΀delprvw᭠᭬᭷ᮂᮬᯔ᯹arrĀlr᭨᭪;椸;椵ɰ᭲\0\0᭵r;拞c;拟arrĀ;p᭿ᮀ憶;椽̀;bcdosᮏᮐᮖᮡᮥᮨ截rcap;橈Āauᮛᮞp;橆p;橊ot;抍r;橅;쀀∪︀Ȁalrv᮵ᮿᯞᯣrrĀ;mᮼᮽ憷;椼yƀevwᯇᯔᯘqɰᯎ\0\0ᯒreã᭳uã᭵ee;拎edge;拏en耻¤䂤earrowĀlrᯮ᯳eft»ᮀight»ᮽeäᯝĀciᰁᰇoninôǷnt;戱lcty;挭ঀAHabcdefhijlorstuwz᰸᰻᰿ᱝᱩᱵᲊᲞᲬᲷ᳻᳿ᴍᵻᶑᶫᶻ᷆᷍rò΁ar;楥Ȁglrs᱈ᱍ᱒᱔ger;怠eth;愸òᄳhĀ;vᱚᱛ怐»ऊūᱡᱧarow;椏aã̕Āayᱮᱳron;䄏;䐴ƀ;ao̲ᱼᲄĀgrʿᲁr;懊tseq;橷ƀglmᲑᲔᲘ耻°䂰ta;䎴ptyv;榱ĀirᲣᲨsht;楿;쀀𝔡arĀlrᲳᲵ»ࣜ»သʀaegsv᳂͸᳖᳜᳠mƀ;oș᳊᳔ndĀ;ș᳑uit;晦amma;䏝in;拲ƀ;io᳧᳨᳸䃷de脀÷;o᳧ᳰntimes;拇nø᳷cy;䑒cɯᴆ\0\0ᴊrn;挞op;挍ʀlptuwᴘᴝᴢᵉᵕlar;䀤f;쀀𝕕ʀ;emps̋ᴭᴷᴽᵂqĀ;d͒ᴳot;扑inus;戸lus;戔quare;抡blebarwedgåúnƀadhᄮᵝᵧownarrowóᲃarpoonĀlrᵲᵶefôᲴighôᲶŢᵿᶅkaro÷གɯᶊ\0\0ᶎrn;挟op;挌ƀcotᶘᶣᶦĀryᶝᶡ;쀀𝒹;䑕l;槶rok;䄑Ādrᶰᶴot;拱iĀ;fᶺ᠖斿Āah᷀᷃ròЩaòྦangle;榦Āci᷒ᷕy;䑟grarr;柿ऀDacdefglmnopqrstuxḁḉḙḸոḼṉṡṾấắẽỡἪἷὄ὎὚ĀDoḆᴴoôᲉĀcsḎḔute耻é䃩ter;橮ȀaioyḢḧḱḶron;䄛rĀ;cḭḮ扖耻ê䃪lon;払;䑍ot;䄗ĀDrṁṅot;扒;쀀𝔢ƀ;rsṐṑṗ檚ave耻è䃨Ā;dṜṝ檖ot;檘Ȁ;ilsṪṫṲṴ檙nters;揧;愓Ā;dṹṺ檕ot;檗ƀapsẅẉẗcr;䄓tyƀ;svẒẓẕ戅et»ẓpĀ1;ẝẤĳạả;怄;怅怃ĀgsẪẬ;䅋p;怂ĀgpẴẸon;䄙f;쀀𝕖ƀalsỄỎỒrĀ;sỊị拕l;槣us;橱iƀ;lvỚớở䎵on»ớ;䏵ȀcsuvỪỳἋἣĀioữḱrc»Ḯɩỹ\0\0ỻíՈantĀglἂἆtr»ṝess»Ṻƀaeiἒ἖Ἒls;䀽st;扟vĀ;DȵἠD;橸parsl;槥ĀDaἯἳot;打rr;楱ƀcdiἾὁỸr;愯oô͒ĀahὉὋ;䎷耻ð䃰Āmrὓὗl耻ë䃫o;悬ƀcipὡὤὧl;䀡sôծĀeoὬὴctatioîՙnentialåչৡᾒ\0ᾞ\0ᾡᾧ\0\0ῆῌ\0ΐ\0ῦῪ \0 ⁚llingdotseñṄy;䑄male;晀ƀilrᾭᾳ῁lig;耀ﬃɩᾹ\0\0᾽g;耀ﬀig;耀ﬄ;쀀𝔣lig;耀ﬁlig;쀀fjƀaltῙ῜ῡt;晭ig;耀ﬂns;斱of;䆒ǰ΅\0ῳf;쀀𝕗ĀakֿῷĀ;vῼ´拔;櫙artint;樍Āao‌⁕Ācs‑⁒α‚‰‸⁅⁈\0⁐β•‥‧‪‬\0‮耻½䂽;慓耻¼䂼;慕;慙;慛Ƴ‴\0‶;慔;慖ʴ‾⁁\0\0⁃耻¾䂾;慗;慜5;慘ƶ⁌\0⁎;慚;慝8;慞l;恄wn;挢cr;쀀𝒻ࢀEabcdefgijlnorstv₂₉₟₥₰₴⃰⃵⃺⃿℃ℒℸ̗ℾ⅒↞Ā;lٍ₇;檌ƀcmpₐₕ₝ute;䇵maĀ;dₜ᳚䎳;檆reve;䄟Āiy₪₮rc;䄝;䐳ot;䄡Ȁ;lqsؾق₽⃉ƀ;qsؾٌ⃄lanô٥Ȁ;cdl٥⃒⃥⃕c;檩otĀ;o⃜⃝檀Ā;l⃢⃣檂;檄Ā;e⃪⃭쀀⋛︀s;檔r;쀀𝔤Ā;gٳ؛mel;愷cy;䑓Ȁ;Eajٚℌℎℐ;檒;檥;檤ȀEaesℛℝ℩ℴ;扩pĀ;p℣ℤ檊rox»ℤĀ;q℮ℯ檈Ā;q℮ℛim;拧pf;쀀𝕘Āci⅃ⅆr;愊mƀ;el٫ⅎ⅐;檎;檐茀>;cdlqr׮ⅠⅪⅮⅳⅹĀciⅥⅧ;檧r;橺ot;拗Par;榕uest;橼ʀadelsↄⅪ←ٖ↛ǰ↉\0↎proø₞r;楸qĀlqؿ↖lesó₈ií٫Āen↣↭rtneqq;쀀≩︀Å↪ԀAabcefkosy⇄⇇⇱⇵⇺∘∝∯≨≽ròΠȀilmr⇐⇔⇗⇛rsðᒄf»․ilôکĀdr⇠⇤cy;䑊ƀ;cwࣴ⇫⇯ir;楈;憭ar;意irc;䄥ƀalr∁∎∓rtsĀ;u∉∊晥it»∊lip;怦con;抹r;쀀𝔥sĀew∣∩arow;椥arow;椦ʀamopr∺∾≃≞≣rr;懿tht;戻kĀlr≉≓eftarrow;憩ightarrow;憪f;쀀𝕙bar;怕ƀclt≯≴≸r;쀀𝒽asè⇴rok;䄧Ābp⊂⊇ull;恃hen»ᱛૡ⊣\0⊪\0⊸⋅⋎\0⋕⋳\0\0⋸⌢⍧⍢⍿\0⎆⎪⎴cute耻í䃭ƀ;iyݱ⊰⊵rc耻î䃮;䐸Ācx⊼⊿y;䐵cl耻¡䂡ĀfrΟ⋉;쀀𝔦rave耻ì䃬Ȁ;inoܾ⋝⋩⋮Āin⋢⋦nt;樌t;戭fin;槜ta;愩lig;䄳ƀaop⋾⌚⌝ƀcgt⌅⌈⌗r;䄫ƀelpܟ⌏⌓inåގarôܠh;䄱f;抷ed;䆵ʀ;cfotӴ⌬⌱⌽⍁are;愅inĀ;t⌸⌹戞ie;槝doô⌙ʀ;celpݗ⍌⍐⍛⍡al;抺Āgr⍕⍙eróᕣã⍍arhk;樗rod;樼Ȁcgpt⍯⍲⍶⍻y;䑑on;䄯f;쀀𝕚a;䎹uest耻¿䂿Āci⎊⎏r;쀀𝒾nʀ;EdsvӴ⎛⎝⎡ӳ;拹ot;拵Ā;v⎦⎧拴;拳Ā;iݷ⎮lde;䄩ǫ⎸\0⎼cy;䑖l耻ï䃯̀cfmosu⏌⏗⏜⏡⏧⏵Āiy⏑⏕rc;䄵;䐹r;쀀𝔧ath;䈷pf;쀀𝕛ǣ⏬\0⏱r;쀀𝒿rcy;䑘kcy;䑔Ѐacfghjos␋␖␢␧␭␱␵␻ppaĀ;v␓␔䎺;䏰Āey␛␠dil;䄷;䐺r;쀀𝔨reen;䄸cy;䑅cy;䑜pf;쀀𝕜cr;쀀𝓀஀ABEHabcdefghjlmnoprstuv⑰⒁⒆⒍⒑┎┽╚▀♎♞♥♹♽⚚⚲⛘❝❨➋⟀⠁⠒ƀart⑷⑺⑼rò৆òΕail;椛arr;椎Ā;gঔ⒋;檋ar;楢ॣ⒥\0⒪\0⒱\0\0\0\0\0⒵Ⓔ\0ⓆⓈⓍ\0⓹ute;䄺mptyv;榴raîࡌbda;䎻gƀ;dlࢎⓁⓃ;榑åࢎ;檅uo耻«䂫rЀ;bfhlpst࢙ⓞⓦⓩ⓫⓮⓱⓵Ā;f࢝ⓣs;椟s;椝ë≒p;憫l;椹im;楳l;憢ƀ;ae⓿─┄檫il;椙Ā;s┉┊檭;쀀⪭︀ƀabr┕┙┝rr;椌rk;杲Āak┢┬cĀek┨┪;䁻;䁛Āes┱┳;榋lĀdu┹┻;榏;榍Ȁaeuy╆╋╖╘ron;䄾Ādi═╔il;䄼ìࢰâ┩;䐻Ȁcqrs╣╦╭╽a;椶uoĀ;rนᝆĀdu╲╷har;楧shar;楋h;憲ʀ;fgqs▋▌উ◳◿扤tʀahlrt▘▤▷◂◨rrowĀ;t࢙□aé⓶arpoonĀdu▯▴own»њp»०eftarrows;懇ightƀahs◍◖◞rrowĀ;sࣴࢧarpoonó྘quigarro÷⇰hreetimes;拋ƀ;qs▋ও◺lanôবʀ;cdgsব☊☍☝☨c;檨otĀ;o☔☕橿Ā;r☚☛檁;檃Ā;e☢☥쀀⋚︀s;檓ʀadegs☳☹☽♉♋pproøⓆot;拖qĀgq♃♅ôউgtò⒌ôছiíলƀilr♕࣡♚sht;楼;쀀𝔩Ā;Eজ♣;檑š♩♶rĀdu▲♮Ā;l॥♳;楪lk;斄cy;䑙ʀ;achtੈ⚈⚋⚑⚖rò◁orneòᴈard;楫ri;旺Āio⚟⚤dot;䅀ustĀ;a⚬⚭掰che»⚭ȀEaes⚻⚽⛉⛔;扨pĀ;p⛃⛄檉rox»⛄Ā;q⛎⛏檇Ā;q⛎⚻im;拦Ѐabnoptwz⛩⛴⛷✚✯❁❇❐Ānr⛮⛱g;柬r;懽rëࣁgƀlmr⛿✍✔eftĀar০✇ightá৲apsto;柼ightá৽parrowĀlr✥✩efô⓭ight;憬ƀafl✶✹✽r;榅;쀀𝕝us;樭imes;樴š❋❏st;戗áፎƀ;ef❗❘᠀旊nge»❘arĀ;l❤❥䀨t;榓ʀachmt❳❶❼➅➇ròࢨorneòᶌarĀ;d྘➃;業;怎ri;抿̀achiqt➘➝ੀ➢➮➻quo;怹r;쀀𝓁mƀ;egল➪➬;檍;檏Ābu┪➳oĀ;rฟ➹;怚rok;䅂萀<;cdhilqrࠫ⟒☹⟜⟠⟥⟪⟰Āci⟗⟙;檦r;橹reå◲mes;拉arr;楶uest;橻ĀPi⟵⟹ar;榖ƀ;ef⠀भ᠛旃rĀdu⠇⠍shar;楊har;楦Āen⠗⠡rtneqq;쀀≨︀Å⠞܀Dacdefhilnopsu⡀⡅⢂⢎⢓⢠⢥⢨⣚⣢⣤ઃ⣳⤂Dot;戺Ȁclpr⡎⡒⡣⡽r耻¯䂯Āet⡗⡙;時Ā;e⡞⡟朠se»⡟Ā;sျ⡨toȀ;dluျ⡳⡷⡻owîҌefôएðᏑker;斮Āoy⢇⢌mma;権;䐼ash;怔asuredangle»ᘦr;쀀𝔪o;愧ƀcdn⢯⢴⣉ro耻µ䂵Ȁ;acdᑤ⢽⣀⣄sôᚧir;櫰ot肻·Ƶusƀ;bd⣒ᤃ⣓戒Ā;uᴼ⣘;横ţ⣞⣡p;櫛ò−ðઁĀdp⣩⣮els;抧f;쀀𝕞Āct⣸⣽r;쀀𝓂pos»ᖝƀ;lm⤉⤊⤍䎼timap;抸ఀGLRVabcdefghijlmoprstuvw⥂⥓⥾⦉⦘⧚⧩⨕⨚⩘⩝⪃⪕⪤⪨⬄⬇⭄⭿⮮ⰴⱧⱼ⳩Āgt⥇⥋;쀀⋙̸Ā;v⥐௏쀀≫⃒ƀelt⥚⥲⥶ftĀar⥡⥧rrow;懍ightarrow;懎;쀀⋘̸Ā;v⥻ే쀀≪⃒ightarrow;懏ĀDd⦎⦓ash;抯ash;抮ʀbcnpt⦣⦧⦬⦱⧌la»˞ute;䅄g;쀀∠⃒ʀ;Eiop඄⦼⧀⧅⧈;쀀⩰̸d;쀀≋̸s;䅉roø඄urĀ;a⧓⧔普lĀ;s⧓ସǳ⧟\0⧣p肻 ଷmpĀ;e௹ఀʀaeouy⧴⧾⨃⨐⨓ǰ⧹\0⧻;橃on;䅈dil;䅆ngĀ;dൾ⨊ot;쀀⩭̸p;橂;䐽ash;怓΀;Aadqsxஒ⨩⨭⨻⩁⩅⩐rr;懗rĀhr⨳⨶k;椤Ā;oᏲᏰot;쀀≐̸uiöୣĀei⩊⩎ar;椨í஘istĀ;s஠டr;쀀𝔫ȀEest௅⩦⩹⩼ƀ;qs஼⩭௡ƀ;qs஼௅⩴lanô௢ií௪Ā;rஶ⪁»ஷƀAap⪊⪍⪑rò⥱rr;憮ar;櫲ƀ;svྍ⪜ྌĀ;d⪡⪢拼;拺cy;䑚΀AEadest⪷⪺⪾⫂⫅⫶⫹rò⥦;쀀≦̸rr;憚r;急Ȁ;fqs఻⫎⫣⫯tĀar⫔⫙rro÷⫁ightarro÷⪐ƀ;qs఻⪺⫪lanôౕĀ;sౕ⫴»శiíౝĀ;rవ⫾iĀ;eచథiäඐĀpt⬌⬑f;쀀𝕟膀¬;in⬙⬚⬶䂬nȀ;Edvஉ⬤⬨⬮;쀀⋹̸ot;쀀⋵̸ǡஉ⬳⬵;拷;拶iĀ;vಸ⬼ǡಸ⭁⭃;拾;拽ƀaor⭋⭣⭩rȀ;ast୻⭕⭚⭟lleì୻l;쀀⫽⃥;쀀∂̸lint;樔ƀ;ceಒ⭰⭳uåಥĀ;cಘ⭸Ā;eಒ⭽ñಘȀAait⮈⮋⮝⮧rò⦈rrƀ;cw⮔⮕⮙憛;쀀⤳̸;쀀↝̸ghtarrow»⮕riĀ;eೋೖ΀chimpqu⮽⯍⯙⬄୸⯤⯯Ȁ;cerല⯆ഷ⯉uå൅;쀀𝓃ortɭ⬅\0\0⯖ará⭖mĀ;e൮⯟Ā;q൴൳suĀbp⯫⯭å೸åഋƀbcp⯶ⰑⰙȀ;Ees⯿ⰀഢⰄ抄;쀀⫅̸etĀ;eഛⰋqĀ;qണⰀcĀ;eലⰗñസȀ;EesⰢⰣൟⰧ抅;쀀⫆̸etĀ;e൘ⰮqĀ;qൠⰣȀgilrⰽⰿⱅⱇìௗlde耻ñ䃱çృiangleĀlrⱒⱜeftĀ;eచⱚñదightĀ;eೋⱥñ೗Ā;mⱬⱭ䎽ƀ;esⱴⱵⱹ䀣ro;愖p;怇ҀDHadgilrsⲏⲔⲙⲞⲣⲰⲶⳓⳣash;抭arr;椄p;쀀≍⃒ash;抬ĀetⲨⲬ;쀀≥⃒;쀀>⃒nfin;槞ƀAetⲽⳁⳅrr;椂;쀀≤⃒Ā;rⳊⳍ쀀<⃒ie;쀀⊴⃒ĀAtⳘⳜrr;椃rie;쀀⊵⃒im;쀀∼⃒ƀAan⳰⳴ⴂrr;懖rĀhr⳺⳽k;椣Ā;oᏧᏥear;椧ቓ᪕\0\0\0\0\0\0\0\0\0\0\0\0\0ⴭ\0ⴸⵈⵠⵥ⵲ⶄᬇ\0\0ⶍⶫ\0ⷈⷎ\0ⷜ⸙⸫⸾⹃Ācsⴱ᪗ute耻ó䃳ĀiyⴼⵅrĀ;c᪞ⵂ耻ô䃴;䐾ʀabios᪠ⵒⵗǈⵚlac;䅑v;樸old;榼lig;䅓Ācr⵩⵭ir;榿;쀀𝔬ͯ⵹\0\0⵼\0ⶂn;䋛ave耻ò䃲;槁Ābmⶈ෴ar;榵Ȁacitⶕ⶘ⶥⶨrò᪀Āir⶝ⶠr;榾oss;榻nå๒;槀ƀaeiⶱⶵⶹcr;䅍ga;䏉ƀcdnⷀⷅǍron;䎿;榶pf;쀀𝕠ƀaelⷔ⷗ǒr;榷rp;榹΀;adiosvⷪⷫⷮ⸈⸍⸐⸖戨rò᪆Ȁ;efmⷷⷸ⸂⸅橝rĀ;oⷾⷿ愴f»ⷿ耻ª䂪耻º䂺gof;抶r;橖lope;橗;橛ƀclo⸟⸡⸧ò⸁ash耻ø䃸l;折iŬⸯ⸴de耻õ䃵esĀ;aǛ⸺s;樶ml耻ö䃶bar;挽ૡ⹞\0⹽\0⺀⺝\0⺢⺹\0\0⻋ຜ\0⼓\0\0⼫⾼\0⿈rȀ;astЃ⹧⹲຅脀¶;l⹭⹮䂶leìЃɩ⹸\0\0⹻m;櫳;櫽y;䐿rʀcimpt⺋⺏⺓ᡥ⺗nt;䀥od;䀮il;怰enk;怱r;쀀𝔭ƀimo⺨⺰⺴Ā;v⺭⺮䏆;䏕maô੶ne;明ƀ;tv⺿⻀⻈䏀chfork»´;䏖Āau⻏⻟nĀck⻕⻝kĀ;h⇴⻛;愎ö⇴sҀ;abcdemst⻳⻴ᤈ⻹⻽⼄⼆⼊⼎䀫cir;樣ir;樢Āouᵀ⼂;樥;橲n肻±ຝim;樦wo;樧ƀipu⼙⼠⼥ntint;樕f;쀀𝕡nd耻£䂣Ԁ;Eaceinosu່⼿⽁⽄⽇⾁⾉⾒⽾⾶;檳p;檷uå໙Ā;c໎⽌̀;acens່⽙⽟⽦⽨⽾pproø⽃urlyeñ໙ñ໎ƀaes⽯⽶⽺pprox;檹qq;檵im;拨iíໟmeĀ;s⾈ຮ怲ƀEas⽸⾐⽺ð⽵ƀdfp໬⾙⾯ƀals⾠⾥⾪lar;挮ine;挒urf;挓Ā;t໻⾴ï໻rel;抰Āci⿀⿅r;쀀𝓅;䏈ncsp;怈̀fiopsu⿚⋢⿟⿥⿫⿱r;쀀𝔮pf;쀀𝕢rime;恗cr;쀀𝓆ƀaeo⿸〉〓tĀei⿾々rnionóڰnt;樖stĀ;e【】䀿ñἙô༔઀ABHabcdefhilmnoprstux぀けさすムㄎㄫㅇㅢㅲㆎ㈆㈕㈤㈩㉘㉮㉲㊐㊰㊷ƀartぇおがròႳòϝail;検aròᱥar;楤΀cdenqrtとふへみわゔヌĀeuねぱ;쀀∽̱te;䅕iãᅮmptyv;榳gȀ;del࿑らるろ;榒;榥å࿑uo耻»䂻rր;abcfhlpstw࿜ガクシスゼゾダッデナp;極Ā;f࿠ゴs;椠;椳s;椞ë≝ð✮l;楅im;楴l;憣;憝Āaiパフil;椚oĀ;nホボ戶aló༞ƀabrョリヮrò៥rk;杳ĀakンヽcĀekヹ・;䁽;䁝Āes㄂㄄;榌lĀduㄊㄌ;榎;榐Ȁaeuyㄗㄜㄧㄩron;䅙Ādiㄡㄥil;䅗ì࿲âヺ;䑀Ȁclqsㄴㄷㄽㅄa;椷dhar;楩uoĀ;rȎȍh;憳ƀacgㅎㅟངlȀ;ipsླྀㅘㅛႜnåႻarôྩt;断ƀilrㅩဣㅮsht;楽;쀀𝔯ĀaoㅷㆆrĀduㅽㅿ»ѻĀ;l႑ㆄ;楬Ā;vㆋㆌ䏁;䏱ƀgns㆕ㇹㇼht̀ahlrstㆤㆰ㇂㇘㇤㇮rrowĀ;t࿜ㆭaéトarpoonĀduㆻㆿowîㅾp»႒eftĀah㇊㇐rrowó࿪arpoonóՑightarrows;應quigarro÷ニhreetimes;拌g;䋚ingdotseñἲƀahm㈍㈐㈓rò࿪aòՑ;怏oustĀ;a㈞㈟掱che»㈟mid;櫮Ȁabpt㈲㈽㉀㉒Ānr㈷㈺g;柭r;懾rëဃƀafl㉇㉊㉎r;榆;쀀𝕣us;樮imes;樵Āap㉝㉧rĀ;g㉣㉤䀩t;榔olint;樒arò㇣Ȁachq㉻㊀Ⴜ㊅quo;怺r;쀀𝓇Ābu・㊊oĀ;rȔȓƀhir㊗㊛㊠reåㇸmes;拊iȀ;efl㊪ၙᠡ㊫方tri;槎luhar;楨;愞ൡ㋕㋛㋟㌬㌸㍱\0㍺㎤\0\0㏬㏰\0㐨㑈㑚㒭㒱㓊㓱\0㘖\0\0㘳cute;䅛quï➺Ԁ;Eaceinpsyᇭ㋳㋵㋿㌂㌋㌏㌟㌦㌩;檴ǰ㋺\0㋼;檸on;䅡uåᇾĀ;dᇳ㌇il;䅟rc;䅝ƀEas㌖㌘㌛;檶p;檺im;择olint;樓iíሄ;䑁otƀ;be㌴ᵇ㌵担;橦΀Aacmstx㍆㍊㍗㍛㍞㍣㍭rr;懘rĀhr㍐㍒ë∨Ā;oਸ਼਴t耻§䂧i;䀻war;椩mĀin㍩ðnuóñt;朶rĀ;o㍶⁕쀀𝔰Ȁacoy㎂㎆㎑㎠rp;景Āhy㎋㎏cy;䑉;䑈rtɭ㎙\0\0㎜iäᑤaraì⹯耻­䂭Āgm㎨㎴maƀ;fv㎱㎲㎲䏃;䏂Ѐ;deglnprካ㏅㏉㏎㏖㏞㏡㏦ot;橪Ā;q኱ኰĀ;E㏓㏔檞;檠Ā;E㏛㏜檝;檟e;扆lus;樤arr;楲aròᄽȀaeit㏸㐈㐏㐗Āls㏽㐄lsetmé㍪hp;樳parsl;槤Ādlᑣ㐔e;挣Ā;e㐜㐝檪Ā;s㐢㐣檬;쀀⪬︀ƀflp㐮㐳㑂tcy;䑌Ā;b㐸㐹䀯Ā;a㐾㐿槄r;挿f;쀀𝕤aĀdr㑍ЂesĀ;u㑔㑕晠it»㑕ƀcsu㑠㑹㒟Āau㑥㑯pĀ;sᆈ㑫;쀀⊓︀pĀ;sᆴ㑵;쀀⊔︀uĀbp㑿㒏ƀ;esᆗᆜ㒆etĀ;eᆗ㒍ñᆝƀ;esᆨᆭ㒖etĀ;eᆨ㒝ñᆮƀ;afᅻ㒦ְrť㒫ֱ»ᅼaròᅈȀcemt㒹㒾㓂㓅r;쀀𝓈tmîñiì㐕aræᆾĀar㓎㓕rĀ;f㓔ឿ昆Āan㓚㓭ightĀep㓣㓪psiloîỠhé⺯s»⡒ʀbcmnp㓻㕞ሉ㖋㖎Ҁ;Edemnprs㔎㔏㔑㔕㔞㔣㔬㔱㔶抂;櫅ot;檽Ā;dᇚ㔚ot;櫃ult;櫁ĀEe㔨㔪;櫋;把lus;檿arr;楹ƀeiu㔽㕒㕕tƀ;en㔎㕅㕋qĀ;qᇚ㔏eqĀ;q㔫㔨m;櫇Ābp㕚㕜;櫕;櫓c̀;acensᇭ㕬㕲㕹㕻㌦pproø㋺urlyeñᇾñᇳƀaes㖂㖈㌛pproø㌚qñ㌗g;晪ڀ123;Edehlmnps㖩㖬㖯ሜ㖲㖴㗀㗉㗕㗚㗟㗨㗭耻¹䂹耻²䂲耻³䂳;櫆Āos㖹㖼t;檾ub;櫘Ā;dሢ㗅ot;櫄sĀou㗏㗒l;柉b;櫗arr;楻ult;櫂ĀEe㗤㗦;櫌;抋lus;櫀ƀeiu㗴㘉㘌tƀ;enሜ㗼㘂qĀ;qሢ㖲eqĀ;q㗧㗤m;櫈Ābp㘑㘓;櫔;櫖ƀAan㘜㘠㘭rr;懙rĀhr㘦㘨ë∮Ā;oਫ਩war;椪lig耻ß䃟௡㙑㙝㙠ዎ㙳㙹\0㙾㛂\0\0\0\0\0㛛㜃\0㜉㝬\0\0\0㞇ɲ㙖\0\0㙛get;挖;䏄rë๟ƀaey㙦㙫㙰ron;䅥dil;䅣;䑂lrec;挕r;쀀𝔱Ȁeiko㚆㚝㚵㚼ǲ㚋\0㚑eĀ4fኄኁaƀ;sv㚘㚙㚛䎸ym;䏑Ācn㚢㚲kĀas㚨㚮pproø዁im»ኬsðኞĀas㚺㚮ð዁rn耻þ䃾Ǭ̟㛆⋧es膀×;bd㛏㛐㛘䃗Ā;aᤏ㛕r;樱;樰ƀeps㛡㛣㜀á⩍Ȁ;bcf҆㛬㛰㛴ot;挶ir;櫱Ā;o㛹㛼쀀𝕥rk;櫚á㍢rime;怴ƀaip㜏㜒㝤dåቈ΀adempst㜡㝍㝀㝑㝗㝜㝟ngleʀ;dlqr㜰㜱㜶㝀㝂斵own»ᶻeftĀ;e⠀㜾ñम;扜ightĀ;e㊪㝋ñၚot;旬inus;樺lus;樹b;槍ime;樻ezium;揢ƀcht㝲㝽㞁Āry㝷㝻;쀀𝓉;䑆cy;䑛rok;䅧Āio㞋㞎xô᝷headĀlr㞗㞠eftarro÷ࡏightarrow»ཝऀAHabcdfghlmoprstuw㟐㟓㟗㟤㟰㟼㠎㠜㠣㠴㡑㡝㡫㢩㣌㣒㣪㣶ròϭar;楣Ācr㟜㟢ute耻ú䃺òᅐrǣ㟪\0㟭y;䑞ve;䅭Āiy㟵㟺rc耻û䃻;䑃ƀabh㠃㠆㠋ròᎭlac;䅱aòᏃĀir㠓㠘sht;楾;쀀𝔲rave耻ù䃹š㠧㠱rĀlr㠬㠮»ॗ»ႃlk;斀Āct㠹㡍ɯ㠿\0\0㡊rnĀ;e㡅㡆挜r»㡆op;挏ri;旸Āal㡖㡚cr;䅫肻¨͉Āgp㡢㡦on;䅳f;쀀𝕦̀adhlsuᅋ㡸㡽፲㢑㢠ownáᎳarpoonĀlr㢈㢌efô㠭ighô㠯iƀ;hl㢙㢚㢜䏅»ᏺon»㢚parrows;懈ƀcit㢰㣄㣈ɯ㢶\0\0㣁rnĀ;e㢼㢽挝r»㢽op;挎ng;䅯ri;旹cr;쀀𝓊ƀdir㣙㣝㣢ot;拰lde;䅩iĀ;f㜰㣨»᠓Āam㣯㣲rò㢨l耻ü䃼angle;榧ހABDacdeflnoprsz㤜㤟㤩㤭㦵㦸㦽㧟㧤㧨㧳㧹㧽㨁㨠ròϷarĀ;v㤦㤧櫨;櫩asèϡĀnr㤲㤷grt;榜΀eknprst㓣㥆㥋㥒㥝㥤㦖appá␕othinçẖƀhir㓫⻈㥙opô⾵Ā;hᎷ㥢ïㆍĀiu㥩㥭gmá㎳Ābp㥲㦄setneqĀ;q㥽㦀쀀⊊︀;쀀⫋︀setneqĀ;q㦏㦒쀀⊋︀;쀀⫌︀Āhr㦛㦟etá㚜iangleĀlr㦪㦯eft»थight»ၑy;䐲ash»ံƀelr㧄㧒㧗ƀ;beⷪ㧋㧏ar;抻q;扚lip;拮Ābt㧜ᑨaòᑩr;쀀𝔳tré㦮suĀbp㧯㧱»ജ»൙pf;쀀𝕧roð໻tré㦴Ācu㨆㨋r;쀀𝓋Ābp㨐㨘nĀEe㦀㨖»㥾nĀEe㦒㨞»㦐igzag;榚΀cefoprs㨶㨻㩖㩛㩔㩡㩪irc;䅵Ādi㩀㩑Ābg㩅㩉ar;機eĀ;qᗺ㩏;扙erp;愘r;쀀𝔴pf;쀀𝕨Ā;eᑹ㩦atèᑹcr;쀀𝓌ૣណ㪇\0㪋\0㪐㪛\0\0㪝㪨㪫㪯\0\0㫃㫎\0㫘ៜ៟tré៑r;쀀𝔵ĀAa㪔㪗ròσrò৶;䎾ĀAa㪡㪤ròθrò৫að✓is;拻ƀdptឤ㪵㪾Āfl㪺ឩ;쀀𝕩imåឲĀAa㫇㫊ròώròਁĀcq㫒ីr;쀀𝓍Āpt៖㫜ré។Ѐacefiosu㫰㫽㬈㬌㬑㬕㬛㬡cĀuy㫶㫻te耻ý䃽;䑏Āiy㬂㬆rc;䅷;䑋n耻¥䂥r;쀀𝔶cy;䑗pf;쀀𝕪cr;쀀𝓎Ācm㬦㬩y;䑎l耻ÿ䃿Ԁacdefhiosw㭂㭈㭔㭘㭤㭩㭭㭴㭺㮀cute;䅺Āay㭍㭒ron;䅾;䐷ot;䅼Āet㭝㭡træᕟa;䎶r;쀀𝔷cy;䐶grarr;懝pf;쀀𝕫cr;쀀𝓏Ājn㮅㮇;怍j;怌'
            .split('')
            .map((e) => e.charCodeAt(0))
        ),
        z = new Uint16Array(
          'Ȁaglq\tɭ\0\0p;䀦os;䀧t;䀾t;䀼uot;䀢'
            .split('')
            .map((e) => e.charCodeAt(0))
        )
      var $
      const Z = new Map([
          [0, 65533],
          [128, 8364],
          [130, 8218],
          [131, 402],
          [132, 8222],
          [133, 8230],
          [134, 8224],
          [135, 8225],
          [136, 710],
          [137, 8240],
          [138, 352],
          [139, 8249],
          [140, 338],
          [142, 381],
          [145, 8216],
          [146, 8217],
          [147, 8220],
          [148, 8221],
          [149, 8226],
          [150, 8211],
          [151, 8212],
          [152, 732],
          [153, 8482],
          [154, 353],
          [155, 8250],
          [156, 339],
          [158, 382],
          [159, 376],
        ]),
        J =
          null !== ($ = String.fromCodePoint) && void 0 !== $
            ? $
            : function (e) {
                let t = ''
                return (
                  e > 65535 &&
                    ((e -= 65536),
                    (t += String.fromCharCode(((e >>> 10) & 1023) | 55296)),
                    (e = 56320 | (1023 & e))),
                  (t += String.fromCharCode(e)),
                  t
                )
              }
      function ee(e) {
        var t
        return (e >= 55296 && e <= 57343) || e > 1114111
          ? 65533
          : null !== (t = Z.get(e)) && void 0 !== t
          ? t
          : e
      }
      var te, re, ne, se, ae
      function ie(e) {
        return e >= te.ZERO && e <= te.NINE
      }
      !(function (e) {
        ;(e[(e.NUM = 35)] = 'NUM'),
          (e[(e.SEMI = 59)] = 'SEMI'),
          (e[(e.EQUALS = 61)] = 'EQUALS'),
          (e[(e.ZERO = 48)] = 'ZERO'),
          (e[(e.NINE = 57)] = 'NINE'),
          (e[(e.LOWER_A = 97)] = 'LOWER_A'),
          (e[(e.LOWER_F = 102)] = 'LOWER_F'),
          (e[(e.LOWER_X = 120)] = 'LOWER_X'),
          (e[(e.LOWER_Z = 122)] = 'LOWER_Z'),
          (e[(e.UPPER_A = 65)] = 'UPPER_A'),
          (e[(e.UPPER_F = 70)] = 'UPPER_F'),
          (e[(e.UPPER_Z = 90)] = 'UPPER_Z')
      })(te || (te = {})),
        (function (e) {
          ;(e[(e.VALUE_LENGTH = 49152)] = 'VALUE_LENGTH'),
            (e[(e.BRANCH_LENGTH = 16256)] = 'BRANCH_LENGTH'),
            (e[(e.JUMP_TABLE = 127)] = 'JUMP_TABLE')
        })(re || (re = {})),
        (function (e) {
          ;(e[(e.EntityStart = 0)] = 'EntityStart'),
            (e[(e.NumericStart = 1)] = 'NumericStart'),
            (e[(e.NumericDecimal = 2)] = 'NumericDecimal'),
            (e[(e.NumericHex = 3)] = 'NumericHex'),
            (e[(e.NamedEntity = 4)] = 'NamedEntity')
        })(ne || (ne = {})),
        ((ae = se || (se = {}))[(ae.Legacy = 0)] = 'Legacy'),
        (ae[(ae.Strict = 1)] = 'Strict'),
        (ae[(ae.Attribute = 2)] = 'Attribute')
      class oe {
        constructor(e, t, r) {
          ;(this.decodeTree = e),
            (this.emitCodePoint = t),
            (this.errors = r),
            (this.state = ne.EntityStart),
            (this.consumed = 1),
            (this.result = 0),
            (this.treeIndex = 0),
            (this.excess = 1),
            (this.decodeMode = se.Strict)
        }
        startEntity(e) {
          ;(this.decodeMode = e),
            (this.state = ne.EntityStart),
            (this.result = 0),
            (this.treeIndex = 0),
            (this.excess = 1),
            (this.consumed = 1)
        }
        write(e, t) {
          switch (this.state) {
            case ne.EntityStart:
              return e.charCodeAt(t) === te.NUM
                ? ((this.state = ne.NumericStart),
                  (this.consumed += 1),
                  this.stateNumericStart(e, t + 1))
                : ((this.state = ne.NamedEntity), this.stateNamedEntity(e, t))
            case ne.NumericStart:
              return this.stateNumericStart(e, t)
            case ne.NumericDecimal:
              return this.stateNumericDecimal(e, t)
            case ne.NumericHex:
              return this.stateNumericHex(e, t)
            case ne.NamedEntity:
              return this.stateNamedEntity(e, t)
          }
        }
        stateNumericStart(e, t) {
          return t >= e.length
            ? -1
            : (32 | e.charCodeAt(t)) === te.LOWER_X
            ? ((this.state = ne.NumericHex),
              (this.consumed += 1),
              this.stateNumericHex(e, t + 1))
            : ((this.state = ne.NumericDecimal), this.stateNumericDecimal(e, t))
        }
        addToNumericResult(e, t, r, n) {
          if (t !== r) {
            const s = r - t
            ;(this.result =
              this.result * Math.pow(n, s) + parseInt(e.substr(t, s), n)),
              (this.consumed += s)
          }
        }
        stateNumericHex(e, t) {
          const r = t
          for (; t < e.length; ) {
            const s = e.charCodeAt(t)
            if (
              !(
                ie(s) ||
                ((n = s),
                (n >= te.UPPER_A && n <= te.UPPER_F) ||
                  (n >= te.LOWER_A && n <= te.LOWER_F))
              )
            )
              return (
                this.addToNumericResult(e, r, t, 16),
                this.emitNumericEntity(s, 3)
              )
            t += 1
          }
          var n
          return this.addToNumericResult(e, r, t, 16), -1
        }
        stateNumericDecimal(e, t) {
          const r = t
          for (; t < e.length; ) {
            const n = e.charCodeAt(t)
            if (!ie(n))
              return (
                this.addToNumericResult(e, r, t, 10),
                this.emitNumericEntity(n, 2)
              )
            t += 1
          }
          return this.addToNumericResult(e, r, t, 10), -1
        }
        emitNumericEntity(e, t) {
          var r
          if (this.consumed <= t)
            return (
              null === (r = this.errors) ||
                void 0 === r ||
                r.absenceOfDigitsInNumericCharacterReference(this.consumed),
              0
            )
          if (e === te.SEMI) this.consumed += 1
          else if (this.decodeMode === se.Strict) return 0
          return (
            this.emitCodePoint(ee(this.result), this.consumed),
            this.errors &&
              (e !== te.SEMI &&
                this.errors.missingSemicolonAfterCharacterReference(),
              this.errors.validateNumericCharacterReference(this.result)),
            this.consumed
          )
        }
        stateNamedEntity(e, t) {
          const { decodeTree: r } = this
          let n = r[this.treeIndex],
            s = (n & re.VALUE_LENGTH) >> 14
          for (; t < e.length; t++, this.excess++) {
            const i = e.charCodeAt(t)
            if (
              ((this.treeIndex = le(r, n, this.treeIndex + Math.max(1, s), i)),
              this.treeIndex < 0)
            )
              return 0 === this.result ||
                (this.decodeMode === se.Attribute &&
                  (0 === s ||
                    (a = i) === te.EQUALS ||
                    (function (e) {
                      return (
                        (e >= te.UPPER_A && e <= te.UPPER_Z) ||
                        (e >= te.LOWER_A && e <= te.LOWER_Z) ||
                        ie(e)
                      )
                    })(a)))
                ? 0
                : this.emitNotTerminatedNamedEntity()
            if (
              ((n = r[this.treeIndex]),
              (s = (n & re.VALUE_LENGTH) >> 14),
              0 !== s)
            ) {
              if (i === te.SEMI)
                return this.emitNamedEntityData(
                  this.treeIndex,
                  s,
                  this.consumed + this.excess
                )
              this.decodeMode !== se.Strict &&
                ((this.result = this.treeIndex),
                (this.consumed += this.excess),
                (this.excess = 0))
            }
          }
          var a
          return -1
        }
        emitNotTerminatedNamedEntity() {
          var e
          const { result: t, decodeTree: r } = this,
            n = (r[t] & re.VALUE_LENGTH) >> 14
          return (
            this.emitNamedEntityData(t, n, this.consumed),
            null === (e = this.errors) ||
              void 0 === e ||
              e.missingSemicolonAfterCharacterReference(),
            this.consumed
          )
        }
        emitNamedEntityData(e, t, r) {
          const { decodeTree: n } = this
          return (
            this.emitCodePoint(1 === t ? n[e] & ~re.VALUE_LENGTH : n[e + 1], r),
            3 === t && this.emitCodePoint(n[e + 2], r),
            r
          )
        }
        end() {
          var e
          switch (this.state) {
            case ne.NamedEntity:
              return 0 === this.result ||
                (this.decodeMode === se.Attribute &&
                  this.result !== this.treeIndex)
                ? 0
                : this.emitNotTerminatedNamedEntity()
            case ne.NumericDecimal:
              return this.emitNumericEntity(0, 2)
            case ne.NumericHex:
              return this.emitNumericEntity(0, 3)
            case ne.NumericStart:
              return (
                null === (e = this.errors) ||
                  void 0 === e ||
                  e.absenceOfDigitsInNumericCharacterReference(this.consumed),
                0
              )
            case ne.EntityStart:
              return 0
          }
        }
      }
      function ce(e) {
        let t = ''
        const r = new oe(e, (e) => (t += J(e)))
        return function (e, n) {
          let s = 0,
            a = 0
          for (; (a = e.indexOf('&', a)) >= 0; ) {
            ;(t += e.slice(s, a)), r.startEntity(n)
            const i = r.write(e, a + 1)
            if (i < 0) {
              s = a + r.end()
              break
            }
            ;(s = a + i), (a = 0 === i ? s + 1 : s)
          }
          const i = t + e.slice(s)
          return (t = ''), i
        }
      }
      function le(e, t, r, n) {
        const s = (t & re.BRANCH_LENGTH) >> 7,
          a = t & re.JUMP_TABLE
        if (0 === s) return 0 !== a && n === a ? r : -1
        if (a) {
          const t = n - a
          return t < 0 || t >= s ? -1 : e[r + t] - 1
        }
        let i = r,
          o = i + s - 1
        for (; i <= o; ) {
          const t = (i + o) >>> 1,
            r = e[t]
          if (r < n) i = t + 1
          else {
            if (!(r > n)) return e[t + s]
            o = t - 1
          }
        }
        return -1
      }
      function he(e) {
        for (let t = 1; t < e.length; t++) e[t][0] += e[t - 1][0] + 1
        return e
      }
      ce(K),
        ce(z),
        new Map(
          he([
            [9, '&Tab;'],
            [0, '&NewLine;'],
            [22, '&excl;'],
            [0, '&quot;'],
            [0, '&num;'],
            [0, '&dollar;'],
            [0, '&percnt;'],
            [0, '&amp;'],
            [0, '&apos;'],
            [0, '&lpar;'],
            [0, '&rpar;'],
            [0, '&ast;'],
            [0, '&plus;'],
            [0, '&comma;'],
            [1, '&period;'],
            [0, '&sol;'],
            [10, '&colon;'],
            [0, '&semi;'],
            [0, { v: '&lt;', n: 8402, o: '&nvlt;' }],
            [0, { v: '&equals;', n: 8421, o: '&bne;' }],
            [0, { v: '&gt;', n: 8402, o: '&nvgt;' }],
            [0, '&quest;'],
            [0, '&commat;'],
            [26, '&lbrack;'],
            [0, '&bsol;'],
            [0, '&rbrack;'],
            [0, '&Hat;'],
            [0, '&lowbar;'],
            [0, '&DiacriticalGrave;'],
            [5, { n: 106, o: '&fjlig;' }],
            [20, '&lbrace;'],
            [0, '&verbar;'],
            [0, '&rbrace;'],
            [34, '&nbsp;'],
            [0, '&iexcl;'],
            [0, '&cent;'],
            [0, '&pound;'],
            [0, '&curren;'],
            [0, '&yen;'],
            [0, '&brvbar;'],
            [0, '&sect;'],
            [0, '&die;'],
            [0, '&copy;'],
            [0, '&ordf;'],
            [0, '&laquo;'],
            [0, '&not;'],
            [0, '&shy;'],
            [0, '&circledR;'],
            [0, '&macr;'],
            [0, '&deg;'],
            [0, '&PlusMinus;'],
            [0, '&sup2;'],
            [0, '&sup3;'],
            [0, '&acute;'],
            [0, '&micro;'],
            [0, '&para;'],
            [0, '&centerdot;'],
            [0, '&cedil;'],
            [0, '&sup1;'],
            [0, '&ordm;'],
            [0, '&raquo;'],
            [0, '&frac14;'],
            [0, '&frac12;'],
            [0, '&frac34;'],
            [0, '&iquest;'],
            [0, '&Agrave;'],
            [0, '&Aacute;'],
            [0, '&Acirc;'],
            [0, '&Atilde;'],
            [0, '&Auml;'],
            [0, '&angst;'],
            [0, '&AElig;'],
            [0, '&Ccedil;'],
            [0, '&Egrave;'],
            [0, '&Eacute;'],
            [0, '&Ecirc;'],
            [0, '&Euml;'],
            [0, '&Igrave;'],
            [0, '&Iacute;'],
            [0, '&Icirc;'],
            [0, '&Iuml;'],
            [0, '&ETH;'],
            [0, '&Ntilde;'],
            [0, '&Ograve;'],
            [0, '&Oacute;'],
            [0, '&Ocirc;'],
            [0, '&Otilde;'],
            [0, '&Ouml;'],
            [0, '&times;'],
            [0, '&Oslash;'],
            [0, '&Ugrave;'],
            [0, '&Uacute;'],
            [0, '&Ucirc;'],
            [0, '&Uuml;'],
            [0, '&Yacute;'],
            [0, '&THORN;'],
            [0, '&szlig;'],
            [0, '&agrave;'],
            [0, '&aacute;'],
            [0, '&acirc;'],
            [0, '&atilde;'],
            [0, '&auml;'],
            [0, '&aring;'],
            [0, '&aelig;'],
            [0, '&ccedil;'],
            [0, '&egrave;'],
            [0, '&eacute;'],
            [0, '&ecirc;'],
            [0, '&euml;'],
            [0, '&igrave;'],
            [0, '&iacute;'],
            [0, '&icirc;'],
            [0, '&iuml;'],
            [0, '&eth;'],
            [0, '&ntilde;'],
            [0, '&ograve;'],
            [0, '&oacute;'],
            [0, '&ocirc;'],
            [0, '&otilde;'],
            [0, '&ouml;'],
            [0, '&div;'],
            [0, '&oslash;'],
            [0, '&ugrave;'],
            [0, '&uacute;'],
            [0, '&ucirc;'],
            [0, '&uuml;'],
            [0, '&yacute;'],
            [0, '&thorn;'],
            [0, '&yuml;'],
            [0, '&Amacr;'],
            [0, '&amacr;'],
            [0, '&Abreve;'],
            [0, '&abreve;'],
            [0, '&Aogon;'],
            [0, '&aogon;'],
            [0, '&Cacute;'],
            [0, '&cacute;'],
            [0, '&Ccirc;'],
            [0, '&ccirc;'],
            [0, '&Cdot;'],
            [0, '&cdot;'],
            [0, '&Ccaron;'],
            [0, '&ccaron;'],
            [0, '&Dcaron;'],
            [0, '&dcaron;'],
            [0, '&Dstrok;'],
            [0, '&dstrok;'],
            [0, '&Emacr;'],
            [0, '&emacr;'],
            [2, '&Edot;'],
            [0, '&edot;'],
            [0, '&Eogon;'],
            [0, '&eogon;'],
            [0, '&Ecaron;'],
            [0, '&ecaron;'],
            [0, '&Gcirc;'],
            [0, '&gcirc;'],
            [0, '&Gbreve;'],
            [0, '&gbreve;'],
            [0, '&Gdot;'],
            [0, '&gdot;'],
            [0, '&Gcedil;'],
            [1, '&Hcirc;'],
            [0, '&hcirc;'],
            [0, '&Hstrok;'],
            [0, '&hstrok;'],
            [0, '&Itilde;'],
            [0, '&itilde;'],
            [0, '&Imacr;'],
            [0, '&imacr;'],
            [2, '&Iogon;'],
            [0, '&iogon;'],
            [0, '&Idot;'],
            [0, '&imath;'],
            [0, '&IJlig;'],
            [0, '&ijlig;'],
            [0, '&Jcirc;'],
            [0, '&jcirc;'],
            [0, '&Kcedil;'],
            [0, '&kcedil;'],
            [0, '&kgreen;'],
            [0, '&Lacute;'],
            [0, '&lacute;'],
            [0, '&Lcedil;'],
            [0, '&lcedil;'],
            [0, '&Lcaron;'],
            [0, '&lcaron;'],
            [0, '&Lmidot;'],
            [0, '&lmidot;'],
            [0, '&Lstrok;'],
            [0, '&lstrok;'],
            [0, '&Nacute;'],
            [0, '&nacute;'],
            [0, '&Ncedil;'],
            [0, '&ncedil;'],
            [0, '&Ncaron;'],
            [0, '&ncaron;'],
            [0, '&napos;'],
            [0, '&ENG;'],
            [0, '&eng;'],
            [0, '&Omacr;'],
            [0, '&omacr;'],
            [2, '&Odblac;'],
            [0, '&odblac;'],
            [0, '&OElig;'],
            [0, '&oelig;'],
            [0, '&Racute;'],
            [0, '&racute;'],
            [0, '&Rcedil;'],
            [0, '&rcedil;'],
            [0, '&Rcaron;'],
            [0, '&rcaron;'],
            [0, '&Sacute;'],
            [0, '&sacute;'],
            [0, '&Scirc;'],
            [0, '&scirc;'],
            [0, '&Scedil;'],
            [0, '&scedil;'],
            [0, '&Scaron;'],
            [0, '&scaron;'],
            [0, '&Tcedil;'],
            [0, '&tcedil;'],
            [0, '&Tcaron;'],
            [0, '&tcaron;'],
            [0, '&Tstrok;'],
            [0, '&tstrok;'],
            [0, '&Utilde;'],
            [0, '&utilde;'],
            [0, '&Umacr;'],
            [0, '&umacr;'],
            [0, '&Ubreve;'],
            [0, '&ubreve;'],
            [0, '&Uring;'],
            [0, '&uring;'],
            [0, '&Udblac;'],
            [0, '&udblac;'],
            [0, '&Uogon;'],
            [0, '&uogon;'],
            [0, '&Wcirc;'],
            [0, '&wcirc;'],
            [0, '&Ycirc;'],
            [0, '&ycirc;'],
            [0, '&Yuml;'],
            [0, '&Zacute;'],
            [0, '&zacute;'],
            [0, '&Zdot;'],
            [0, '&zdot;'],
            [0, '&Zcaron;'],
            [0, '&zcaron;'],
            [19, '&fnof;'],
            [34, '&imped;'],
            [63, '&gacute;'],
            [65, '&jmath;'],
            [142, '&circ;'],
            [0, '&caron;'],
            [16, '&breve;'],
            [0, '&DiacriticalDot;'],
            [0, '&ring;'],
            [0, '&ogon;'],
            [0, '&DiacriticalTilde;'],
            [0, '&dblac;'],
            [51, '&DownBreve;'],
            [127, '&Alpha;'],
            [0, '&Beta;'],
            [0, '&Gamma;'],
            [0, '&Delta;'],
            [0, '&Epsilon;'],
            [0, '&Zeta;'],
            [0, '&Eta;'],
            [0, '&Theta;'],
            [0, '&Iota;'],
            [0, '&Kappa;'],
            [0, '&Lambda;'],
            [0, '&Mu;'],
            [0, '&Nu;'],
            [0, '&Xi;'],
            [0, '&Omicron;'],
            [0, '&Pi;'],
            [0, '&Rho;'],
            [1, '&Sigma;'],
            [0, '&Tau;'],
            [0, '&Upsilon;'],
            [0, '&Phi;'],
            [0, '&Chi;'],
            [0, '&Psi;'],
            [0, '&ohm;'],
            [7, '&alpha;'],
            [0, '&beta;'],
            [0, '&gamma;'],
            [0, '&delta;'],
            [0, '&epsi;'],
            [0, '&zeta;'],
            [0, '&eta;'],
            [0, '&theta;'],
            [0, '&iota;'],
            [0, '&kappa;'],
            [0, '&lambda;'],
            [0, '&mu;'],
            [0, '&nu;'],
            [0, '&xi;'],
            [0, '&omicron;'],
            [0, '&pi;'],
            [0, '&rho;'],
            [0, '&sigmaf;'],
            [0, '&sigma;'],
            [0, '&tau;'],
            [0, '&upsi;'],
            [0, '&phi;'],
            [0, '&chi;'],
            [0, '&psi;'],
            [0, '&omega;'],
            [7, '&thetasym;'],
            [0, '&Upsi;'],
            [2, '&phiv;'],
            [0, '&piv;'],
            [5, '&Gammad;'],
            [0, '&digamma;'],
            [18, '&kappav;'],
            [0, '&rhov;'],
            [3, '&epsiv;'],
            [0, '&backepsilon;'],
            [10, '&IOcy;'],
            [0, '&DJcy;'],
            [0, '&GJcy;'],
            [0, '&Jukcy;'],
            [0, '&DScy;'],
            [0, '&Iukcy;'],
            [0, '&YIcy;'],
            [0, '&Jsercy;'],
            [0, '&LJcy;'],
            [0, '&NJcy;'],
            [0, '&TSHcy;'],
            [0, '&KJcy;'],
            [1, '&Ubrcy;'],
            [0, '&DZcy;'],
            [0, '&Acy;'],
            [0, '&Bcy;'],
            [0, '&Vcy;'],
            [0, '&Gcy;'],
            [0, '&Dcy;'],
            [0, '&IEcy;'],
            [0, '&ZHcy;'],
            [0, '&Zcy;'],
            [0, '&Icy;'],
            [0, '&Jcy;'],
            [0, '&Kcy;'],
            [0, '&Lcy;'],
            [0, '&Mcy;'],
            [0, '&Ncy;'],
            [0, '&Ocy;'],
            [0, '&Pcy;'],
            [0, '&Rcy;'],
            [0, '&Scy;'],
            [0, '&Tcy;'],
            [0, '&Ucy;'],
            [0, '&Fcy;'],
            [0, '&KHcy;'],
            [0, '&TScy;'],
            [0, '&CHcy;'],
            [0, '&SHcy;'],
            [0, '&SHCHcy;'],
            [0, '&HARDcy;'],
            [0, '&Ycy;'],
            [0, '&SOFTcy;'],
            [0, '&Ecy;'],
            [0, '&YUcy;'],
            [0, '&YAcy;'],
            [0, '&acy;'],
            [0, '&bcy;'],
            [0, '&vcy;'],
            [0, '&gcy;'],
            [0, '&dcy;'],
            [0, '&iecy;'],
            [0, '&zhcy;'],
            [0, '&zcy;'],
            [0, '&icy;'],
            [0, '&jcy;'],
            [0, '&kcy;'],
            [0, '&lcy;'],
            [0, '&mcy;'],
            [0, '&ncy;'],
            [0, '&ocy;'],
            [0, '&pcy;'],
            [0, '&rcy;'],
            [0, '&scy;'],
            [0, '&tcy;'],
            [0, '&ucy;'],
            [0, '&fcy;'],
            [0, '&khcy;'],
            [0, '&tscy;'],
            [0, '&chcy;'],
            [0, '&shcy;'],
            [0, '&shchcy;'],
            [0, '&hardcy;'],
            [0, '&ycy;'],
            [0, '&softcy;'],
            [0, '&ecy;'],
            [0, '&yucy;'],
            [0, '&yacy;'],
            [1, '&iocy;'],
            [0, '&djcy;'],
            [0, '&gjcy;'],
            [0, '&jukcy;'],
            [0, '&dscy;'],
            [0, '&iukcy;'],
            [0, '&yicy;'],
            [0, '&jsercy;'],
            [0, '&ljcy;'],
            [0, '&njcy;'],
            [0, '&tshcy;'],
            [0, '&kjcy;'],
            [1, '&ubrcy;'],
            [0, '&dzcy;'],
            [7074, '&ensp;'],
            [0, '&emsp;'],
            [0, '&emsp13;'],
            [0, '&emsp14;'],
            [1, '&numsp;'],
            [0, '&puncsp;'],
            [0, '&ThinSpace;'],
            [0, '&hairsp;'],
            [0, '&NegativeMediumSpace;'],
            [0, '&zwnj;'],
            [0, '&zwj;'],
            [0, '&lrm;'],
            [0, '&rlm;'],
            [0, '&dash;'],
            [2, '&ndash;'],
            [0, '&mdash;'],
            [0, '&horbar;'],
            [0, '&Verbar;'],
            [1, '&lsquo;'],
            [0, '&CloseCurlyQuote;'],
            [0, '&lsquor;'],
            [1, '&ldquo;'],
            [0, '&CloseCurlyDoubleQuote;'],
            [0, '&bdquo;'],
            [1, '&dagger;'],
            [0, '&Dagger;'],
            [0, '&bull;'],
            [2, '&nldr;'],
            [0, '&hellip;'],
            [9, '&permil;'],
            [0, '&pertenk;'],
            [0, '&prime;'],
            [0, '&Prime;'],
            [0, '&tprime;'],
            [0, '&backprime;'],
            [3, '&lsaquo;'],
            [0, '&rsaquo;'],
            [3, '&oline;'],
            [2, '&caret;'],
            [1, '&hybull;'],
            [0, '&frasl;'],
            [10, '&bsemi;'],
            [7, '&qprime;'],
            [7, { v: '&MediumSpace;', n: 8202, o: '&ThickSpace;' }],
            [0, '&NoBreak;'],
            [0, '&af;'],
            [0, '&InvisibleTimes;'],
            [0, '&ic;'],
            [72, '&euro;'],
            [46, '&tdot;'],
            [0, '&DotDot;'],
            [37, '&complexes;'],
            [2, '&incare;'],
            [4, '&gscr;'],
            [0, '&hamilt;'],
            [0, '&Hfr;'],
            [0, '&Hopf;'],
            [0, '&planckh;'],
            [0, '&hbar;'],
            [0, '&imagline;'],
            [0, '&Ifr;'],
            [0, '&lagran;'],
            [0, '&ell;'],
            [1, '&naturals;'],
            [0, '&numero;'],
            [0, '&copysr;'],
            [0, '&weierp;'],
            [0, '&Popf;'],
            [0, '&Qopf;'],
            [0, '&realine;'],
            [0, '&real;'],
            [0, '&reals;'],
            [0, '&rx;'],
            [3, '&trade;'],
            [1, '&integers;'],
            [2, '&mho;'],
            [0, '&zeetrf;'],
            [0, '&iiota;'],
            [2, '&bernou;'],
            [0, '&Cayleys;'],
            [1, '&escr;'],
            [0, '&Escr;'],
            [0, '&Fouriertrf;'],
            [1, '&Mellintrf;'],
            [0, '&order;'],
            [0, '&alefsym;'],
            [0, '&beth;'],
            [0, '&gimel;'],
            [0, '&daleth;'],
            [12, '&CapitalDifferentialD;'],
            [0, '&dd;'],
            [0, '&ee;'],
            [0, '&ii;'],
            [10, '&frac13;'],
            [0, '&frac23;'],
            [0, '&frac15;'],
            [0, '&frac25;'],
            [0, '&frac35;'],
            [0, '&frac45;'],
            [0, '&frac16;'],
            [0, '&frac56;'],
            [0, '&frac18;'],
            [0, '&frac38;'],
            [0, '&frac58;'],
            [0, '&frac78;'],
            [49, '&larr;'],
            [0, '&ShortUpArrow;'],
            [0, '&rarr;'],
            [0, '&darr;'],
            [0, '&harr;'],
            [0, '&updownarrow;'],
            [0, '&nwarr;'],
            [0, '&nearr;'],
            [0, '&LowerRightArrow;'],
            [0, '&LowerLeftArrow;'],
            [0, '&nlarr;'],
            [0, '&nrarr;'],
            [1, { v: '&rarrw;', n: 824, o: '&nrarrw;' }],
            [0, '&Larr;'],
            [0, '&Uarr;'],
            [0, '&Rarr;'],
            [0, '&Darr;'],
            [0, '&larrtl;'],
            [0, '&rarrtl;'],
            [0, '&LeftTeeArrow;'],
            [0, '&mapstoup;'],
            [0, '&map;'],
            [0, '&DownTeeArrow;'],
            [1, '&hookleftarrow;'],
            [0, '&hookrightarrow;'],
            [0, '&larrlp;'],
            [0, '&looparrowright;'],
            [0, '&harrw;'],
            [0, '&nharr;'],
            [1, '&lsh;'],
            [0, '&rsh;'],
            [0, '&ldsh;'],
            [0, '&rdsh;'],
            [1, '&crarr;'],
            [0, '&cularr;'],
            [0, '&curarr;'],
            [2, '&circlearrowleft;'],
            [0, '&circlearrowright;'],
            [0, '&leftharpoonup;'],
            [0, '&DownLeftVector;'],
            [0, '&RightUpVector;'],
            [0, '&LeftUpVector;'],
            [0, '&rharu;'],
            [0, '&DownRightVector;'],
            [0, '&dharr;'],
            [0, '&dharl;'],
            [0, '&RightArrowLeftArrow;'],
            [0, '&udarr;'],
            [0, '&LeftArrowRightArrow;'],
            [0, '&leftleftarrows;'],
            [0, '&upuparrows;'],
            [0, '&rightrightarrows;'],
            [0, '&ddarr;'],
            [0, '&leftrightharpoons;'],
            [0, '&Equilibrium;'],
            [0, '&nlArr;'],
            [0, '&nhArr;'],
            [0, '&nrArr;'],
            [0, '&DoubleLeftArrow;'],
            [0, '&DoubleUpArrow;'],
            [0, '&DoubleRightArrow;'],
            [0, '&dArr;'],
            [0, '&DoubleLeftRightArrow;'],
            [0, '&DoubleUpDownArrow;'],
            [0, '&nwArr;'],
            [0, '&neArr;'],
            [0, '&seArr;'],
            [0, '&swArr;'],
            [0, '&lAarr;'],
            [0, '&rAarr;'],
            [1, '&zigrarr;'],
            [6, '&larrb;'],
            [0, '&rarrb;'],
            [15, '&DownArrowUpArrow;'],
            [7, '&loarr;'],
            [0, '&roarr;'],
            [0, '&hoarr;'],
            [0, '&forall;'],
            [0, '&comp;'],
            [0, { v: '&part;', n: 824, o: '&npart;' }],
            [0, '&exist;'],
            [0, '&nexist;'],
            [0, '&empty;'],
            [1, '&Del;'],
            [0, '&Element;'],
            [0, '&NotElement;'],
            [1, '&ni;'],
            [0, '&notni;'],
            [2, '&prod;'],
            [0, '&coprod;'],
            [0, '&sum;'],
            [0, '&minus;'],
            [0, '&MinusPlus;'],
            [0, '&dotplus;'],
            [1, '&Backslash;'],
            [0, '&lowast;'],
            [0, '&compfn;'],
            [1, '&radic;'],
            [2, '&prop;'],
            [0, '&infin;'],
            [0, '&angrt;'],
            [0, { v: '&ang;', n: 8402, o: '&nang;' }],
            [0, '&angmsd;'],
            [0, '&angsph;'],
            [0, '&mid;'],
            [0, '&nmid;'],
            [0, '&DoubleVerticalBar;'],
            [0, '&NotDoubleVerticalBar;'],
            [0, '&and;'],
            [0, '&or;'],
            [0, { v: '&cap;', n: 65024, o: '&caps;' }],
            [0, { v: '&cup;', n: 65024, o: '&cups;' }],
            [0, '&int;'],
            [0, '&Int;'],
            [0, '&iiint;'],
            [0, '&conint;'],
            [0, '&Conint;'],
            [0, '&Cconint;'],
            [0, '&cwint;'],
            [0, '&ClockwiseContourIntegral;'],
            [0, '&awconint;'],
            [0, '&there4;'],
            [0, '&becaus;'],
            [0, '&ratio;'],
            [0, '&Colon;'],
            [0, '&dotminus;'],
            [1, '&mDDot;'],
            [0, '&homtht;'],
            [0, { v: '&sim;', n: 8402, o: '&nvsim;' }],
            [0, { v: '&backsim;', n: 817, o: '&race;' }],
            [0, { v: '&ac;', n: 819, o: '&acE;' }],
            [0, '&acd;'],
            [0, '&VerticalTilde;'],
            [0, '&NotTilde;'],
            [0, { v: '&eqsim;', n: 824, o: '&nesim;' }],
            [0, '&sime;'],
            [0, '&NotTildeEqual;'],
            [0, '&cong;'],
            [0, '&simne;'],
            [0, '&ncong;'],
            [0, '&ap;'],
            [0, '&nap;'],
            [0, '&ape;'],
            [0, { v: '&apid;', n: 824, o: '&napid;' }],
            [0, '&backcong;'],
            [0, { v: '&asympeq;', n: 8402, o: '&nvap;' }],
            [0, { v: '&bump;', n: 824, o: '&nbump;' }],
            [0, { v: '&bumpe;', n: 824, o: '&nbumpe;' }],
            [0, { v: '&doteq;', n: 824, o: '&nedot;' }],
            [0, '&doteqdot;'],
            [0, '&efDot;'],
            [0, '&erDot;'],
            [0, '&Assign;'],
            [0, '&ecolon;'],
            [0, '&ecir;'],
            [0, '&circeq;'],
            [1, '&wedgeq;'],
            [0, '&veeeq;'],
            [1, '&triangleq;'],
            [2, '&equest;'],
            [0, '&ne;'],
            [0, { v: '&Congruent;', n: 8421, o: '&bnequiv;' }],
            [0, '&nequiv;'],
            [1, { v: '&le;', n: 8402, o: '&nvle;' }],
            [0, { v: '&ge;', n: 8402, o: '&nvge;' }],
            [0, { v: '&lE;', n: 824, o: '&nlE;' }],
            [0, { v: '&gE;', n: 824, o: '&ngE;' }],
            [0, { v: '&lnE;', n: 65024, o: '&lvertneqq;' }],
            [0, { v: '&gnE;', n: 65024, o: '&gvertneqq;' }],
            [
              0,
              {
                v: '&ll;',
                n: new Map(
                  he([
                    [824, '&nLtv;'],
                    [7577, '&nLt;'],
                  ])
                ),
              },
            ],
            [
              0,
              {
                v: '&gg;',
                n: new Map(
                  he([
                    [824, '&nGtv;'],
                    [7577, '&nGt;'],
                  ])
                ),
              },
            ],
            [0, '&between;'],
            [0, '&NotCupCap;'],
            [0, '&nless;'],
            [0, '&ngt;'],
            [0, '&nle;'],
            [0, '&nge;'],
            [0, '&lesssim;'],
            [0, '&GreaterTilde;'],
            [0, '&nlsim;'],
            [0, '&ngsim;'],
            [0, '&LessGreater;'],
            [0, '&gl;'],
            [0, '&NotLessGreater;'],
            [0, '&NotGreaterLess;'],
            [0, '&pr;'],
            [0, '&sc;'],
            [0, '&prcue;'],
            [0, '&sccue;'],
            [0, '&PrecedesTilde;'],
            [0, { v: '&scsim;', n: 824, o: '&NotSucceedsTilde;' }],
            [0, '&NotPrecedes;'],
            [0, '&NotSucceeds;'],
            [0, { v: '&sub;', n: 8402, o: '&NotSubset;' }],
            [0, { v: '&sup;', n: 8402, o: '&NotSuperset;' }],
            [0, '&nsub;'],
            [0, '&nsup;'],
            [0, '&sube;'],
            [0, '&supe;'],
            [0, '&NotSubsetEqual;'],
            [0, '&NotSupersetEqual;'],
            [0, { v: '&subne;', n: 65024, o: '&varsubsetneq;' }],
            [0, { v: '&supne;', n: 65024, o: '&varsupsetneq;' }],
            [1, '&cupdot;'],
            [0, '&UnionPlus;'],
            [0, { v: '&sqsub;', n: 824, o: '&NotSquareSubset;' }],
            [0, { v: '&sqsup;', n: 824, o: '&NotSquareSuperset;' }],
            [0, '&sqsube;'],
            [0, '&sqsupe;'],
            [0, { v: '&sqcap;', n: 65024, o: '&sqcaps;' }],
            [0, { v: '&sqcup;', n: 65024, o: '&sqcups;' }],
            [0, '&CirclePlus;'],
            [0, '&CircleMinus;'],
            [0, '&CircleTimes;'],
            [0, '&osol;'],
            [0, '&CircleDot;'],
            [0, '&circledcirc;'],
            [0, '&circledast;'],
            [1, '&circleddash;'],
            [0, '&boxplus;'],
            [0, '&boxminus;'],
            [0, '&boxtimes;'],
            [0, '&dotsquare;'],
            [0, '&RightTee;'],
            [0, '&dashv;'],
            [0, '&DownTee;'],
            [0, '&bot;'],
            [1, '&models;'],
            [0, '&DoubleRightTee;'],
            [0, '&Vdash;'],
            [0, '&Vvdash;'],
            [0, '&VDash;'],
            [0, '&nvdash;'],
            [0, '&nvDash;'],
            [0, '&nVdash;'],
            [0, '&nVDash;'],
            [0, '&prurel;'],
            [1, '&LeftTriangle;'],
            [0, '&RightTriangle;'],
            [0, { v: '&LeftTriangleEqual;', n: 8402, o: '&nvltrie;' }],
            [0, { v: '&RightTriangleEqual;', n: 8402, o: '&nvrtrie;' }],
            [0, '&origof;'],
            [0, '&imof;'],
            [0, '&multimap;'],
            [0, '&hercon;'],
            [0, '&intcal;'],
            [0, '&veebar;'],
            [1, '&barvee;'],
            [0, '&angrtvb;'],
            [0, '&lrtri;'],
            [0, '&bigwedge;'],
            [0, '&bigvee;'],
            [0, '&bigcap;'],
            [0, '&bigcup;'],
            [0, '&diam;'],
            [0, '&sdot;'],
            [0, '&sstarf;'],
            [0, '&divideontimes;'],
            [0, '&bowtie;'],
            [0, '&ltimes;'],
            [0, '&rtimes;'],
            [0, '&leftthreetimes;'],
            [0, '&rightthreetimes;'],
            [0, '&backsimeq;'],
            [0, '&curlyvee;'],
            [0, '&curlywedge;'],
            [0, '&Sub;'],
            [0, '&Sup;'],
            [0, '&Cap;'],
            [0, '&Cup;'],
            [0, '&fork;'],
            [0, '&epar;'],
            [0, '&lessdot;'],
            [0, '&gtdot;'],
            [0, { v: '&Ll;', n: 824, o: '&nLl;' }],
            [0, { v: '&Gg;', n: 824, o: '&nGg;' }],
            [0, { v: '&leg;', n: 65024, o: '&lesg;' }],
            [0, { v: '&gel;', n: 65024, o: '&gesl;' }],
            [2, '&cuepr;'],
            [0, '&cuesc;'],
            [0, '&NotPrecedesSlantEqual;'],
            [0, '&NotSucceedsSlantEqual;'],
            [0, '&NotSquareSubsetEqual;'],
            [0, '&NotSquareSupersetEqual;'],
            [2, '&lnsim;'],
            [0, '&gnsim;'],
            [0, '&precnsim;'],
            [0, '&scnsim;'],
            [0, '&nltri;'],
            [0, '&NotRightTriangle;'],
            [0, '&nltrie;'],
            [0, '&NotRightTriangleEqual;'],
            [0, '&vellip;'],
            [0, '&ctdot;'],
            [0, '&utdot;'],
            [0, '&dtdot;'],
            [0, '&disin;'],
            [0, '&isinsv;'],
            [0, '&isins;'],
            [0, { v: '&isindot;', n: 824, o: '&notindot;' }],
            [0, '&notinvc;'],
            [0, '&notinvb;'],
            [1, { v: '&isinE;', n: 824, o: '&notinE;' }],
            [0, '&nisd;'],
            [0, '&xnis;'],
            [0, '&nis;'],
            [0, '&notnivc;'],
            [0, '&notnivb;'],
            [6, '&barwed;'],
            [0, '&Barwed;'],
            [1, '&lceil;'],
            [0, '&rceil;'],
            [0, '&LeftFloor;'],
            [0, '&rfloor;'],
            [0, '&drcrop;'],
            [0, '&dlcrop;'],
            [0, '&urcrop;'],
            [0, '&ulcrop;'],
            [0, '&bnot;'],
            [1, '&profline;'],
            [0, '&profsurf;'],
            [1, '&telrec;'],
            [0, '&target;'],
            [5, '&ulcorn;'],
            [0, '&urcorn;'],
            [0, '&dlcorn;'],
            [0, '&drcorn;'],
            [2, '&frown;'],
            [0, '&smile;'],
            [9, '&cylcty;'],
            [0, '&profalar;'],
            [7, '&topbot;'],
            [6, '&ovbar;'],
            [1, '&solbar;'],
            [60, '&angzarr;'],
            [51, '&lmoustache;'],
            [0, '&rmoustache;'],
            [2, '&OverBracket;'],
            [0, '&bbrk;'],
            [0, '&bbrktbrk;'],
            [37, '&OverParenthesis;'],
            [0, '&UnderParenthesis;'],
            [0, '&OverBrace;'],
            [0, '&UnderBrace;'],
            [2, '&trpezium;'],
            [4, '&elinters;'],
            [59, '&blank;'],
            [164, '&circledS;'],
            [55, '&boxh;'],
            [1, '&boxv;'],
            [9, '&boxdr;'],
            [3, '&boxdl;'],
            [3, '&boxur;'],
            [3, '&boxul;'],
            [3, '&boxvr;'],
            [7, '&boxvl;'],
            [7, '&boxhd;'],
            [7, '&boxhu;'],
            [7, '&boxvh;'],
            [19, '&boxH;'],
            [0, '&boxV;'],
            [0, '&boxdR;'],
            [0, '&boxDr;'],
            [0, '&boxDR;'],
            [0, '&boxdL;'],
            [0, '&boxDl;'],
            [0, '&boxDL;'],
            [0, '&boxuR;'],
            [0, '&boxUr;'],
            [0, '&boxUR;'],
            [0, '&boxuL;'],
            [0, '&boxUl;'],
            [0, '&boxUL;'],
            [0, '&boxvR;'],
            [0, '&boxVr;'],
            [0, '&boxVR;'],
            [0, '&boxvL;'],
            [0, '&boxVl;'],
            [0, '&boxVL;'],
            [0, '&boxHd;'],
            [0, '&boxhD;'],
            [0, '&boxHD;'],
            [0, '&boxHu;'],
            [0, '&boxhU;'],
            [0, '&boxHU;'],
            [0, '&boxvH;'],
            [0, '&boxVh;'],
            [0, '&boxVH;'],
            [19, '&uhblk;'],
            [3, '&lhblk;'],
            [3, '&block;'],
            [8, '&blk14;'],
            [0, '&blk12;'],
            [0, '&blk34;'],
            [13, '&square;'],
            [8, '&blacksquare;'],
            [0, '&EmptyVerySmallSquare;'],
            [1, '&rect;'],
            [0, '&marker;'],
            [2, '&fltns;'],
            [1, '&bigtriangleup;'],
            [0, '&blacktriangle;'],
            [0, '&triangle;'],
            [2, '&blacktriangleright;'],
            [0, '&rtri;'],
            [3, '&bigtriangledown;'],
            [0, '&blacktriangledown;'],
            [0, '&dtri;'],
            [2, '&blacktriangleleft;'],
            [0, '&ltri;'],
            [6, '&loz;'],
            [0, '&cir;'],
            [32, '&tridot;'],
            [2, '&bigcirc;'],
            [8, '&ultri;'],
            [0, '&urtri;'],
            [0, '&lltri;'],
            [0, '&EmptySmallSquare;'],
            [0, '&FilledSmallSquare;'],
            [8, '&bigstar;'],
            [0, '&star;'],
            [7, '&phone;'],
            [49, '&female;'],
            [1, '&male;'],
            [29, '&spades;'],
            [2, '&clubs;'],
            [1, '&hearts;'],
            [0, '&diamondsuit;'],
            [3, '&sung;'],
            [2, '&flat;'],
            [0, '&natural;'],
            [0, '&sharp;'],
            [163, '&check;'],
            [3, '&cross;'],
            [8, '&malt;'],
            [21, '&sext;'],
            [33, '&VerticalSeparator;'],
            [25, '&lbbrk;'],
            [0, '&rbbrk;'],
            [84, '&bsolhsub;'],
            [0, '&suphsol;'],
            [28, '&LeftDoubleBracket;'],
            [0, '&RightDoubleBracket;'],
            [0, '&lang;'],
            [0, '&rang;'],
            [0, '&Lang;'],
            [0, '&Rang;'],
            [0, '&loang;'],
            [0, '&roang;'],
            [7, '&longleftarrow;'],
            [0, '&longrightarrow;'],
            [0, '&longleftrightarrow;'],
            [0, '&DoubleLongLeftArrow;'],
            [0, '&DoubleLongRightArrow;'],
            [0, '&DoubleLongLeftRightArrow;'],
            [1, '&longmapsto;'],
            [2, '&dzigrarr;'],
            [258, '&nvlArr;'],
            [0, '&nvrArr;'],
            [0, '&nvHarr;'],
            [0, '&Map;'],
            [6, '&lbarr;'],
            [0, '&bkarow;'],
            [0, '&lBarr;'],
            [0, '&dbkarow;'],
            [0, '&drbkarow;'],
            [0, '&DDotrahd;'],
            [0, '&UpArrowBar;'],
            [0, '&DownArrowBar;'],
            [2, '&Rarrtl;'],
            [2, '&latail;'],
            [0, '&ratail;'],
            [0, '&lAtail;'],
            [0, '&rAtail;'],
            [0, '&larrfs;'],
            [0, '&rarrfs;'],
            [0, '&larrbfs;'],
            [0, '&rarrbfs;'],
            [2, '&nwarhk;'],
            [0, '&nearhk;'],
            [0, '&hksearow;'],
            [0, '&hkswarow;'],
            [0, '&nwnear;'],
            [0, '&nesear;'],
            [0, '&seswar;'],
            [0, '&swnwar;'],
            [8, { v: '&rarrc;', n: 824, o: '&nrarrc;' }],
            [1, '&cudarrr;'],
            [0, '&ldca;'],
            [0, '&rdca;'],
            [0, '&cudarrl;'],
            [0, '&larrpl;'],
            [2, '&curarrm;'],
            [0, '&cularrp;'],
            [7, '&rarrpl;'],
            [2, '&harrcir;'],
            [0, '&Uarrocir;'],
            [0, '&lurdshar;'],
            [0, '&ldrushar;'],
            [2, '&LeftRightVector;'],
            [0, '&RightUpDownVector;'],
            [0, '&DownLeftRightVector;'],
            [0, '&LeftUpDownVector;'],
            [0, '&LeftVectorBar;'],
            [0, '&RightVectorBar;'],
            [0, '&RightUpVectorBar;'],
            [0, '&RightDownVectorBar;'],
            [0, '&DownLeftVectorBar;'],
            [0, '&DownRightVectorBar;'],
            [0, '&LeftUpVectorBar;'],
            [0, '&LeftDownVectorBar;'],
            [0, '&LeftTeeVector;'],
            [0, '&RightTeeVector;'],
            [0, '&RightUpTeeVector;'],
            [0, '&RightDownTeeVector;'],
            [0, '&DownLeftTeeVector;'],
            [0, '&DownRightTeeVector;'],
            [0, '&LeftUpTeeVector;'],
            [0, '&LeftDownTeeVector;'],
            [0, '&lHar;'],
            [0, '&uHar;'],
            [0, '&rHar;'],
            [0, '&dHar;'],
            [0, '&luruhar;'],
            [0, '&ldrdhar;'],
            [0, '&ruluhar;'],
            [0, '&rdldhar;'],
            [0, '&lharul;'],
            [0, '&llhard;'],
            [0, '&rharul;'],
            [0, '&lrhard;'],
            [0, '&udhar;'],
            [0, '&duhar;'],
            [0, '&RoundImplies;'],
            [0, '&erarr;'],
            [0, '&simrarr;'],
            [0, '&larrsim;'],
            [0, '&rarrsim;'],
            [0, '&rarrap;'],
            [0, '&ltlarr;'],
            [1, '&gtrarr;'],
            [0, '&subrarr;'],
            [1, '&suplarr;'],
            [0, '&lfisht;'],
            [0, '&rfisht;'],
            [0, '&ufisht;'],
            [0, '&dfisht;'],
            [5, '&lopar;'],
            [0, '&ropar;'],
            [4, '&lbrke;'],
            [0, '&rbrke;'],
            [0, '&lbrkslu;'],
            [0, '&rbrksld;'],
            [0, '&lbrksld;'],
            [0, '&rbrkslu;'],
            [0, '&langd;'],
            [0, '&rangd;'],
            [0, '&lparlt;'],
            [0, '&rpargt;'],
            [0, '&gtlPar;'],
            [0, '&ltrPar;'],
            [3, '&vzigzag;'],
            [1, '&vangrt;'],
            [0, '&angrtvbd;'],
            [6, '&ange;'],
            [0, '&range;'],
            [0, '&dwangle;'],
            [0, '&uwangle;'],
            [0, '&angmsdaa;'],
            [0, '&angmsdab;'],
            [0, '&angmsdac;'],
            [0, '&angmsdad;'],
            [0, '&angmsdae;'],
            [0, '&angmsdaf;'],
            [0, '&angmsdag;'],
            [0, '&angmsdah;'],
            [0, '&bemptyv;'],
            [0, '&demptyv;'],
            [0, '&cemptyv;'],
            [0, '&raemptyv;'],
            [0, '&laemptyv;'],
            [0, '&ohbar;'],
            [0, '&omid;'],
            [0, '&opar;'],
            [1, '&operp;'],
            [1, '&olcross;'],
            [0, '&odsold;'],
            [1, '&olcir;'],
            [0, '&ofcir;'],
            [0, '&olt;'],
            [0, '&ogt;'],
            [0, '&cirscir;'],
            [0, '&cirE;'],
            [0, '&solb;'],
            [0, '&bsolb;'],
            [3, '&boxbox;'],
            [3, '&trisb;'],
            [0, '&rtriltri;'],
            [0, { v: '&LeftTriangleBar;', n: 824, o: '&NotLeftTriangleBar;' }],
            [
              0,
              { v: '&RightTriangleBar;', n: 824, o: '&NotRightTriangleBar;' },
            ],
            [11, '&iinfin;'],
            [0, '&infintie;'],
            [0, '&nvinfin;'],
            [4, '&eparsl;'],
            [0, '&smeparsl;'],
            [0, '&eqvparsl;'],
            [5, '&blacklozenge;'],
            [8, '&RuleDelayed;'],
            [1, '&dsol;'],
            [9, '&bigodot;'],
            [0, '&bigoplus;'],
            [0, '&bigotimes;'],
            [1, '&biguplus;'],
            [1, '&bigsqcup;'],
            [5, '&iiiint;'],
            [0, '&fpartint;'],
            [2, '&cirfnint;'],
            [0, '&awint;'],
            [0, '&rppolint;'],
            [0, '&scpolint;'],
            [0, '&npolint;'],
            [0, '&pointint;'],
            [0, '&quatint;'],
            [0, '&intlarhk;'],
            [10, '&pluscir;'],
            [0, '&plusacir;'],
            [0, '&simplus;'],
            [0, '&plusdu;'],
            [0, '&plussim;'],
            [0, '&plustwo;'],
            [1, '&mcomma;'],
            [0, '&minusdu;'],
            [2, '&loplus;'],
            [0, '&roplus;'],
            [0, '&Cross;'],
            [0, '&timesd;'],
            [0, '&timesbar;'],
            [1, '&smashp;'],
            [0, '&lotimes;'],
            [0, '&rotimes;'],
            [0, '&otimesas;'],
            [0, '&Otimes;'],
            [0, '&odiv;'],
            [0, '&triplus;'],
            [0, '&triminus;'],
            [0, '&tritime;'],
            [0, '&intprod;'],
            [2, '&amalg;'],
            [0, '&capdot;'],
            [1, '&ncup;'],
            [0, '&ncap;'],
            [0, '&capand;'],
            [0, '&cupor;'],
            [0, '&cupcap;'],
            [0, '&capcup;'],
            [0, '&cupbrcap;'],
            [0, '&capbrcup;'],
            [0, '&cupcup;'],
            [0, '&capcap;'],
            [0, '&ccups;'],
            [0, '&ccaps;'],
            [2, '&ccupssm;'],
            [2, '&And;'],
            [0, '&Or;'],
            [0, '&andand;'],
            [0, '&oror;'],
            [0, '&orslope;'],
            [0, '&andslope;'],
            [1, '&andv;'],
            [0, '&orv;'],
            [0, '&andd;'],
            [0, '&ord;'],
            [1, '&wedbar;'],
            [6, '&sdote;'],
            [3, '&simdot;'],
            [2, { v: '&congdot;', n: 824, o: '&ncongdot;' }],
            [0, '&easter;'],
            [0, '&apacir;'],
            [0, { v: '&apE;', n: 824, o: '&napE;' }],
            [0, '&eplus;'],
            [0, '&pluse;'],
            [0, '&Esim;'],
            [0, '&Colone;'],
            [0, '&Equal;'],
            [1, '&ddotseq;'],
            [0, '&equivDD;'],
            [0, '&ltcir;'],
            [0, '&gtcir;'],
            [0, '&ltquest;'],
            [0, '&gtquest;'],
            [0, { v: '&leqslant;', n: 824, o: '&nleqslant;' }],
            [0, { v: '&geqslant;', n: 824, o: '&ngeqslant;' }],
            [0, '&lesdot;'],
            [0, '&gesdot;'],
            [0, '&lesdoto;'],
            [0, '&gesdoto;'],
            [0, '&lesdotor;'],
            [0, '&gesdotol;'],
            [0, '&lap;'],
            [0, '&gap;'],
            [0, '&lne;'],
            [0, '&gne;'],
            [0, '&lnap;'],
            [0, '&gnap;'],
            [0, '&lEg;'],
            [0, '&gEl;'],
            [0, '&lsime;'],
            [0, '&gsime;'],
            [0, '&lsimg;'],
            [0, '&gsiml;'],
            [0, '&lgE;'],
            [0, '&glE;'],
            [0, '&lesges;'],
            [0, '&gesles;'],
            [0, '&els;'],
            [0, '&egs;'],
            [0, '&elsdot;'],
            [0, '&egsdot;'],
            [0, '&el;'],
            [0, '&eg;'],
            [2, '&siml;'],
            [0, '&simg;'],
            [0, '&simlE;'],
            [0, '&simgE;'],
            [0, { v: '&LessLess;', n: 824, o: '&NotNestedLessLess;' }],
            [
              0,
              { v: '&GreaterGreater;', n: 824, o: '&NotNestedGreaterGreater;' },
            ],
            [1, '&glj;'],
            [0, '&gla;'],
            [0, '&ltcc;'],
            [0, '&gtcc;'],
            [0, '&lescc;'],
            [0, '&gescc;'],
            [0, '&smt;'],
            [0, '&lat;'],
            [0, { v: '&smte;', n: 65024, o: '&smtes;' }],
            [0, { v: '&late;', n: 65024, o: '&lates;' }],
            [0, '&bumpE;'],
            [0, { v: '&PrecedesEqual;', n: 824, o: '&NotPrecedesEqual;' }],
            [0, { v: '&sce;', n: 824, o: '&NotSucceedsEqual;' }],
            [2, '&prE;'],
            [0, '&scE;'],
            [0, '&precneqq;'],
            [0, '&scnE;'],
            [0, '&prap;'],
            [0, '&scap;'],
            [0, '&precnapprox;'],
            [0, '&scnap;'],
            [0, '&Pr;'],
            [0, '&Sc;'],
            [0, '&subdot;'],
            [0, '&supdot;'],
            [0, '&subplus;'],
            [0, '&supplus;'],
            [0, '&submult;'],
            [0, '&supmult;'],
            [0, '&subedot;'],
            [0, '&supedot;'],
            [0, { v: '&subE;', n: 824, o: '&nsubE;' }],
            [0, { v: '&supE;', n: 824, o: '&nsupE;' }],
            [0, '&subsim;'],
            [0, '&supsim;'],
            [2, { v: '&subnE;', n: 65024, o: '&varsubsetneqq;' }],
            [0, { v: '&supnE;', n: 65024, o: '&varsupsetneqq;' }],
            [2, '&csub;'],
            [0, '&csup;'],
            [0, '&csube;'],
            [0, '&csupe;'],
            [0, '&subsup;'],
            [0, '&supsub;'],
            [0, '&subsub;'],
            [0, '&supsup;'],
            [0, '&suphsub;'],
            [0, '&supdsub;'],
            [0, '&forkv;'],
            [0, '&topfork;'],
            [0, '&mlcp;'],
            [8, '&Dashv;'],
            [1, '&Vdashl;'],
            [0, '&Barv;'],
            [0, '&vBar;'],
            [0, '&vBarv;'],
            [1, '&Vbar;'],
            [0, '&Not;'],
            [0, '&bNot;'],
            [0, '&rnmid;'],
            [0, '&cirmid;'],
            [0, '&midcir;'],
            [0, '&topcir;'],
            [0, '&nhpar;'],
            [0, '&parsim;'],
            [9, { v: '&parsl;', n: 8421, o: '&nparsl;' }],
            [
              44343,
              {
                n: new Map(
                  he([
                    [56476, '&Ascr;'],
                    [1, '&Cscr;'],
                    [0, '&Dscr;'],
                    [2, '&Gscr;'],
                    [2, '&Jscr;'],
                    [0, '&Kscr;'],
                    [2, '&Nscr;'],
                    [0, '&Oscr;'],
                    [0, '&Pscr;'],
                    [0, '&Qscr;'],
                    [1, '&Sscr;'],
                    [0, '&Tscr;'],
                    [0, '&Uscr;'],
                    [0, '&Vscr;'],
                    [0, '&Wscr;'],
                    [0, '&Xscr;'],
                    [0, '&Yscr;'],
                    [0, '&Zscr;'],
                    [0, '&ascr;'],
                    [0, '&bscr;'],
                    [0, '&cscr;'],
                    [0, '&dscr;'],
                    [1, '&fscr;'],
                    [1, '&hscr;'],
                    [0, '&iscr;'],
                    [0, '&jscr;'],
                    [0, '&kscr;'],
                    [0, '&lscr;'],
                    [0, '&mscr;'],
                    [0, '&nscr;'],
                    [1, '&pscr;'],
                    [0, '&qscr;'],
                    [0, '&rscr;'],
                    [0, '&sscr;'],
                    [0, '&tscr;'],
                    [0, '&uscr;'],
                    [0, '&vscr;'],
                    [0, '&wscr;'],
                    [0, '&xscr;'],
                    [0, '&yscr;'],
                    [0, '&zscr;'],
                    [52, '&Afr;'],
                    [0, '&Bfr;'],
                    [1, '&Dfr;'],
                    [0, '&Efr;'],
                    [0, '&Ffr;'],
                    [0, '&Gfr;'],
                    [2, '&Jfr;'],
                    [0, '&Kfr;'],
                    [0, '&Lfr;'],
                    [0, '&Mfr;'],
                    [0, '&Nfr;'],
                    [0, '&Ofr;'],
                    [0, '&Pfr;'],
                    [0, '&Qfr;'],
                    [1, '&Sfr;'],
                    [0, '&Tfr;'],
                    [0, '&Ufr;'],
                    [0, '&Vfr;'],
                    [0, '&Wfr;'],
                    [0, '&Xfr;'],
                    [0, '&Yfr;'],
                    [1, '&afr;'],
                    [0, '&bfr;'],
                    [0, '&cfr;'],
                    [0, '&dfr;'],
                    [0, '&efr;'],
                    [0, '&ffr;'],
                    [0, '&gfr;'],
                    [0, '&hfr;'],
                    [0, '&ifr;'],
                    [0, '&jfr;'],
                    [0, '&kfr;'],
                    [0, '&lfr;'],
                    [0, '&mfr;'],
                    [0, '&nfr;'],
                    [0, '&ofr;'],
                    [0, '&pfr;'],
                    [0, '&qfr;'],
                    [0, '&rfr;'],
                    [0, '&sfr;'],
                    [0, '&tfr;'],
                    [0, '&ufr;'],
                    [0, '&vfr;'],
                    [0, '&wfr;'],
                    [0, '&xfr;'],
                    [0, '&yfr;'],
                    [0, '&zfr;'],
                    [0, '&Aopf;'],
                    [0, '&Bopf;'],
                    [1, '&Dopf;'],
                    [0, '&Eopf;'],
                    [0, '&Fopf;'],
                    [0, '&Gopf;'],
                    [1, '&Iopf;'],
                    [0, '&Jopf;'],
                    [0, '&Kopf;'],
                    [0, '&Lopf;'],
                    [0, '&Mopf;'],
                    [1, '&Oopf;'],
                    [3, '&Sopf;'],
                    [0, '&Topf;'],
                    [0, '&Uopf;'],
                    [0, '&Vopf;'],
                    [0, '&Wopf;'],
                    [0, '&Xopf;'],
                    [0, '&Yopf;'],
                    [1, '&aopf;'],
                    [0, '&bopf;'],
                    [0, '&copf;'],
                    [0, '&dopf;'],
                    [0, '&eopf;'],
                    [0, '&fopf;'],
                    [0, '&gopf;'],
                    [0, '&hopf;'],
                    [0, '&iopf;'],
                    [0, '&jopf;'],
                    [0, '&kopf;'],
                    [0, '&lopf;'],
                    [0, '&mopf;'],
                    [0, '&nopf;'],
                    [0, '&oopf;'],
                    [0, '&popf;'],
                    [0, '&qopf;'],
                    [0, '&ropf;'],
                    [0, '&sopf;'],
                    [0, '&topf;'],
                    [0, '&uopf;'],
                    [0, '&vopf;'],
                    [0, '&wopf;'],
                    [0, '&xopf;'],
                    [0, '&yopf;'],
                    [0, '&zopf;'],
                  ])
                ),
              },
            ],
            [8906, '&fflig;'],
            [0, '&filig;'],
            [0, '&fllig;'],
            [0, '&ffilig;'],
            [0, '&ffllig;'],
          ])
        )
      const ue = /["&'<>$\x80-\uFFFF]/g,
        de = new Map([
          [34, '&quot;'],
          [38, '&amp;'],
          [39, '&apos;'],
          [60, '&lt;'],
          [62, '&gt;'],
        ]),
        pe =
          null != String.prototype.codePointAt
            ? (e, t) => e.codePointAt(t)
            : (e, t) =>
                55296 == (64512 & e.charCodeAt(t))
                  ? 1024 * (e.charCodeAt(t) - 55296) +
                    e.charCodeAt(t + 1) -
                    56320 +
                    65536
                  : e.charCodeAt(t)
      function Ee(e) {
        let t,
          r = '',
          n = 0
        for (; null !== (t = ue.exec(e)); ) {
          const s = t.index,
            a = e.charCodeAt(s),
            i = de.get(a)
          void 0 !== i
            ? ((r += e.substring(n, s) + i), (n = s + 1))
            : ((r += `${e.substring(n, s)}&#x${pe(e, s).toString(16)};`),
              (n = ue.lastIndex += Number(55296 == (64512 & a))))
        }
        return r + e.substr(n)
      }
      function me(e, t) {
        return function (r) {
          let n,
            s = 0,
            a = ''
          for (; (n = e.exec(r)); )
            s !== n.index && (a += r.substring(s, n.index)),
              (a += t.get(n[0].charCodeAt(0))),
              (s = n.index + 1)
          return a + r.substring(s)
        }
      }
      me(/[&<>'"]/g, de)
      const Te = me(
          /["&\u00A0]/g,
          new Map([
            [34, '&quot;'],
            [38, '&amp;'],
            [160, '&nbsp;'],
          ])
        ),
        fe = me(
          /[&<>\u00A0]/g,
          new Map([
            [38, '&amp;'],
            [60, '&lt;'],
            [62, '&gt;'],
            [160, '&nbsp;'],
          ])
        )
      var Ae, ge
      !(function (e) {
        ;(e[(e.XML = 0)] = 'XML'), (e[(e.HTML = 1)] = 'HTML')
      })(Ae || (Ae = {})),
        (function (e) {
          ;(e[(e.UTF8 = 0)] = 'UTF8'),
            (e[(e.ASCII = 1)] = 'ASCII'),
            (e[(e.Extensive = 2)] = 'Extensive'),
            (e[(e.Attribute = 3)] = 'Attribute'),
            (e[(e.Text = 4)] = 'Text')
        })(ge || (ge = {}))
      const _e = new Map(
          [
            'altGlyph',
            'altGlyphDef',
            'altGlyphItem',
            'animateColor',
            'animateMotion',
            'animateTransform',
            'clipPath',
            'feBlend',
            'feColorMatrix',
            'feComponentTransfer',
            'feComposite',
            'feConvolveMatrix',
            'feDiffuseLighting',
            'feDisplacementMap',
            'feDistantLight',
            'feDropShadow',
            'feFlood',
            'feFuncA',
            'feFuncB',
            'feFuncG',
            'feFuncR',
            'feGaussianBlur',
            'feImage',
            'feMerge',
            'feMergeNode',
            'feMorphology',
            'feOffset',
            'fePointLight',
            'feSpecularLighting',
            'feSpotLight',
            'feTile',
            'feTurbulence',
            'foreignObject',
            'glyphRef',
            'linearGradient',
            'radialGradient',
            'textPath',
          ].map((e) => [e.toLowerCase(), e])
        ),
        Ne = new Map(
          [
            'definitionURL',
            'attributeName',
            'attributeType',
            'baseFrequency',
            'baseProfile',
            'calcMode',
            'clipPathUnits',
            'diffuseConstant',
            'edgeMode',
            'filterUnits',
            'glyphRef',
            'gradientTransform',
            'gradientUnits',
            'kernelMatrix',
            'kernelUnitLength',
            'keyPoints',
            'keySplines',
            'keyTimes',
            'lengthAdjust',
            'limitingConeAngle',
            'markerHeight',
            'markerUnits',
            'markerWidth',
            'maskContentUnits',
            'maskUnits',
            'numOctaves',
            'pathLength',
            'patternContentUnits',
            'patternTransform',
            'patternUnits',
            'pointsAtX',
            'pointsAtY',
            'pointsAtZ',
            'preserveAlpha',
            'preserveAspectRatio',
            'primitiveUnits',
            'refX',
            'refY',
            'repeatCount',
            'repeatDur',
            'requiredExtensions',
            'requiredFeatures',
            'specularConstant',
            'specularExponent',
            'spreadMethod',
            'startOffset',
            'stdDeviation',
            'stitchTiles',
            'surfaceScale',
            'systemLanguage',
            'tableValues',
            'targetX',
            'targetY',
            'textLength',
            'viewBox',
            'viewTarget',
            'xChannelSelector',
            'yChannelSelector',
            'zoomAndPan',
          ].map((e) => [e.toLowerCase(), e])
        ),
        Ce = new Set([
          'style',
          'script',
          'xmp',
          'iframe',
          'noembed',
          'noframes',
          'plaintext',
          'noscript',
        ])
      function Ie(e) {
        return e.replace(/"/g, '&quot;')
      }
      const be = new Set([
        'area',
        'base',
        'basefont',
        'br',
        'col',
        'command',
        'embed',
        'frame',
        'hr',
        'img',
        'input',
        'isindex',
        'keygen',
        'link',
        'meta',
        'param',
        'source',
        'track',
        'wbr',
      ])
      function Se(e, t = {}) {
        const r = 'length' in e ? e : [e]
        let n = ''
        for (let e = 0; e < r.length; e++) n += Re(r[e], t)
        return n
      }
      const De = Se
      function Re(e, t) {
        switch (e.type) {
          case N:
            return Se(e.children, t)
          case O:
          case I:
            return `<${e.data}>`
          case b:
            return `\x3c!--${e.data}--\x3e`
          case L:
            return (function (e) {
              return `<![CDATA[${e.children[0].data}]]>`
            })(e)
          case S:
          case D:
          case R:
            return (function (e, t) {
              var r
              'foreign' === t.xmlMode &&
                ((e.name =
                  null !== (r = _e.get(e.name)) && void 0 !== r ? r : e.name),
                e.parent &&
                  Le.has(e.parent.name) &&
                  (t = { ...t, xmlMode: !1 })),
                !t.xmlMode &&
                  Oe.has(e.name) &&
                  (t = { ...t, xmlMode: 'foreign' })
              let n = `<${e.name}`
              const s = (function (e, t) {
                var r
                if (!e) return
                const n =
                  !1 ===
                  (null !== (r = t.encodeEntities) && void 0 !== r
                    ? r
                    : t.decodeEntities)
                    ? Ie
                    : t.xmlMode || 'utf8' !== t.encodeEntities
                    ? Ee
                    : Te
                return Object.keys(e)
                  .map((r) => {
                    var s, a
                    const i = null !== (s = e[r]) && void 0 !== s ? s : ''
                    return (
                      'foreign' === t.xmlMode &&
                        (r = null !== (a = Ne.get(r)) && void 0 !== a ? a : r),
                      t.emptyAttrs || t.xmlMode || '' !== i
                        ? `${r}="${n(i)}"`
                        : r
                    )
                  })
                  .join(' ')
              })(e.attribs, t)
              return (
                s && (n += ` ${s}`),
                0 === e.children.length &&
                (t.xmlMode
                  ? !1 !== t.selfClosingTags
                  : t.selfClosingTags && be.has(e.name))
                  ? (t.xmlMode || (n += ' '), (n += '/>'))
                  : ((n += '>'),
                    e.children.length > 0 && (n += Se(e.children, t)),
                    (!t.xmlMode && be.has(e.name)) || (n += `</${e.name}>`)),
                n
              )
            })(e, t)
          case C:
            return (function (e, t) {
              var r
              let n = e.data || ''
              return (
                !1 ===
                  (null !== (r = t.encodeEntities) && void 0 !== r
                    ? r
                    : t.decodeEntities) ||
                  (!t.xmlMode && e.parent && Ce.has(e.parent.name)) ||
                  (n =
                    t.xmlMode || 'utf8' !== t.encodeEntities ? Ee(n) : fe(n)),
                n
              )
            })(e, t)
        }
      }
      const Le = new Set([
          'mi',
          'mo',
          'mn',
          'ms',
          'mtext',
          'annotation-xml',
          'foreignObject',
          'desc',
          'title',
        ]),
        Oe = new Set(['svg', 'math'])
      function ye(e) {
        return Array.isArray(e)
          ? e.map(ye).join('')
          : Y(e) && !G(e)
          ? ye(e.children)
          : q(e)
          ? e.data
          : ''
      }
      function ke(e) {
        return Array.isArray(e)
          ? e.map(ke).join('')
          : Y(e) && (e.type === A.Tag || F(e))
          ? ke(e.children)
          : q(e)
          ? e.data
          : ''
      }
      function Me(e) {
        return Y(e) ? e.children : []
      }
      function Pe(e) {
        let { next: t } = e
        for (; null !== t && !H(t); ) ({ next: t } = t)
        return t
      }
      function ve(e) {
        let { prev: t } = e
        for (; null !== t && !H(t); ) ({ prev: t } = t)
        return t
      }
      function we(e) {
        if (
          (e.prev && (e.prev.next = e.next),
          e.next && (e.next.prev = e.prev),
          e.parent)
        ) {
          const t = e.parent.children,
            r = t.lastIndexOf(e)
          r >= 0 && t.splice(r, 1)
        }
        ;(e.next = null), (e.prev = null), (e.parent = null)
      }
      var xe, Be
      function Ue(e) {
        return (
          (e = e.filter((e, t, r) => !r.includes(e, t + 1))).sort((e, t) => {
            const r = (function (e, t) {
              const r = [],
                n = []
              if (e === t) return 0
              let s = Y(e) ? e : e.parent
              for (; s; ) r.unshift(s), (s = s.parent)
              for (s = Y(t) ? t : t.parent; s; ) n.unshift(s), (s = s.parent)
              const a = Math.min(r.length, n.length)
              let i = 0
              for (; i < a && r[i] === n[i]; ) i++
              if (0 === i) return xe.DISCONNECTED
              const o = r[i - 1],
                c = o.children,
                l = r[i],
                h = n[i]
              return c.indexOf(l) > c.indexOf(h)
                ? o === t
                  ? xe.FOLLOWING | xe.CONTAINED_BY
                  : xe.FOLLOWING
                : o === e
                ? xe.PRECEDING | xe.CONTAINS
                : xe.PRECEDING
            })(e, t)
            return r & xe.PRECEDING ? -1 : r & xe.FOLLOWING ? 1 : 0
          }),
          e
        )
      }
      function He(e, t, r) {
        return e
          ? e(null != t ? t : e._root.children, null, void 0, r).toString()
          : ''
      }
      function Fe(e, t) {
        return He(
          this,
          (function (e, t) {
            return (
              'object' == typeof e &&
              null != e &&
              !('length' in e) &&
              !('type' in e)
            )
          })(e)
            ? void (t = e)
            : e,
          {
            ...m,
            ...(null == this ? void 0 : this._options),
            ...f(null != t ? t : {}),
          }
        )
      }
      function qe(e) {
        return He(this, e, { ...this._options, xmlMode: !0 })
      }
      function Ge(e) {
        const t = e || (this ? this.root() : [])
        let r = ''
        for (let e = 0; e < t.length; e++) r += ye(t[e])
        return r
      }
      function Ve(e, t, r = 'boolean' == typeof t && t) {
        if (!e || 'string' != typeof e) return null
        'boolean' == typeof t && (r = t)
        const n = this.load(e, m, !1)
        return r || n('script').remove(), n.root()[0].children.slice()
      }
      function Ye() {
        return this(this._root)
      }
      function Qe(e, t) {
        if (t === e) return !1
        let r = t
        for (; r && r !== r.parent; ) if (((r = r.parent), r === e)) return !0
        return !1
      }
      function We(e, t) {
        if (!Xe(e) || !Xe(t)) return
        let r = e.length
        const n = +t.length
        for (let s = 0; s < n; s++) e[r++] = t[s]
        return (e.length = r), e
      }
      function Xe(e) {
        if (Array.isArray(e)) return !0
        if (
          'object' != typeof e ||
          !Object.prototype.hasOwnProperty.call(e, 'length') ||
          'number' != typeof e.length ||
          e.length < 0
        )
          return !1
        for (let t = 0; t < e.length; t++) if (!(t in e)) return !1
        return !0
      }
      function je(e) {
        return null != e.cheerio
      }
      function Ke(e, t) {
        const r = e.length
        for (let n = 0; n < r; n++) t(e[n], n)
        return e
      }
      function ze(e) {
        const t =
            'length' in e
              ? Array.prototype.map.call(e, (e) => Q(e, !0))
              : [Q(e, !0)],
          r = new B(t)
        return (
          t.forEach((e) => {
            e.parent = r
          }),
          t
        )
      }
      function $e(e) {
        const t = e.indexOf('<')
        if (t < 0 || t > e.length - 3) return !1
        const r = e.charCodeAt(t + 1)
        return (
          ((r >= Be.LowerA && r <= Be.LowerZ) ||
            (r >= Be.UpperA && r <= Be.UpperZ) ||
            r === Be.Exclamation) &&
          e.includes('>', t + 2)
        )
      }
      !(function (e) {
        ;(e[(e.DISCONNECTED = 1)] = 'DISCONNECTED'),
          (e[(e.PRECEDING = 2)] = 'PRECEDING'),
          (e[(e.FOLLOWING = 4)] = 'FOLLOWING'),
          (e[(e.CONTAINS = 8)] = 'CONTAINS'),
          (e[(e.CONTAINED_BY = 16)] = 'CONTAINED_BY')
      })(xe || (xe = {})),
        (function (e) {
          ;(e[(e.LowerA = 97)] = 'LowerA'),
            (e[(e.LowerZ = 122)] = 'LowerZ'),
            (e[(e.UpperA = 65)] = 'UpperA'),
            (e[(e.UpperZ = 90)] = 'UpperZ'),
            (e[(e.Exclamation = 33)] = 'Exclamation')
        })(Be || (Be = {}))
      const Ze = Object.prototype.hasOwnProperty,
        Je = /\s+/,
        et = 'data-',
        tt = { null: null, true: !0, false: !1 },
        rt =
          /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,
        nt = /^{[^]*}$|^\[[^]*]$/
      function st(e, t, r) {
        var n
        if (e && H(e))
          return (
            (null !== (n = e.attribs) && void 0 !== n) || (e.attribs = {}),
            t
              ? Ze.call(e.attribs, t)
                ? !r && rt.test(t)
                  ? t
                  : e.attribs[t]
                : 'option' === e.name && 'value' === t
                ? Ge(e.children)
                : 'input' !== e.name ||
                  ('radio' !== e.attribs.type &&
                    'checkbox' !== e.attribs.type) ||
                  'value' !== t
                ? void 0
                : 'on'
              : e.attribs
          )
      }
      function at(e, t, r) {
        null === r ? Et(e, t) : (e.attribs[t] = `${r}`)
      }
      function it(e, t) {
        if ('object' == typeof e || void 0 !== t) {
          if ('function' == typeof t) {
            if ('string' != typeof e)
              throw new Error('Bad combination of arguments.')
            return Ke(this, (r, n) => {
              H(r) && at(r, e, t.call(r, n, r.attribs[e]))
            })
          }
          return Ke(this, (r) => {
            H(r) &&
              ('object' == typeof e
                ? Object.keys(e).forEach((t) => {
                    const n = e[t]
                    at(r, t, n)
                  })
                : at(r, e, t))
          })
        }
        return arguments.length > 1
          ? this
          : st(this[0], e, this.options.xmlMode)
      }
      function ot(e, t, r) {
        return t in e
          ? e[t]
          : !r && rt.test(t)
          ? void 0 !== st(e, t, !1)
          : st(e, t, r)
      }
      function ct(e, t, r, n) {
        t in e
          ? (e[t] = r)
          : at(e, t, !n && rt.test(t) ? (r ? '' : null) : `${r}`)
      }
      function lt(e, t) {
        var r
        if ('string' == typeof e && void 0 === t) {
          const t = this[0]
          if (!t || !H(t)) return
          switch (e) {
            case 'style': {
              const e = this.css(),
                t = Object.keys(e)
              return (
                t.forEach((t, r) => {
                  e[r] = t
                }),
                (e.length = t.length),
                e
              )
            }
            case 'tagName':
            case 'nodeName':
              return t.name.toUpperCase()
            case 'href':
            case 'src': {
              const n = null === (r = t.attribs) || void 0 === r ? void 0 : r[e]
              return 'undefined' == typeof URL ||
                (('href' !== e || ('a' !== t.tagName && 'link' !== t.name)) &&
                  ('src' !== e ||
                    ('img' !== t.tagName &&
                      'iframe' !== t.tagName &&
                      'audio' !== t.tagName &&
                      'video' !== t.tagName &&
                      'source' !== t.tagName))) ||
                void 0 === n ||
                !this.options.baseURI
                ? n
                : new URL(n, this.options.baseURI).href
            }
            case 'innerText':
              return ke(t)
            case 'textContent':
              return ye(t)
            case 'outerHTML':
              return this.clone().wrap('<container />').parent().html()
            case 'innerHTML':
              return this.html()
            default:
              return ot(t, e, this.options.xmlMode)
          }
        }
        if ('object' == typeof e || void 0 !== t) {
          if ('function' == typeof t) {
            if ('object' == typeof e)
              throw new Error('Bad combination of arguments.')
            return Ke(this, (r, n) => {
              H(r) &&
                ct(
                  r,
                  e,
                  t.call(r, n, ot(r, e, this.options.xmlMode)),
                  this.options.xmlMode
                )
            })
          }
          return Ke(this, (r) => {
            H(r) &&
              ('object' == typeof e
                ? Object.keys(e).forEach((t) => {
                    const n = e[t]
                    ct(r, t, n, this.options.xmlMode)
                  })
                : ct(r, e, t, this.options.xmlMode))
          })
        }
      }
      function ht(e, t, r) {
        var n
        const s = e
        ;(null !== (n = s.data) && void 0 !== n) || (s.data = {}),
          'object' == typeof t
            ? Object.assign(s.data, t)
            : 'string' == typeof t && void 0 !== r && (s.data[t] = r)
      }
      function ut(e, t) {
        let r, n, s
        var a
        null == t
          ? ((r = Object.keys(e.attribs).filter((e) => e.startsWith(et))),
            (n = r.map((e) =>
              e
                .slice(et.length)
                .replace(/[_.-](\w|$)/g, (e, t) => t.toUpperCase())
            )))
          : ((r = [et + ((a = t), a.replace(/[A-Z]/g, '-$&').toLowerCase())]),
            (n = [t]))
        for (let t = 0; t < r.length; ++t) {
          const a = r[t],
            i = n[t]
          if (Ze.call(e.attribs, a) && !Ze.call(e.data, i)) {
            if (((s = e.attribs[a]), Ze.call(tt, s))) s = tt[s]
            else if (s === String(Number(s))) s = Number(s)
            else if (nt.test(s))
              try {
                s = JSON.parse(s)
              } catch (e) {}
            e.data[i] = s
          }
        }
        return null == t ? e.data : s
      }
      function dt(e, t) {
        var r
        const n = this[0]
        if (!n || !H(n)) return
        const s = n
        return (
          (null !== (r = s.data) && void 0 !== r) || (s.data = {}),
          e
            ? 'object' == typeof e || void 0 !== t
              ? (Ke(this, (r) => {
                  H(r) && ('object' == typeof e ? ht(r, e) : ht(r, e, t))
                }),
                this)
              : Ze.call(s.data, e)
              ? s.data[e]
              : ut(s, e)
            : ut(s)
        )
      }
      function pt(e) {
        const t = 0 === arguments.length,
          r = this[0]
        if (!r || !H(r)) return t ? void 0 : this
        switch (r.name) {
          case 'textarea':
            return this.text(e)
          case 'select': {
            const r = this.find('option:selected')
            if (!t) {
              if (null == this.attr('multiple') && 'object' == typeof e)
                return this
              this.find('option').removeAttr('selected')
              const t = 'object' != typeof e ? [e] : e
              for (let e = 0; e < t.length; e++)
                this.find(`option[value="${t[e]}"]`).attr('selected', '')
              return this
            }
            return this.attr('multiple')
              ? r.toArray().map((e) => Ge(e.children))
              : r.attr('value')
          }
          case 'input':
          case 'option':
            return t ? this.attr('value') : this.attr('value', e)
        }
      }
      function Et(e, t) {
        e.attribs && Ze.call(e.attribs, t) && delete e.attribs[t]
      }
      function mt(e) {
        return e ? e.trim().split(Je) : []
      }
      function Tt(e) {
        const t = mt(e)
        for (let e = 0; e < t.length; e++)
          Ke(this, (r) => {
            H(r) && Et(r, t[e])
          })
        return this
      }
      function ft(e) {
        return this.toArray().some((t) => {
          const r = H(t) && t.attribs.class
          let n = -1
          if (r && e.length)
            for (; (n = r.indexOf(e, n + 1)) > -1; ) {
              const t = n + e.length
              if (
                (0 === n || Je.test(r[n - 1])) &&
                (t === r.length || Je.test(r[t]))
              )
                return !0
            }
          return !1
        })
      }
      function At(e) {
        if ('function' == typeof e)
          return Ke(this, (t, r) => {
            if (H(t)) {
              const n = t.attribs.class || ''
              At.call([t], e.call(t, r, n))
            }
          })
        if (!e || 'string' != typeof e) return this
        const t = e.split(Je),
          r = this.length
        for (let e = 0; e < r; e++) {
          const r = this[e]
          if (!H(r)) continue
          const n = st(r, 'class', !1)
          if (n) {
            let e = ` ${n} `
            for (let r = 0; r < t.length; r++) {
              const n = `${t[r]} `
              e.includes(` ${n}`) || (e += n)
            }
            at(r, 'class', e.trim())
          } else at(r, 'class', t.join(' ').trim())
        }
        return this
      }
      function gt(e) {
        if ('function' == typeof e)
          return Ke(this, (t, r) => {
            H(t) && gt.call([t], e.call(t, r, t.attribs.class || ''))
          })
        const t = mt(e),
          r = t.length,
          n = 0 === arguments.length
        return Ke(this, (e) => {
          if (H(e))
            if (n) e.attribs.class = ''
            else {
              const n = mt(e.attribs.class)
              let s = !1
              for (let e = 0; e < r; e++) {
                const r = n.indexOf(t[e])
                r >= 0 && (n.splice(r, 1), (s = !0), e--)
              }
              s && (e.attribs.class = n.join(' '))
            }
        })
      }
      function _t(e, t) {
        if ('function' == typeof e)
          return Ke(this, (r, n) => {
            H(r) && _t.call([r], e.call(r, n, r.attribs.class || '', t), t)
          })
        if (!e || 'string' != typeof e) return this
        const r = e.split(Je),
          n = r.length,
          s = 'boolean' == typeof t ? (t ? 1 : -1) : 0,
          a = this.length
        for (let e = 0; e < a; e++) {
          const t = this[e]
          if (!H(t)) continue
          const a = mt(t.attribs.class)
          for (let e = 0; e < n; e++) {
            const t = a.indexOf(r[e])
            s >= 0 && t < 0 ? a.push(r[e]) : s <= 0 && t >= 0 && a.splice(t, 1)
          }
          t.attribs.class = a.join(' ')
        }
        return this
      }
      var Nt, Ct
      !(function (e) {
        ;(e.Attribute = 'attribute'),
          (e.Pseudo = 'pseudo'),
          (e.PseudoElement = 'pseudo-element'),
          (e.Tag = 'tag'),
          (e.Universal = 'universal'),
          (e.Adjacent = 'adjacent'),
          (e.Child = 'child'),
          (e.Descendant = 'descendant'),
          (e.Parent = 'parent'),
          (e.Sibling = 'sibling'),
          (e.ColumnCombinator = 'column-combinator')
      })(Nt || (Nt = {})),
        (function (e) {
          ;(e.Any = 'any'),
            (e.Element = 'element'),
            (e.End = 'end'),
            (e.Equals = 'equals'),
            (e.Exists = 'exists'),
            (e.Hyphen = 'hyphen'),
            (e.Not = 'not'),
            (e.Start = 'start')
        })(Ct || (Ct = {}))
      const It = /^[^\\#]?(?:\\(?:[\da-f]{1,6}\s?|.)|[\w\-\u00b0-\uFFFF])+/,
        bt = /\\([\da-f]{1,6}\s?|(\s)|.)/gi,
        St = new Map([
          [126, Ct.Element],
          [94, Ct.Start],
          [36, Ct.End],
          [42, Ct.Any],
          [33, Ct.Not],
          [124, Ct.Hyphen],
        ]),
        Dt = new Set([
          'has',
          'not',
          'matches',
          'is',
          'where',
          'host',
          'host-context',
        ])
      function Rt(e) {
        switch (e.type) {
          case Nt.Adjacent:
          case Nt.Child:
          case Nt.Descendant:
          case Nt.Parent:
          case Nt.Sibling:
          case Nt.ColumnCombinator:
            return !0
          default:
            return !1
        }
      }
      const Lt = new Set(['contains', 'icontains'])
      function Ot(e, t, r) {
        const n = parseInt(t, 16) - 65536
        return n != n || r
          ? t
          : n < 0
          ? String.fromCharCode(n + 65536)
          : String.fromCharCode((n >> 10) | 55296, (1023 & n) | 56320)
      }
      function yt(e) {
        return e.replace(bt, Ot)
      }
      function kt(e) {
        return 39 === e || 34 === e
      }
      function Mt(e) {
        return 32 === e || 9 === e || 10 === e || 12 === e || 13 === e
      }
      function Pt(e) {
        const t = [],
          r = vt(t, `${e}`, 0)
        if (r < e.length) throw new Error(`Unmatched selector: ${e.slice(r)}`)
        return t
      }
      function vt(e, t, r) {
        let n = []
        function s(e) {
          const n = t.slice(r + e).match(It)
          if (!n) throw new Error(`Expected name, found ${t.slice(r)}`)
          const [s] = n
          return (r += e + s.length), yt(s)
        }
        function a(e) {
          for (r += e; r < t.length && Mt(t.charCodeAt(r)); ) r++
        }
        function i() {
          const e = (r += 1)
          let n = 1
          for (; n > 0 && r < t.length; r++)
            40 !== t.charCodeAt(r) || o(r)
              ? 41 !== t.charCodeAt(r) || o(r) || n--
              : n++
          if (n) throw new Error('Parenthesis not matched')
          return yt(t.slice(e, r - 1))
        }
        function o(e) {
          let r = 0
          for (; 92 === t.charCodeAt(--e); ) r++
          return 1 == (1 & r)
        }
        function c() {
          if (n.length > 0 && Rt(n[n.length - 1]))
            throw new Error('Did not expect successive traversals.')
        }
        function l(e) {
          n.length > 0 && n[n.length - 1].type === Nt.Descendant
            ? (n[n.length - 1].type = e)
            : (c(), n.push({ type: e }))
        }
        function h(e, t) {
          n.push({
            type: Nt.Attribute,
            name: e,
            action: t,
            value: s(1),
            namespace: null,
            ignoreCase: 'quirks',
          })
        }
        function u() {
          if (
            (n.length && n[n.length - 1].type === Nt.Descendant && n.pop(),
            0 === n.length)
          )
            throw new Error('Empty sub-selector')
          e.push(n)
        }
        if ((a(0), t.length === r)) return r
        e: for (; r < t.length; ) {
          const e = t.charCodeAt(r)
          switch (e) {
            case 32:
            case 9:
            case 10:
            case 12:
            case 13:
              ;(0 !== n.length && n[0].type === Nt.Descendant) ||
                (c(), n.push({ type: Nt.Descendant })),
                a(1)
              break
            case 62:
              l(Nt.Child), a(1)
              break
            case 60:
              l(Nt.Parent), a(1)
              break
            case 126:
              l(Nt.Sibling), a(1)
              break
            case 43:
              l(Nt.Adjacent), a(1)
              break
            case 46:
              h('class', Ct.Element)
              break
            case 35:
              h('id', Ct.Equals)
              break
            case 91: {
              let e
              a(1)
              let i = null
              124 === t.charCodeAt(r)
                ? (e = s(1))
                : t.startsWith('*|', r)
                ? ((i = '*'), (e = s(2)))
                : ((e = s(0)),
                  124 === t.charCodeAt(r) &&
                    61 !== t.charCodeAt(r + 1) &&
                    ((i = e), (e = s(1)))),
                a(0)
              let c = Ct.Exists
              const l = St.get(t.charCodeAt(r))
              if (l) {
                if (((c = l), 61 !== t.charCodeAt(r + 1)))
                  throw new Error('Expected `=`')
                a(2)
              } else 61 === t.charCodeAt(r) && ((c = Ct.Equals), a(1))
              let h = '',
                u = null
              if ('exists' !== c) {
                if (kt(t.charCodeAt(r))) {
                  const e = t.charCodeAt(r)
                  let n = r + 1
                  for (; n < t.length && (t.charCodeAt(n) !== e || o(n)); )
                    n += 1
                  if (t.charCodeAt(n) !== e)
                    throw new Error("Attribute value didn't end")
                  ;(h = yt(t.slice(r + 1, n))), (r = n + 1)
                } else {
                  const e = r
                  for (
                    ;
                    r < t.length &&
                    ((!Mt(t.charCodeAt(r)) && 93 !== t.charCodeAt(r)) || o(r));

                  )
                    r += 1
                  h = yt(t.slice(e, r))
                }
                a(0)
                const e = 32 | t.charCodeAt(r)
                115 === e ? ((u = !1), a(1)) : 105 === e && ((u = !0), a(1))
              }
              if (93 !== t.charCodeAt(r))
                throw new Error("Attribute selector didn't terminate")
              r += 1
              const d = {
                type: Nt.Attribute,
                name: e,
                action: c,
                value: h,
                namespace: i,
                ignoreCase: u,
              }
              n.push(d)
              break
            }
            case 58: {
              if (58 === t.charCodeAt(r + 1)) {
                n.push({
                  type: Nt.PseudoElement,
                  name: s(2).toLowerCase(),
                  data: 40 === t.charCodeAt(r) ? i() : null,
                })
                continue
              }
              const e = s(1).toLowerCase()
              let a = null
              if (40 === t.charCodeAt(r))
                if (Dt.has(e)) {
                  if (kt(t.charCodeAt(r + 1)))
                    throw new Error(`Pseudo-selector ${e} cannot be quoted`)
                  if (((a = []), (r = vt(a, t, r + 1)), 41 !== t.charCodeAt(r)))
                    throw new Error(
                      `Missing closing parenthesis in :${e} (${t})`
                    )
                  r += 1
                } else {
                  if (((a = i()), Lt.has(e))) {
                    const e = a.charCodeAt(0)
                    e === a.charCodeAt(a.length - 1) &&
                      kt(e) &&
                      (a = a.slice(1, -1))
                  }
                  a = yt(a)
                }
              n.push({ type: Nt.Pseudo, name: e, data: a })
              break
            }
            case 44:
              u(), (n = []), a(1)
              break
            default: {
              if (t.startsWith('/*', r)) {
                const e = t.indexOf('*/', r + 2)
                if (e < 0) throw new Error('Comment was not terminated')
                ;(r = e + 2), 0 === n.length && a(0)
                break
              }
              let i,
                o = null
              if (42 === e) (r += 1), (i = '*')
              else if (124 === e) {
                if (((i = ''), 124 === t.charCodeAt(r + 1))) {
                  l(Nt.ColumnCombinator), a(2)
                  break
                }
              } else {
                if (!It.test(t.slice(r))) break e
                i = s(0)
              }
              124 === t.charCodeAt(r) &&
                124 !== t.charCodeAt(r + 1) &&
                ((o = i),
                42 === t.charCodeAt(r + 1)
                  ? ((i = '*'), (r += 2))
                  : (i = s(1))),
                n.push(
                  '*' === i
                    ? { type: Nt.Universal, namespace: o }
                    : { type: Nt.Tag, name: i, namespace: o }
                )
            }
          }
        }
        return u(), r
      }
      function wt(e) {
        return _(e)
      }
      function xt(e) {
        return e.type === A.CDATA
      }
      function Bt(e) {
        return e.type === A.Text
      }
      function Ut(e) {
        return e.type === A.Comment
      }
      function Ht(e) {
        return e.type === A.Root
      }
      function Ft(e) {
        return Object.prototype.hasOwnProperty.call(e, 'children')
      }
      const qt = new Uint16Array(
          'ᵁ<Õıʊҝջאٵ۞ޢߖࠏ੊ઑඡ๭༉༦჊ረዡᐕᒝᓃᓟᔥ\0\0\0\0\0\0ᕫᛍᦍᰒᷝ὾⁠↰⊍⏀⏻⑂⠤⤒ⴈ⹈⿎〖㊺㘹㞬㣾㨨㩱㫠㬮ࠀEMabcfglmnoprstu\\bfms¦³¹ÈÏlig耻Æ䃆P耻&䀦cute耻Á䃁reve;䄂Āiyx}rc耻Â䃂;䐐r;쀀𝔄rave耻À䃀pha;䎑acr;䄀d;橓Āgp¡on;䄄f;쀀𝔸plyFunction;恡ing耻Å䃅Ācs¾Ãr;쀀𝒜ign;扔ilde耻Ã䃃ml耻Ä䃄ЀaceforsuåûþėĜĢħĪĀcrêòkslash;或Ŷöø;櫧ed;挆y;䐑ƀcrtąċĔause;戵noullis;愬a;䎒r;쀀𝔅pf;쀀𝔹eve;䋘còēmpeq;扎܀HOacdefhilorsuōőŖƀƞƢƵƷƺǜȕɳɸɾcy;䐧PY耻©䂩ƀcpyŝŢźute;䄆Ā;iŧŨ拒talDifferentialD;慅leys;愭ȀaeioƉƎƔƘron;䄌dil耻Ç䃇rc;䄈nint;戰ot;䄊ĀdnƧƭilla;䂸terDot;䂷òſi;䎧rcleȀDMPTǇǋǑǖot;抙inus;抖lus;投imes;抗oĀcsǢǸkwiseContourIntegral;戲eCurlyĀDQȃȏoubleQuote;思uote;怙ȀlnpuȞȨɇɕonĀ;eȥȦ户;橴ƀgitȯȶȺruent;扡nt;戯ourIntegral;戮ĀfrɌɎ;愂oduct;成nterClockwiseContourIntegral;戳oss;樯cr;쀀𝒞pĀ;Cʄʅ拓ap;才րDJSZacefiosʠʬʰʴʸˋ˗ˡ˦̳ҍĀ;oŹʥtrahd;椑cy;䐂cy;䐅cy;䐏ƀgrsʿ˄ˇger;怡r;憡hv;櫤Āayː˕ron;䄎;䐔lĀ;t˝˞戇a;䎔r;쀀𝔇Āaf˫̧Ācm˰̢riticalȀADGT̖̜̀̆cute;䂴oŴ̋̍;䋙bleAcute;䋝rave;䁠ilde;䋜ond;拄ferentialD;慆Ѱ̽\0\0\0͔͂\0Ѕf;쀀𝔻ƀ;DE͈͉͍䂨ot;惜qual;扐blèCDLRUVͣͲ΂ϏϢϸontourIntegraìȹoɴ͹\0\0ͻ»͉nArrow;懓Āeo·ΤftƀARTΐΖΡrrow;懐ightArrow;懔eåˊngĀLRΫτeftĀARγιrrow;柸ightArrow;柺ightArrow;柹ightĀATϘϞrrow;懒ee;抨pɁϩ\0\0ϯrrow;懑ownArrow;懕erticalBar;戥ǹABLRTaВЪаўѿͼrrowƀ;BUНОТ憓ar;椓pArrow;懵reve;䌑eft˒к\0ц\0ѐightVector;楐eeVector;楞ectorĀ;Bљњ憽ar;楖ightǔѧ\0ѱeeVector;楟ectorĀ;BѺѻ懁ar;楗eeĀ;A҆҇护rrow;憧ĀctҒҗr;쀀𝒟rok;䄐ࠀNTacdfglmopqstuxҽӀӄӋӞӢӧӮӵԡԯԶՒ՝ՠեG;䅊H耻Ð䃐cute耻É䃉ƀaiyӒӗӜron;䄚rc耻Ê䃊;䐭ot;䄖r;쀀𝔈rave耻È䃈ement;戈ĀapӺӾcr;䄒tyɓԆ\0\0ԒmallSquare;旻erySmallSquare;斫ĀgpԦԪon;䄘f;쀀𝔼silon;䎕uĀaiԼՉlĀ;TՂՃ橵ilde;扂librium;懌Āci՗՚r;愰m;橳a;䎗ml耻Ë䃋Āipժկsts;戃onentialE;慇ʀcfiosօֈ֍ֲ׌y;䐤r;쀀𝔉lledɓ֗\0\0֣mallSquare;旼erySmallSquare;斪Ͱֺ\0ֿ\0\0ׄf;쀀𝔽All;戀riertrf;愱cò׋؀JTabcdfgorstר׬ׯ׺؀ؒؖ؛؝أ٬ٲcy;䐃耻>䀾mmaĀ;d׷׸䎓;䏜reve;䄞ƀeiy؇،ؐdil;䄢rc;䄜;䐓ot;䄠r;쀀𝔊;拙pf;쀀𝔾eater̀EFGLSTصلَٖٛ٦qualĀ;Lؾؿ扥ess;招ullEqual;执reater;檢ess;扷lantEqual;橾ilde;扳cr;쀀𝒢;扫ЀAacfiosuڅڋږڛڞڪھۊRDcy;䐪Āctڐڔek;䋇;䁞irc;䄤r;愌lbertSpace;愋ǰگ\0ڲf;愍izontalLine;攀Āctۃۅòکrok;䄦mpńېۘownHumðįqual;扏܀EJOacdfgmnostuۺ۾܃܇܎ܚܞܡܨ݄ݸދޏޕcy;䐕lig;䄲cy;䐁cute耻Í䃍Āiyܓܘrc耻Î䃎;䐘ot;䄰r;愑rave耻Ì䃌ƀ;apܠܯܿĀcgܴܷr;䄪inaryI;慈lieóϝǴ݉\0ݢĀ;eݍݎ戬Āgrݓݘral;戫section;拂isibleĀCTݬݲomma;恣imes;恢ƀgptݿރވon;䄮f;쀀𝕀a;䎙cr;愐ilde;䄨ǫޚ\0ޞcy;䐆l耻Ï䃏ʀcfosuެ޷޼߂ߐĀiyޱ޵rc;䄴;䐙r;쀀𝔍pf;쀀𝕁ǣ߇\0ߌr;쀀𝒥rcy;䐈kcy;䐄΀HJacfosߤߨ߽߬߱ࠂࠈcy;䐥cy;䐌ppa;䎚Āey߶߻dil;䄶;䐚r;쀀𝔎pf;쀀𝕂cr;쀀𝒦րJTaceflmostࠥࠩࠬࡐࡣ঳সে্਷ੇcy;䐉耻<䀼ʀcmnpr࠷࠼ࡁࡄࡍute;䄹bda;䎛g;柪lacetrf;愒r;憞ƀaeyࡗ࡜ࡡron;䄽dil;䄻;䐛Āfsࡨ॰tԀACDFRTUVarࡾࢩࢱࣦ࣠ࣼयज़ΐ४Ānrࢃ࢏gleBracket;柨rowƀ;BR࢙࢚࢞憐ar;懤ightArrow;懆eiling;挈oǵࢷ\0ࣃbleBracket;柦nǔࣈ\0࣒eeVector;楡ectorĀ;Bࣛࣜ懃ar;楙loor;挊ightĀAV࣯ࣵrrow;憔ector;楎Āerँगeƀ;AVउऊऐ抣rrow;憤ector;楚iangleƀ;BEतथऩ抲ar;槏qual;抴pƀDTVषूौownVector;楑eeVector;楠ectorĀ;Bॖॗ憿ar;楘ectorĀ;B॥०憼ar;楒ightáΜs̀EFGLSTॾঋকঝঢভqualGreater;拚ullEqual;扦reater;扶ess;檡lantEqual;橽ilde;扲r;쀀𝔏Ā;eঽা拘ftarrow;懚idot;䄿ƀnpw৔ਖਛgȀLRlr৞৷ਂਐeftĀAR০৬rrow;柵ightArrow;柷ightArrow;柶eftĀarγਊightáοightáϊf;쀀𝕃erĀLRਢਬeftArrow;憙ightArrow;憘ƀchtਾੀੂòࡌ;憰rok;䅁;扪Ѐacefiosuਗ਼੝੠੷੼અઋ઎p;椅y;䐜Ādl੥੯iumSpace;恟lintrf;愳r;쀀𝔐nusPlus;戓pf;쀀𝕄cò੶;䎜ҀJacefostuણધભીଔଙඑ඗ඞcy;䐊cute;䅃ƀaey઴હાron;䅇dil;䅅;䐝ƀgswે૰଎ativeƀMTV૓૟૨ediumSpace;怋hiĀcn૦૘ë૙eryThiî૙tedĀGL૸ଆreaterGreateòٳessLesóੈLine;䀊r;쀀𝔑ȀBnptଢନଷ଺reak;恠BreakingSpace;䂠f;愕ڀ;CDEGHLNPRSTV୕ୖ୪୼஡௫ఄ౞಄ದ೘ൡඅ櫬Āou୛୤ngruent;扢pCap;扭oubleVerticalBar;戦ƀlqxஃஊ஛ement;戉ualĀ;Tஒஓ扠ilde;쀀≂̸ists;戄reater΀;EFGLSTஶஷ஽௉௓௘௥扯qual;扱ullEqual;쀀≧̸reater;쀀≫̸ess;批lantEqual;쀀⩾̸ilde;扵umpń௲௽ownHump;쀀≎̸qual;쀀≏̸eĀfsఊధtTriangleƀ;BEచఛడ拪ar;쀀⧏̸qual;括s̀;EGLSTవశ఼ౄోౘ扮qual;扰reater;扸ess;쀀≪̸lantEqual;쀀⩽̸ilde;扴estedĀGL౨౹reaterGreater;쀀⪢̸essLess;쀀⪡̸recedesƀ;ESಒಓಛ技qual;쀀⪯̸lantEqual;拠ĀeiಫಹverseElement;戌ghtTriangleƀ;BEೋೌ೒拫ar;쀀⧐̸qual;拭ĀquೝഌuareSuĀbp೨೹setĀ;E೰ೳ쀀⊏̸qual;拢ersetĀ;Eഃആ쀀⊐̸qual;拣ƀbcpഓതൎsetĀ;Eഛഞ쀀⊂⃒qual;抈ceedsȀ;ESTലള഻െ抁qual;쀀⪰̸lantEqual;拡ilde;쀀≿̸ersetĀ;E൘൛쀀⊃⃒qual;抉ildeȀ;EFT൮൯൵ൿ扁qual;扄ullEqual;扇ilde;扉erticalBar;戤cr;쀀𝒩ilde耻Ñ䃑;䎝܀Eacdfgmoprstuvලෂ෉෕ෛ෠෧෼ขภยา฿ไlig;䅒cute耻Ó䃓Āiy෎ීrc耻Ô䃔;䐞blac;䅐r;쀀𝔒rave耻Ò䃒ƀaei෮ෲ෶cr;䅌ga;䎩cron;䎟pf;쀀𝕆enCurlyĀDQฎบoubleQuote;怜uote;怘;橔Āclวฬr;쀀𝒪ash耻Ø䃘iŬื฼de耻Õ䃕es;樷ml耻Ö䃖erĀBP๋๠Āar๐๓r;怾acĀek๚๜;揞et;掴arenthesis;揜Ҁacfhilors๿ງຊຏຒດຝະ໼rtialD;戂y;䐟r;쀀𝔓i;䎦;䎠usMinus;䂱Āipຢອncareplanåڝf;愙Ȁ;eio຺ູ໠໤檻cedesȀ;EST່້໏໚扺qual;檯lantEqual;扼ilde;找me;怳Ādp໩໮uct;戏ortionĀ;aȥ໹l;戝Āci༁༆r;쀀𝒫;䎨ȀUfos༑༖༛༟OT耻"䀢r;쀀𝔔pf;愚cr;쀀𝒬؀BEacefhiorsu༾གྷཇའཱིྦྷྪྭ႖ႩႴႾarr;椐G耻®䂮ƀcnrཎནབute;䅔g;柫rĀ;tཛྷཝ憠l;椖ƀaeyཧཬཱron;䅘dil;䅖;䐠Ā;vླྀཹ愜erseĀEUྂྙĀlq྇ྎement;戋uilibrium;懋pEquilibrium;楯r»ཹo;䎡ghtЀACDFTUVa࿁࿫࿳ဢဨၛႇϘĀnr࿆࿒gleBracket;柩rowƀ;BL࿜࿝࿡憒ar;懥eftArrow;懄eiling;按oǵ࿹\0စbleBracket;柧nǔည\0နeeVector;楝ectorĀ;Bဝသ懂ar;楕loor;挋Āerိ၃eƀ;AVဵံြ抢rrow;憦ector;楛iangleƀ;BEၐၑၕ抳ar;槐qual;抵pƀDTVၣၮၸownVector;楏eeVector;楜ectorĀ;Bႂႃ憾ar;楔ectorĀ;B႑႒懀ar;楓Āpuႛ႞f;愝ndImplies;楰ightarrow;懛ĀchႹႼr;愛;憱leDelayed;槴ڀHOacfhimoqstuფჱჷჽᄙᄞᅑᅖᅡᅧᆵᆻᆿĀCcჩხHcy;䐩y;䐨FTcy;䐬cute;䅚ʀ;aeiyᄈᄉᄎᄓᄗ檼ron;䅠dil;䅞rc;䅜;䐡r;쀀𝔖ortȀDLRUᄪᄴᄾᅉownArrow»ОeftArrow»࢚ightArrow»࿝pArrow;憑gma;䎣allCircle;战pf;쀀𝕊ɲᅭ\0\0ᅰt;戚areȀ;ISUᅻᅼᆉᆯ斡ntersection;抓uĀbpᆏᆞsetĀ;Eᆗᆘ抏qual;抑ersetĀ;Eᆨᆩ抐qual;抒nion;抔cr;쀀𝒮ar;拆ȀbcmpᇈᇛሉላĀ;sᇍᇎ拐etĀ;Eᇍᇕqual;抆ĀchᇠህeedsȀ;ESTᇭᇮᇴᇿ扻qual;檰lantEqual;扽ilde;承Tháྌ;我ƀ;esሒሓሣ拑rsetĀ;Eሜም抃qual;抇et»ሓրHRSacfhiorsሾቄ቉ቕ቞ቱቶኟዂወዑORN耻Þ䃞ADE;愢ĀHc቎ቒcy;䐋y;䐦Ābuቚቜ;䀉;䎤ƀaeyብቪቯron;䅤dil;䅢;䐢r;쀀𝔗Āeiቻ኉ǲኀ\0ኇefore;戴a;䎘Ācn኎ኘkSpace;쀀  Space;怉ldeȀ;EFTካኬኲኼ戼qual;扃ullEqual;扅ilde;扈pf;쀀𝕋ipleDot;惛Āctዖዛr;쀀𝒯rok;䅦ૡዷጎጚጦ\0ጬጱ\0\0\0\0\0ጸጽ፷ᎅ\0᏿ᐄᐊᐐĀcrዻጁute耻Ú䃚rĀ;oጇገ憟cir;楉rǣጓ\0጖y;䐎ve;䅬Āiyጞጣrc耻Û䃛;䐣blac;䅰r;쀀𝔘rave耻Ù䃙acr;䅪Ādiፁ፩erĀBPፈ፝Āarፍፐr;䁟acĀekፗፙ;揟et;掵arenthesis;揝onĀ;P፰፱拃lus;抎Āgp፻፿on;䅲f;쀀𝕌ЀADETadps᎕ᎮᎸᏄϨᏒᏗᏳrrowƀ;BDᅐᎠᎤar;椒ownArrow;懅ownArrow;憕quilibrium;楮eeĀ;AᏋᏌ报rrow;憥ownáϳerĀLRᏞᏨeftArrow;憖ightArrow;憗iĀ;lᏹᏺ䏒on;䎥ing;䅮cr;쀀𝒰ilde;䅨ml耻Ü䃜ҀDbcdefosvᐧᐬᐰᐳᐾᒅᒊᒐᒖash;披ar;櫫y;䐒ashĀ;lᐻᐼ抩;櫦Āerᑃᑅ;拁ƀbtyᑌᑐᑺar;怖Ā;iᑏᑕcalȀBLSTᑡᑥᑪᑴar;戣ine;䁼eparator;杘ilde;所ThinSpace;怊r;쀀𝔙pf;쀀𝕍cr;쀀𝒱dash;抪ʀcefosᒧᒬᒱᒶᒼirc;䅴dge;拀r;쀀𝔚pf;쀀𝕎cr;쀀𝒲Ȁfiosᓋᓐᓒᓘr;쀀𝔛;䎞pf;쀀𝕏cr;쀀𝒳ҀAIUacfosuᓱᓵᓹᓽᔄᔏᔔᔚᔠcy;䐯cy;䐇cy;䐮cute耻Ý䃝Āiyᔉᔍrc;䅶;䐫r;쀀𝔜pf;쀀𝕐cr;쀀𝒴ml;䅸ЀHacdefosᔵᔹᔿᕋᕏᕝᕠᕤcy;䐖cute;䅹Āayᕄᕉron;䅽;䐗ot;䅻ǲᕔ\0ᕛoWidtè૙a;䎖r;愨pf;愤cr;쀀𝒵௡ᖃᖊᖐ\0ᖰᖶᖿ\0\0\0\0ᗆᗛᗫᙟ᙭\0ᚕ᚛ᚲᚹ\0ᚾcute耻á䃡reve;䄃̀;Ediuyᖜᖝᖡᖣᖨᖭ戾;쀀∾̳;房rc耻â䃢te肻´̆;䐰lig耻æ䃦Ā;r²ᖺ;쀀𝔞rave耻à䃠ĀepᗊᗖĀfpᗏᗔsym;愵èᗓha;䎱ĀapᗟcĀclᗤᗧr;䄁g;樿ɤᗰ\0\0ᘊʀ;adsvᗺᗻᗿᘁᘇ戧nd;橕;橜lope;橘;橚΀;elmrszᘘᘙᘛᘞᘿᙏᙙ戠;榤e»ᘙsdĀ;aᘥᘦ戡ѡᘰᘲᘴᘶᘸᘺᘼᘾ;榨;榩;榪;榫;榬;榭;榮;榯tĀ;vᙅᙆ戟bĀ;dᙌᙍ抾;榝Āptᙔᙗh;戢»¹arr;捼Āgpᙣᙧon;䄅f;쀀𝕒΀;Eaeiop዁ᙻᙽᚂᚄᚇᚊ;橰cir;橯;扊d;手s;䀧roxĀ;e዁ᚒñᚃing耻å䃥ƀctyᚡᚦᚨr;쀀𝒶;䀪mpĀ;e዁ᚯñʈilde耻ã䃣ml耻ä䃤Āciᛂᛈoninôɲnt;樑ࠀNabcdefiklnoprsu᛭ᛱᜰ᜼ᝃᝈ᝸᝽០៦ᠹᡐᜍ᤽᥈ᥰot;櫭Ācrᛶ᜞kȀcepsᜀᜅᜍᜓong;扌psilon;䏶rime;怵imĀ;e᜚᜛戽q;拍Ŷᜢᜦee;抽edĀ;gᜬᜭ挅e»ᜭrkĀ;t፜᜷brk;掶Āoyᜁᝁ;䐱quo;怞ʀcmprtᝓ᝛ᝡᝤᝨausĀ;eĊĉptyv;榰séᜌnoõēƀahwᝯ᝱ᝳ;䎲;愶een;扬r;쀀𝔟g΀costuvwឍឝឳេ៕៛៞ƀaiuបពរðݠrc;旯p»፱ƀdptឤឨឭot;樀lus;樁imes;樂ɱឹ\0\0ើcup;樆ar;昅riangleĀdu៍្own;施p;斳plus;樄eåᑄåᒭarow;植ƀako៭ᠦᠵĀcn៲ᠣkƀlst៺֫᠂ozenge;槫riangleȀ;dlr᠒᠓᠘᠝斴own;斾eft;旂ight;斸k;搣Ʊᠫ\0ᠳƲᠯ\0ᠱ;斒;斑4;斓ck;斈ĀeoᠾᡍĀ;qᡃᡆ쀀=⃥uiv;쀀≡⃥t;挐Ȁptwxᡙᡞᡧᡬf;쀀𝕓Ā;tᏋᡣom»Ꮜtie;拈؀DHUVbdhmptuvᢅᢖᢪᢻᣗᣛᣬ᣿ᤅᤊᤐᤡȀLRlrᢎᢐᢒᢔ;敗;敔;敖;敓ʀ;DUduᢡᢢᢤᢦᢨ敐;敦;敩;敤;敧ȀLRlrᢳᢵᢷᢹ;敝;敚;敜;教΀;HLRhlrᣊᣋᣍᣏᣑᣓᣕ救;敬;散;敠;敫;敢;敟ox;槉ȀLRlrᣤᣦᣨᣪ;敕;敒;攐;攌ʀ;DUduڽ᣷᣹᣻᣽;敥;敨;攬;攴inus;抟lus;択imes;抠ȀLRlrᤙᤛᤝ᤟;敛;敘;攘;攔΀;HLRhlrᤰᤱᤳᤵᤷ᤻᤹攂;敪;敡;敞;攼;攤;攜Āevģ᥂bar耻¦䂦Ȁceioᥑᥖᥚᥠr;쀀𝒷mi;恏mĀ;e᜚᜜lƀ;bhᥨᥩᥫ䁜;槅sub;柈Ŭᥴ᥾lĀ;e᥹᥺怢t»᥺pƀ;Eeįᦅᦇ;檮Ā;qۜۛೡᦧ\0᧨ᨑᨕᨲ\0ᨷᩐ\0\0᪴\0\0᫁\0\0ᬡᬮ᭍᭒\0᯽\0ᰌƀcpr᦭ᦲ᧝ute;䄇̀;abcdsᦿᧀᧄ᧊᧕᧙戩nd;橄rcup;橉Āau᧏᧒p;橋p;橇ot;橀;쀀∩︀Āeo᧢᧥t;恁îړȀaeiu᧰᧻ᨁᨅǰ᧵\0᧸s;橍on;䄍dil耻ç䃧rc;䄉psĀ;sᨌᨍ橌m;橐ot;䄋ƀdmnᨛᨠᨦil肻¸ƭptyv;榲t脀¢;eᨭᨮ䂢räƲr;쀀𝔠ƀceiᨽᩀᩍy;䑇ckĀ;mᩇᩈ朓ark»ᩈ;䏇r΀;Ecefms᩟᩠ᩢᩫ᪤᪪᪮旋;槃ƀ;elᩩᩪᩭ䋆q;扗eɡᩴ\0\0᪈rrowĀlr᩼᪁eft;憺ight;憻ʀRSacd᪒᪔᪖᪚᪟»ཇ;擈st;抛irc;抚ash;抝nint;樐id;櫯cir;槂ubsĀ;u᪻᪼晣it»᪼ˬ᫇᫔᫺\0ᬊonĀ;eᫍᫎ䀺Ā;qÇÆɭ᫙\0\0᫢aĀ;t᫞᫟䀬;䁀ƀ;fl᫨᫩᫫戁îᅠeĀmx᫱᫶ent»᫩eóɍǧ᫾\0ᬇĀ;dኻᬂot;橭nôɆƀfryᬐᬔᬗ;쀀𝕔oäɔ脀©;sŕᬝr;愗Āaoᬥᬩrr;憵ss;朗Ācuᬲᬷr;쀀𝒸Ābpᬼ᭄Ā;eᭁᭂ櫏;櫑Ā;eᭉᭊ櫐;櫒dot;拯΀delprvw᭠᭬᭷ᮂᮬᯔ᯹arrĀlr᭨᭪;椸;椵ɰ᭲\0\0᭵r;拞c;拟arrĀ;p᭿ᮀ憶;椽̀;bcdosᮏᮐᮖᮡᮥᮨ截rcap;橈Āauᮛᮞp;橆p;橊ot;抍r;橅;쀀∪︀Ȁalrv᮵ᮿᯞᯣrrĀ;mᮼᮽ憷;椼yƀevwᯇᯔᯘqɰᯎ\0\0ᯒreã᭳uã᭵ee;拎edge;拏en耻¤䂤earrowĀlrᯮ᯳eft»ᮀight»ᮽeäᯝĀciᰁᰇoninôǷnt;戱lcty;挭ঀAHabcdefhijlorstuwz᰸᰻᰿ᱝᱩᱵᲊᲞᲬᲷ᳻᳿ᴍᵻᶑᶫᶻ᷆᷍rò΁ar;楥Ȁglrs᱈ᱍ᱒᱔ger;怠eth;愸òᄳhĀ;vᱚᱛ怐»ऊūᱡᱧarow;椏aã̕Āayᱮᱳron;䄏;䐴ƀ;ao̲ᱼᲄĀgrʿᲁr;懊tseq;橷ƀglmᲑᲔᲘ耻°䂰ta;䎴ptyv;榱ĀirᲣᲨsht;楿;쀀𝔡arĀlrᲳᲵ»ࣜ»သʀaegsv᳂͸᳖᳜᳠mƀ;oș᳊᳔ndĀ;ș᳑uit;晦amma;䏝in;拲ƀ;io᳧᳨᳸䃷de脀÷;o᳧ᳰntimes;拇nø᳷cy;䑒cɯᴆ\0\0ᴊrn;挞op;挍ʀlptuwᴘᴝᴢᵉᵕlar;䀤f;쀀𝕕ʀ;emps̋ᴭᴷᴽᵂqĀ;d͒ᴳot;扑inus;戸lus;戔quare;抡blebarwedgåúnƀadhᄮᵝᵧownarrowóᲃarpoonĀlrᵲᵶefôᲴighôᲶŢᵿᶅkaro÷གɯᶊ\0\0ᶎrn;挟op;挌ƀcotᶘᶣᶦĀryᶝᶡ;쀀𝒹;䑕l;槶rok;䄑Ādrᶰᶴot;拱iĀ;fᶺ᠖斿Āah᷀᷃ròЩaòྦangle;榦Āci᷒ᷕy;䑟grarr;柿ऀDacdefglmnopqrstuxḁḉḙḸոḼṉṡṾấắẽỡἪἷὄ὎὚ĀDoḆᴴoôᲉĀcsḎḔute耻é䃩ter;橮ȀaioyḢḧḱḶron;䄛rĀ;cḭḮ扖耻ê䃪lon;払;䑍ot;䄗ĀDrṁṅot;扒;쀀𝔢ƀ;rsṐṑṗ檚ave耻è䃨Ā;dṜṝ檖ot;檘Ȁ;ilsṪṫṲṴ檙nters;揧;愓Ā;dṹṺ檕ot;檗ƀapsẅẉẗcr;䄓tyƀ;svẒẓẕ戅et»ẓpĀ1;ẝẤĳạả;怄;怅怃ĀgsẪẬ;䅋p;怂ĀgpẴẸon;䄙f;쀀𝕖ƀalsỄỎỒrĀ;sỊị拕l;槣us;橱iƀ;lvỚớở䎵on»ớ;䏵ȀcsuvỪỳἋἣĀioữḱrc»Ḯɩỹ\0\0ỻíՈantĀglἂἆtr»ṝess»Ṻƀaeiἒ἖Ἒls;䀽st;扟vĀ;DȵἠD;橸parsl;槥ĀDaἯἳot;打rr;楱ƀcdiἾὁỸr;愯oô͒ĀahὉὋ;䎷耻ð䃰Āmrὓὗl耻ë䃫o;悬ƀcipὡὤὧl;䀡sôծĀeoὬὴctatioîՙnentialåչৡᾒ\0ᾞ\0ᾡᾧ\0\0ῆῌ\0ΐ\0ῦῪ \0 ⁚llingdotseñṄy;䑄male;晀ƀilrᾭᾳ῁lig;耀ﬃɩᾹ\0\0᾽g;耀ﬀig;耀ﬄ;쀀𝔣lig;耀ﬁlig;쀀fjƀaltῙ῜ῡt;晭ig;耀ﬂns;斱of;䆒ǰ΅\0ῳf;쀀𝕗ĀakֿῷĀ;vῼ´拔;櫙artint;樍Āao‌⁕Ācs‑⁒α‚‰‸⁅⁈\0⁐β•‥‧‪‬\0‮耻½䂽;慓耻¼䂼;慕;慙;慛Ƴ‴\0‶;慔;慖ʴ‾⁁\0\0⁃耻¾䂾;慗;慜5;慘ƶ⁌\0⁎;慚;慝8;慞l;恄wn;挢cr;쀀𝒻ࢀEabcdefgijlnorstv₂₉₟₥₰₴⃰⃵⃺⃿℃ℒℸ̗ℾ⅒↞Ā;lٍ₇;檌ƀcmpₐₕ₝ute;䇵maĀ;dₜ᳚䎳;檆reve;䄟Āiy₪₮rc;䄝;䐳ot;䄡Ȁ;lqsؾق₽⃉ƀ;qsؾٌ⃄lanô٥Ȁ;cdl٥⃒⃥⃕c;檩otĀ;o⃜⃝檀Ā;l⃢⃣檂;檄Ā;e⃪⃭쀀⋛︀s;檔r;쀀𝔤Ā;gٳ؛mel;愷cy;䑓Ȁ;Eajٚℌℎℐ;檒;檥;檤ȀEaesℛℝ℩ℴ;扩pĀ;p℣ℤ檊rox»ℤĀ;q℮ℯ檈Ā;q℮ℛim;拧pf;쀀𝕘Āci⅃ⅆr;愊mƀ;el٫ⅎ⅐;檎;檐茀>;cdlqr׮ⅠⅪⅮⅳⅹĀciⅥⅧ;檧r;橺ot;拗Par;榕uest;橼ʀadelsↄⅪ←ٖ↛ǰ↉\0↎proø₞r;楸qĀlqؿ↖lesó₈ií٫Āen↣↭rtneqq;쀀≩︀Å↪ԀAabcefkosy⇄⇇⇱⇵⇺∘∝∯≨≽ròΠȀilmr⇐⇔⇗⇛rsðᒄf»․ilôکĀdr⇠⇤cy;䑊ƀ;cwࣴ⇫⇯ir;楈;憭ar;意irc;䄥ƀalr∁∎∓rtsĀ;u∉∊晥it»∊lip;怦con;抹r;쀀𝔥sĀew∣∩arow;椥arow;椦ʀamopr∺∾≃≞≣rr;懿tht;戻kĀlr≉≓eftarrow;憩ightarrow;憪f;쀀𝕙bar;怕ƀclt≯≴≸r;쀀𝒽asè⇴rok;䄧Ābp⊂⊇ull;恃hen»ᱛૡ⊣\0⊪\0⊸⋅⋎\0⋕⋳\0\0⋸⌢⍧⍢⍿\0⎆⎪⎴cute耻í䃭ƀ;iyݱ⊰⊵rc耻î䃮;䐸Ācx⊼⊿y;䐵cl耻¡䂡ĀfrΟ⋉;쀀𝔦rave耻ì䃬Ȁ;inoܾ⋝⋩⋮Āin⋢⋦nt;樌t;戭fin;槜ta;愩lig;䄳ƀaop⋾⌚⌝ƀcgt⌅⌈⌗r;䄫ƀelpܟ⌏⌓inåގarôܠh;䄱f;抷ed;䆵ʀ;cfotӴ⌬⌱⌽⍁are;愅inĀ;t⌸⌹戞ie;槝doô⌙ʀ;celpݗ⍌⍐⍛⍡al;抺Āgr⍕⍙eróᕣã⍍arhk;樗rod;樼Ȁcgpt⍯⍲⍶⍻y;䑑on;䄯f;쀀𝕚a;䎹uest耻¿䂿Āci⎊⎏r;쀀𝒾nʀ;EdsvӴ⎛⎝⎡ӳ;拹ot;拵Ā;v⎦⎧拴;拳Ā;iݷ⎮lde;䄩ǫ⎸\0⎼cy;䑖l耻ï䃯̀cfmosu⏌⏗⏜⏡⏧⏵Āiy⏑⏕rc;䄵;䐹r;쀀𝔧ath;䈷pf;쀀𝕛ǣ⏬\0⏱r;쀀𝒿rcy;䑘kcy;䑔Ѐacfghjos␋␖␢␧␭␱␵␻ppaĀ;v␓␔䎺;䏰Āey␛␠dil;䄷;䐺r;쀀𝔨reen;䄸cy;䑅cy;䑜pf;쀀𝕜cr;쀀𝓀஀ABEHabcdefghjlmnoprstuv⑰⒁⒆⒍⒑┎┽╚▀♎♞♥♹♽⚚⚲⛘❝❨➋⟀⠁⠒ƀart⑷⑺⑼rò৆òΕail;椛arr;椎Ā;gঔ⒋;檋ar;楢ॣ⒥\0⒪\0⒱\0\0\0\0\0⒵Ⓔ\0ⓆⓈⓍ\0⓹ute;䄺mptyv;榴raîࡌbda;䎻gƀ;dlࢎⓁⓃ;榑åࢎ;檅uo耻«䂫rЀ;bfhlpst࢙ⓞⓦⓩ⓫⓮⓱⓵Ā;f࢝ⓣs;椟s;椝ë≒p;憫l;椹im;楳l;憢ƀ;ae⓿─┄檫il;椙Ā;s┉┊檭;쀀⪭︀ƀabr┕┙┝rr;椌rk;杲Āak┢┬cĀek┨┪;䁻;䁛Āes┱┳;榋lĀdu┹┻;榏;榍Ȁaeuy╆╋╖╘ron;䄾Ādi═╔il;䄼ìࢰâ┩;䐻Ȁcqrs╣╦╭╽a;椶uoĀ;rนᝆĀdu╲╷har;楧shar;楋h;憲ʀ;fgqs▋▌উ◳◿扤tʀahlrt▘▤▷◂◨rrowĀ;t࢙□aé⓶arpoonĀdu▯▴own»њp»०eftarrows;懇ightƀahs◍◖◞rrowĀ;sࣴࢧarpoonó྘quigarro÷⇰hreetimes;拋ƀ;qs▋ও◺lanôবʀ;cdgsব☊☍☝☨c;檨otĀ;o☔☕橿Ā;r☚☛檁;檃Ā;e☢☥쀀⋚︀s;檓ʀadegs☳☹☽♉♋pproøⓆot;拖qĀgq♃♅ôউgtò⒌ôছiíলƀilr♕࣡♚sht;楼;쀀𝔩Ā;Eজ♣;檑š♩♶rĀdu▲♮Ā;l॥♳;楪lk;斄cy;䑙ʀ;achtੈ⚈⚋⚑⚖rò◁orneòᴈard;楫ri;旺Āio⚟⚤dot;䅀ustĀ;a⚬⚭掰che»⚭ȀEaes⚻⚽⛉⛔;扨pĀ;p⛃⛄檉rox»⛄Ā;q⛎⛏檇Ā;q⛎⚻im;拦Ѐabnoptwz⛩⛴⛷✚✯❁❇❐Ānr⛮⛱g;柬r;懽rëࣁgƀlmr⛿✍✔eftĀar০✇ightá৲apsto;柼ightá৽parrowĀlr✥✩efô⓭ight;憬ƀafl✶✹✽r;榅;쀀𝕝us;樭imes;樴š❋❏st;戗áፎƀ;ef❗❘᠀旊nge»❘arĀ;l❤❥䀨t;榓ʀachmt❳❶❼➅➇ròࢨorneòᶌarĀ;d྘➃;業;怎ri;抿̀achiqt➘➝ੀ➢➮➻quo;怹r;쀀𝓁mƀ;egল➪➬;檍;檏Ābu┪➳oĀ;rฟ➹;怚rok;䅂萀<;cdhilqrࠫ⟒☹⟜⟠⟥⟪⟰Āci⟗⟙;檦r;橹reå◲mes;拉arr;楶uest;橻ĀPi⟵⟹ar;榖ƀ;ef⠀भ᠛旃rĀdu⠇⠍shar;楊har;楦Āen⠗⠡rtneqq;쀀≨︀Å⠞܀Dacdefhilnopsu⡀⡅⢂⢎⢓⢠⢥⢨⣚⣢⣤ઃ⣳⤂Dot;戺Ȁclpr⡎⡒⡣⡽r耻¯䂯Āet⡗⡙;時Ā;e⡞⡟朠se»⡟Ā;sျ⡨toȀ;dluျ⡳⡷⡻owîҌefôएðᏑker;斮Āoy⢇⢌mma;権;䐼ash;怔asuredangle»ᘦr;쀀𝔪o;愧ƀcdn⢯⢴⣉ro耻µ䂵Ȁ;acdᑤ⢽⣀⣄sôᚧir;櫰ot肻·Ƶusƀ;bd⣒ᤃ⣓戒Ā;uᴼ⣘;横ţ⣞⣡p;櫛ò−ðઁĀdp⣩⣮els;抧f;쀀𝕞Āct⣸⣽r;쀀𝓂pos»ᖝƀ;lm⤉⤊⤍䎼timap;抸ఀGLRVabcdefghijlmoprstuvw⥂⥓⥾⦉⦘⧚⧩⨕⨚⩘⩝⪃⪕⪤⪨⬄⬇⭄⭿⮮ⰴⱧⱼ⳩Āgt⥇⥋;쀀⋙̸Ā;v⥐௏쀀≫⃒ƀelt⥚⥲⥶ftĀar⥡⥧rrow;懍ightarrow;懎;쀀⋘̸Ā;v⥻ే쀀≪⃒ightarrow;懏ĀDd⦎⦓ash;抯ash;抮ʀbcnpt⦣⦧⦬⦱⧌la»˞ute;䅄g;쀀∠⃒ʀ;Eiop඄⦼⧀⧅⧈;쀀⩰̸d;쀀≋̸s;䅉roø඄urĀ;a⧓⧔普lĀ;s⧓ସǳ⧟\0⧣p肻 ଷmpĀ;e௹ఀʀaeouy⧴⧾⨃⨐⨓ǰ⧹\0⧻;橃on;䅈dil;䅆ngĀ;dൾ⨊ot;쀀⩭̸p;橂;䐽ash;怓΀;Aadqsxஒ⨩⨭⨻⩁⩅⩐rr;懗rĀhr⨳⨶k;椤Ā;oᏲᏰot;쀀≐̸uiöୣĀei⩊⩎ar;椨í஘istĀ;s஠டr;쀀𝔫ȀEest௅⩦⩹⩼ƀ;qs஼⩭௡ƀ;qs஼௅⩴lanô௢ií௪Ā;rஶ⪁»ஷƀAap⪊⪍⪑rò⥱rr;憮ar;櫲ƀ;svྍ⪜ྌĀ;d⪡⪢拼;拺cy;䑚΀AEadest⪷⪺⪾⫂⫅⫶⫹rò⥦;쀀≦̸rr;憚r;急Ȁ;fqs఻⫎⫣⫯tĀar⫔⫙rro÷⫁ightarro÷⪐ƀ;qs఻⪺⫪lanôౕĀ;sౕ⫴»శiíౝĀ;rవ⫾iĀ;eచథiäඐĀpt⬌⬑f;쀀𝕟膀¬;in⬙⬚⬶䂬nȀ;Edvஉ⬤⬨⬮;쀀⋹̸ot;쀀⋵̸ǡஉ⬳⬵;拷;拶iĀ;vಸ⬼ǡಸ⭁⭃;拾;拽ƀaor⭋⭣⭩rȀ;ast୻⭕⭚⭟lleì୻l;쀀⫽⃥;쀀∂̸lint;樔ƀ;ceಒ⭰⭳uåಥĀ;cಘ⭸Ā;eಒ⭽ñಘȀAait⮈⮋⮝⮧rò⦈rrƀ;cw⮔⮕⮙憛;쀀⤳̸;쀀↝̸ghtarrow»⮕riĀ;eೋೖ΀chimpqu⮽⯍⯙⬄୸⯤⯯Ȁ;cerല⯆ഷ⯉uå൅;쀀𝓃ortɭ⬅\0\0⯖ará⭖mĀ;e൮⯟Ā;q൴൳suĀbp⯫⯭å೸åഋƀbcp⯶ⰑⰙȀ;Ees⯿ⰀഢⰄ抄;쀀⫅̸etĀ;eഛⰋqĀ;qണⰀcĀ;eലⰗñസȀ;EesⰢⰣൟⰧ抅;쀀⫆̸etĀ;e൘ⰮqĀ;qൠⰣȀgilrⰽⰿⱅⱇìௗlde耻ñ䃱çృiangleĀlrⱒⱜeftĀ;eచⱚñదightĀ;eೋⱥñ೗Ā;mⱬⱭ䎽ƀ;esⱴⱵⱹ䀣ro;愖p;怇ҀDHadgilrsⲏⲔⲙⲞⲣⲰⲶⳓⳣash;抭arr;椄p;쀀≍⃒ash;抬ĀetⲨⲬ;쀀≥⃒;쀀>⃒nfin;槞ƀAetⲽⳁⳅrr;椂;쀀≤⃒Ā;rⳊⳍ쀀<⃒ie;쀀⊴⃒ĀAtⳘⳜrr;椃rie;쀀⊵⃒im;쀀∼⃒ƀAan⳰⳴ⴂrr;懖rĀhr⳺⳽k;椣Ā;oᏧᏥear;椧ቓ᪕\0\0\0\0\0\0\0\0\0\0\0\0\0ⴭ\0ⴸⵈⵠⵥ⵲ⶄᬇ\0\0ⶍⶫ\0ⷈⷎ\0ⷜ⸙⸫⸾⹃Ācsⴱ᪗ute耻ó䃳ĀiyⴼⵅrĀ;c᪞ⵂ耻ô䃴;䐾ʀabios᪠ⵒⵗǈⵚlac;䅑v;樸old;榼lig;䅓Ācr⵩⵭ir;榿;쀀𝔬ͯ⵹\0\0⵼\0ⶂn;䋛ave耻ò䃲;槁Ābmⶈ෴ar;榵Ȁacitⶕ⶘ⶥⶨrò᪀Āir⶝ⶠr;榾oss;榻nå๒;槀ƀaeiⶱⶵⶹcr;䅍ga;䏉ƀcdnⷀⷅǍron;䎿;榶pf;쀀𝕠ƀaelⷔ⷗ǒr;榷rp;榹΀;adiosvⷪⷫⷮ⸈⸍⸐⸖戨rò᪆Ȁ;efmⷷⷸ⸂⸅橝rĀ;oⷾⷿ愴f»ⷿ耻ª䂪耻º䂺gof;抶r;橖lope;橗;橛ƀclo⸟⸡⸧ò⸁ash耻ø䃸l;折iŬⸯ⸴de耻õ䃵esĀ;aǛ⸺s;樶ml耻ö䃶bar;挽ૡ⹞\0⹽\0⺀⺝\0⺢⺹\0\0⻋ຜ\0⼓\0\0⼫⾼\0⿈rȀ;astЃ⹧⹲຅脀¶;l⹭⹮䂶leìЃɩ⹸\0\0⹻m;櫳;櫽y;䐿rʀcimpt⺋⺏⺓ᡥ⺗nt;䀥od;䀮il;怰enk;怱r;쀀𝔭ƀimo⺨⺰⺴Ā;v⺭⺮䏆;䏕maô੶ne;明ƀ;tv⺿⻀⻈䏀chfork»´;䏖Āau⻏⻟nĀck⻕⻝kĀ;h⇴⻛;愎ö⇴sҀ;abcdemst⻳⻴ᤈ⻹⻽⼄⼆⼊⼎䀫cir;樣ir;樢Āouᵀ⼂;樥;橲n肻±ຝim;樦wo;樧ƀipu⼙⼠⼥ntint;樕f;쀀𝕡nd耻£䂣Ԁ;Eaceinosu່⼿⽁⽄⽇⾁⾉⾒⽾⾶;檳p;檷uå໙Ā;c໎⽌̀;acens່⽙⽟⽦⽨⽾pproø⽃urlyeñ໙ñ໎ƀaes⽯⽶⽺pprox;檹qq;檵im;拨iíໟmeĀ;s⾈ຮ怲ƀEas⽸⾐⽺ð⽵ƀdfp໬⾙⾯ƀals⾠⾥⾪lar;挮ine;挒urf;挓Ā;t໻⾴ï໻rel;抰Āci⿀⿅r;쀀𝓅;䏈ncsp;怈̀fiopsu⿚⋢⿟⿥⿫⿱r;쀀𝔮pf;쀀𝕢rime;恗cr;쀀𝓆ƀaeo⿸〉〓tĀei⿾々rnionóڰnt;樖stĀ;e【】䀿ñἙô༔઀ABHabcdefhilmnoprstux぀けさすムㄎㄫㅇㅢㅲㆎ㈆㈕㈤㈩㉘㉮㉲㊐㊰㊷ƀartぇおがròႳòϝail;検aròᱥar;楤΀cdenqrtとふへみわゔヌĀeuねぱ;쀀∽̱te;䅕iãᅮmptyv;榳gȀ;del࿑らるろ;榒;榥å࿑uo耻»䂻rր;abcfhlpstw࿜ガクシスゼゾダッデナp;極Ā;f࿠ゴs;椠;椳s;椞ë≝ð✮l;楅im;楴l;憣;憝Āaiパフil;椚oĀ;nホボ戶aló༞ƀabrョリヮrò៥rk;杳ĀakンヽcĀekヹ・;䁽;䁝Āes㄂㄄;榌lĀduㄊㄌ;榎;榐Ȁaeuyㄗㄜㄧㄩron;䅙Ādiㄡㄥil;䅗ì࿲âヺ;䑀Ȁclqsㄴㄷㄽㅄa;椷dhar;楩uoĀ;rȎȍh;憳ƀacgㅎㅟངlȀ;ipsླྀㅘㅛႜnåႻarôྩt;断ƀilrㅩဣㅮsht;楽;쀀𝔯ĀaoㅷㆆrĀduㅽㅿ»ѻĀ;l႑ㆄ;楬Ā;vㆋㆌ䏁;䏱ƀgns㆕ㇹㇼht̀ahlrstㆤㆰ㇂㇘㇤㇮rrowĀ;t࿜ㆭaéトarpoonĀduㆻㆿowîㅾp»႒eftĀah㇊㇐rrowó࿪arpoonóՑightarrows;應quigarro÷ニhreetimes;拌g;䋚ingdotseñἲƀahm㈍㈐㈓rò࿪aòՑ;怏oustĀ;a㈞㈟掱che»㈟mid;櫮Ȁabpt㈲㈽㉀㉒Ānr㈷㈺g;柭r;懾rëဃƀafl㉇㉊㉎r;榆;쀀𝕣us;樮imes;樵Āap㉝㉧rĀ;g㉣㉤䀩t;榔olint;樒arò㇣Ȁachq㉻㊀Ⴜ㊅quo;怺r;쀀𝓇Ābu・㊊oĀ;rȔȓƀhir㊗㊛㊠reåㇸmes;拊iȀ;efl㊪ၙᠡ㊫方tri;槎luhar;楨;愞ൡ㋕㋛㋟㌬㌸㍱\0㍺㎤\0\0㏬㏰\0㐨㑈㑚㒭㒱㓊㓱\0㘖\0\0㘳cute;䅛quï➺Ԁ;Eaceinpsyᇭ㋳㋵㋿㌂㌋㌏㌟㌦㌩;檴ǰ㋺\0㋼;檸on;䅡uåᇾĀ;dᇳ㌇il;䅟rc;䅝ƀEas㌖㌘㌛;檶p;檺im;择olint;樓iíሄ;䑁otƀ;be㌴ᵇ㌵担;橦΀Aacmstx㍆㍊㍗㍛㍞㍣㍭rr;懘rĀhr㍐㍒ë∨Ā;oਸ਼਴t耻§䂧i;䀻war;椩mĀin㍩ðnuóñt;朶rĀ;o㍶⁕쀀𝔰Ȁacoy㎂㎆㎑㎠rp;景Āhy㎋㎏cy;䑉;䑈rtɭ㎙\0\0㎜iäᑤaraì⹯耻­䂭Āgm㎨㎴maƀ;fv㎱㎲㎲䏃;䏂Ѐ;deglnprካ㏅㏉㏎㏖㏞㏡㏦ot;橪Ā;q኱ኰĀ;E㏓㏔檞;檠Ā;E㏛㏜檝;檟e;扆lus;樤arr;楲aròᄽȀaeit㏸㐈㐏㐗Āls㏽㐄lsetmé㍪hp;樳parsl;槤Ādlᑣ㐔e;挣Ā;e㐜㐝檪Ā;s㐢㐣檬;쀀⪬︀ƀflp㐮㐳㑂tcy;䑌Ā;b㐸㐹䀯Ā;a㐾㐿槄r;挿f;쀀𝕤aĀdr㑍ЂesĀ;u㑔㑕晠it»㑕ƀcsu㑠㑹㒟Āau㑥㑯pĀ;sᆈ㑫;쀀⊓︀pĀ;sᆴ㑵;쀀⊔︀uĀbp㑿㒏ƀ;esᆗᆜ㒆etĀ;eᆗ㒍ñᆝƀ;esᆨᆭ㒖etĀ;eᆨ㒝ñᆮƀ;afᅻ㒦ְrť㒫ֱ»ᅼaròᅈȀcemt㒹㒾㓂㓅r;쀀𝓈tmîñiì㐕aræᆾĀar㓎㓕rĀ;f㓔ឿ昆Āan㓚㓭ightĀep㓣㓪psiloîỠhé⺯s»⡒ʀbcmnp㓻㕞ሉ㖋㖎Ҁ;Edemnprs㔎㔏㔑㔕㔞㔣㔬㔱㔶抂;櫅ot;檽Ā;dᇚ㔚ot;櫃ult;櫁ĀEe㔨㔪;櫋;把lus;檿arr;楹ƀeiu㔽㕒㕕tƀ;en㔎㕅㕋qĀ;qᇚ㔏eqĀ;q㔫㔨m;櫇Ābp㕚㕜;櫕;櫓c̀;acensᇭ㕬㕲㕹㕻㌦pproø㋺urlyeñᇾñᇳƀaes㖂㖈㌛pproø㌚qñ㌗g;晪ڀ123;Edehlmnps㖩㖬㖯ሜ㖲㖴㗀㗉㗕㗚㗟㗨㗭耻¹䂹耻²䂲耻³䂳;櫆Āos㖹㖼t;檾ub;櫘Ā;dሢ㗅ot;櫄sĀou㗏㗒l;柉b;櫗arr;楻ult;櫂ĀEe㗤㗦;櫌;抋lus;櫀ƀeiu㗴㘉㘌tƀ;enሜ㗼㘂qĀ;qሢ㖲eqĀ;q㗧㗤m;櫈Ābp㘑㘓;櫔;櫖ƀAan㘜㘠㘭rr;懙rĀhr㘦㘨ë∮Ā;oਫ਩war;椪lig耻ß䃟௡㙑㙝㙠ዎ㙳㙹\0㙾㛂\0\0\0\0\0㛛㜃\0㜉㝬\0\0\0㞇ɲ㙖\0\0㙛get;挖;䏄rë๟ƀaey㙦㙫㙰ron;䅥dil;䅣;䑂lrec;挕r;쀀𝔱Ȁeiko㚆㚝㚵㚼ǲ㚋\0㚑eĀ4fኄኁaƀ;sv㚘㚙㚛䎸ym;䏑Ācn㚢㚲kĀas㚨㚮pproø዁im»ኬsðኞĀas㚺㚮ð዁rn耻þ䃾Ǭ̟㛆⋧es膀×;bd㛏㛐㛘䃗Ā;aᤏ㛕r;樱;樰ƀeps㛡㛣㜀á⩍Ȁ;bcf҆㛬㛰㛴ot;挶ir;櫱Ā;o㛹㛼쀀𝕥rk;櫚á㍢rime;怴ƀaip㜏㜒㝤dåቈ΀adempst㜡㝍㝀㝑㝗㝜㝟ngleʀ;dlqr㜰㜱㜶㝀㝂斵own»ᶻeftĀ;e⠀㜾ñम;扜ightĀ;e㊪㝋ñၚot;旬inus;樺lus;樹b;槍ime;樻ezium;揢ƀcht㝲㝽㞁Āry㝷㝻;쀀𝓉;䑆cy;䑛rok;䅧Āio㞋㞎xô᝷headĀlr㞗㞠eftarro÷ࡏightarrow»ཝऀAHabcdfghlmoprstuw㟐㟓㟗㟤㟰㟼㠎㠜㠣㠴㡑㡝㡫㢩㣌㣒㣪㣶ròϭar;楣Ācr㟜㟢ute耻ú䃺òᅐrǣ㟪\0㟭y;䑞ve;䅭Āiy㟵㟺rc耻û䃻;䑃ƀabh㠃㠆㠋ròᎭlac;䅱aòᏃĀir㠓㠘sht;楾;쀀𝔲rave耻ù䃹š㠧㠱rĀlr㠬㠮»ॗ»ႃlk;斀Āct㠹㡍ɯ㠿\0\0㡊rnĀ;e㡅㡆挜r»㡆op;挏ri;旸Āal㡖㡚cr;䅫肻¨͉Āgp㡢㡦on;䅳f;쀀𝕦̀adhlsuᅋ㡸㡽፲㢑㢠ownáᎳarpoonĀlr㢈㢌efô㠭ighô㠯iƀ;hl㢙㢚㢜䏅»ᏺon»㢚parrows;懈ƀcit㢰㣄㣈ɯ㢶\0\0㣁rnĀ;e㢼㢽挝r»㢽op;挎ng;䅯ri;旹cr;쀀𝓊ƀdir㣙㣝㣢ot;拰lde;䅩iĀ;f㜰㣨»᠓Āam㣯㣲rò㢨l耻ü䃼angle;榧ހABDacdeflnoprsz㤜㤟㤩㤭㦵㦸㦽㧟㧤㧨㧳㧹㧽㨁㨠ròϷarĀ;v㤦㤧櫨;櫩asèϡĀnr㤲㤷grt;榜΀eknprst㓣㥆㥋㥒㥝㥤㦖appá␕othinçẖƀhir㓫⻈㥙opô⾵Ā;hᎷ㥢ïㆍĀiu㥩㥭gmá㎳Ābp㥲㦄setneqĀ;q㥽㦀쀀⊊︀;쀀⫋︀setneqĀ;q㦏㦒쀀⊋︀;쀀⫌︀Āhr㦛㦟etá㚜iangleĀlr㦪㦯eft»थight»ၑy;䐲ash»ံƀelr㧄㧒㧗ƀ;beⷪ㧋㧏ar;抻q;扚lip;拮Ābt㧜ᑨaòᑩr;쀀𝔳tré㦮suĀbp㧯㧱»ജ»൙pf;쀀𝕧roð໻tré㦴Ācu㨆㨋r;쀀𝓋Ābp㨐㨘nĀEe㦀㨖»㥾nĀEe㦒㨞»㦐igzag;榚΀cefoprs㨶㨻㩖㩛㩔㩡㩪irc;䅵Ādi㩀㩑Ābg㩅㩉ar;機eĀ;qᗺ㩏;扙erp;愘r;쀀𝔴pf;쀀𝕨Ā;eᑹ㩦atèᑹcr;쀀𝓌ૣណ㪇\0㪋\0㪐㪛\0\0㪝㪨㪫㪯\0\0㫃㫎\0㫘ៜ៟tré៑r;쀀𝔵ĀAa㪔㪗ròσrò৶;䎾ĀAa㪡㪤ròθrò৫að✓is;拻ƀdptឤ㪵㪾Āfl㪺ឩ;쀀𝕩imåឲĀAa㫇㫊ròώròਁĀcq㫒ីr;쀀𝓍Āpt៖㫜ré។Ѐacefiosu㫰㫽㬈㬌㬑㬕㬛㬡cĀuy㫶㫻te耻ý䃽;䑏Āiy㬂㬆rc;䅷;䑋n耻¥䂥r;쀀𝔶cy;䑗pf;쀀𝕪cr;쀀𝓎Ācm㬦㬩y;䑎l耻ÿ䃿Ԁacdefhiosw㭂㭈㭔㭘㭤㭩㭭㭴㭺㮀cute;䅺Āay㭍㭒ron;䅾;䐷ot;䅼Āet㭝㭡træᕟa;䎶r;쀀𝔷cy;䐶grarr;懝pf;쀀𝕫cr;쀀𝓏Ājn㮅㮇;怍j;怌'
            .split('')
            .map((e) => e.charCodeAt(0))
        ),
        Gt = new Uint16Array(
          'Ȁaglq\tɭ\0\0p;䀦os;䀧t;䀾t;䀼uot;䀢'
            .split('')
            .map((e) => e.charCodeAt(0))
        )
      var Vt
      const Yt = new Map([
          [0, 65533],
          [128, 8364],
          [130, 8218],
          [131, 402],
          [132, 8222],
          [133, 8230],
          [134, 8224],
          [135, 8225],
          [136, 710],
          [137, 8240],
          [138, 352],
          [139, 8249],
          [140, 338],
          [142, 381],
          [145, 8216],
          [146, 8217],
          [147, 8220],
          [148, 8221],
          [149, 8226],
          [150, 8211],
          [151, 8212],
          [152, 732],
          [153, 8482],
          [154, 353],
          [155, 8250],
          [156, 339],
          [158, 382],
          [159, 376],
        ]),
        Qt =
          null !== (Vt = String.fromCodePoint) && void 0 !== Vt
            ? Vt
            : function (e) {
                let t = ''
                return (
                  e > 65535 &&
                    ((e -= 65536),
                    (t += String.fromCharCode(((e >>> 10) & 1023) | 55296)),
                    (e = 56320 | (1023 & e))),
                  (t += String.fromCharCode(e)),
                  t
                )
              }
      var Wt, Xt, jt, Kt
      function zt(e) {
        return e >= Wt.ZERO && e <= Wt.NINE
      }
      !(function (e) {
        ;(e[(e.NUM = 35)] = 'NUM'),
          (e[(e.SEMI = 59)] = 'SEMI'),
          (e[(e.EQUALS = 61)] = 'EQUALS'),
          (e[(e.ZERO = 48)] = 'ZERO'),
          (e[(e.NINE = 57)] = 'NINE'),
          (e[(e.LOWER_A = 97)] = 'LOWER_A'),
          (e[(e.LOWER_F = 102)] = 'LOWER_F'),
          (e[(e.LOWER_X = 120)] = 'LOWER_X'),
          (e[(e.LOWER_Z = 122)] = 'LOWER_Z'),
          (e[(e.UPPER_A = 65)] = 'UPPER_A'),
          (e[(e.UPPER_F = 70)] = 'UPPER_F'),
          (e[(e.UPPER_Z = 90)] = 'UPPER_Z')
      })(Wt || (Wt = {})),
        (function (e) {
          ;(e[(e.VALUE_LENGTH = 49152)] = 'VALUE_LENGTH'),
            (e[(e.BRANCH_LENGTH = 16256)] = 'BRANCH_LENGTH'),
            (e[(e.JUMP_TABLE = 127)] = 'JUMP_TABLE')
        })(Xt || (Xt = {})),
        (function (e) {
          ;(e[(e.EntityStart = 0)] = 'EntityStart'),
            (e[(e.NumericStart = 1)] = 'NumericStart'),
            (e[(e.NumericDecimal = 2)] = 'NumericDecimal'),
            (e[(e.NumericHex = 3)] = 'NumericHex'),
            (e[(e.NamedEntity = 4)] = 'NamedEntity')
        })(jt || (jt = {})),
        (function (e) {
          ;(e[(e.Legacy = 0)] = 'Legacy'),
            (e[(e.Strict = 1)] = 'Strict'),
            (e[(e.Attribute = 2)] = 'Attribute')
        })(Kt || (Kt = {}))
      class $t {
        constructor(e, t, r) {
          ;(this.decodeTree = e),
            (this.emitCodePoint = t),
            (this.errors = r),
            (this.state = jt.EntityStart),
            (this.consumed = 1),
            (this.result = 0),
            (this.treeIndex = 0),
            (this.excess = 1),
            (this.decodeMode = Kt.Strict)
        }
        startEntity(e) {
          ;(this.decodeMode = e),
            (this.state = jt.EntityStart),
            (this.result = 0),
            (this.treeIndex = 0),
            (this.excess = 1),
            (this.consumed = 1)
        }
        write(e, t) {
          switch (this.state) {
            case jt.EntityStart:
              return e.charCodeAt(t) === Wt.NUM
                ? ((this.state = jt.NumericStart),
                  (this.consumed += 1),
                  this.stateNumericStart(e, t + 1))
                : ((this.state = jt.NamedEntity), this.stateNamedEntity(e, t))
            case jt.NumericStart:
              return this.stateNumericStart(e, t)
            case jt.NumericDecimal:
              return this.stateNumericDecimal(e, t)
            case jt.NumericHex:
              return this.stateNumericHex(e, t)
            case jt.NamedEntity:
              return this.stateNamedEntity(e, t)
          }
        }
        stateNumericStart(e, t) {
          return t >= e.length
            ? -1
            : (32 | e.charCodeAt(t)) === Wt.LOWER_X
            ? ((this.state = jt.NumericHex),
              (this.consumed += 1),
              this.stateNumericHex(e, t + 1))
            : ((this.state = jt.NumericDecimal), this.stateNumericDecimal(e, t))
        }
        addToNumericResult(e, t, r, n) {
          if (t !== r) {
            const s = r - t
            ;(this.result =
              this.result * Math.pow(n, s) + parseInt(e.substr(t, s), n)),
              (this.consumed += s)
          }
        }
        stateNumericHex(e, t) {
          const r = t
          for (; t < e.length; ) {
            const s = e.charCodeAt(t)
            if (
              !(
                zt(s) ||
                ((n = s),
                (n >= Wt.UPPER_A && n <= Wt.UPPER_F) ||
                  (n >= Wt.LOWER_A && n <= Wt.LOWER_F))
              )
            )
              return (
                this.addToNumericResult(e, r, t, 16),
                this.emitNumericEntity(s, 3)
              )
            t += 1
          }
          var n
          return this.addToNumericResult(e, r, t, 16), -1
        }
        stateNumericDecimal(e, t) {
          const r = t
          for (; t < e.length; ) {
            const n = e.charCodeAt(t)
            if (!zt(n))
              return (
                this.addToNumericResult(e, r, t, 10),
                this.emitNumericEntity(n, 2)
              )
            t += 1
          }
          return this.addToNumericResult(e, r, t, 10), -1
        }
        emitNumericEntity(e, t) {
          var r
          if (this.consumed <= t)
            return (
              null === (r = this.errors) ||
                void 0 === r ||
                r.absenceOfDigitsInNumericCharacterReference(this.consumed),
              0
            )
          if (e === Wt.SEMI) this.consumed += 1
          else if (this.decodeMode === Kt.Strict) return 0
          return (
            this.emitCodePoint(
              (function (e) {
                var t
                return (e >= 55296 && e <= 57343) || e > 1114111
                  ? 65533
                  : null !== (t = Yt.get(e)) && void 0 !== t
                  ? t
                  : e
              })(this.result),
              this.consumed
            ),
            this.errors &&
              (e !== Wt.SEMI &&
                this.errors.missingSemicolonAfterCharacterReference(),
              this.errors.validateNumericCharacterReference(this.result)),
            this.consumed
          )
        }
        stateNamedEntity(e, t) {
          const { decodeTree: r } = this
          let n = r[this.treeIndex],
            s = (n & Xt.VALUE_LENGTH) >> 14
          for (; t < e.length; t++, this.excess++) {
            const i = e.charCodeAt(t)
            if (
              ((this.treeIndex = Jt(r, n, this.treeIndex + Math.max(1, s), i)),
              this.treeIndex < 0)
            )
              return 0 === this.result ||
                (this.decodeMode === Kt.Attribute &&
                  (0 === s ||
                    (a = i) === Wt.EQUALS ||
                    (function (e) {
                      return (
                        (e >= Wt.UPPER_A && e <= Wt.UPPER_Z) ||
                        (e >= Wt.LOWER_A && e <= Wt.LOWER_Z) ||
                        zt(e)
                      )
                    })(a)))
                ? 0
                : this.emitNotTerminatedNamedEntity()
            if (
              ((n = r[this.treeIndex]),
              (s = (n & Xt.VALUE_LENGTH) >> 14),
              0 !== s)
            ) {
              if (i === Wt.SEMI)
                return this.emitNamedEntityData(
                  this.treeIndex,
                  s,
                  this.consumed + this.excess
                )
              this.decodeMode !== Kt.Strict &&
                ((this.result = this.treeIndex),
                (this.consumed += this.excess),
                (this.excess = 0))
            }
          }
          var a
          return -1
        }
        emitNotTerminatedNamedEntity() {
          var e
          const { result: t, decodeTree: r } = this,
            n = (r[t] & Xt.VALUE_LENGTH) >> 14
          return (
            this.emitNamedEntityData(t, n, this.consumed),
            null === (e = this.errors) ||
              void 0 === e ||
              e.missingSemicolonAfterCharacterReference(),
            this.consumed
          )
        }
        emitNamedEntityData(e, t, r) {
          const { decodeTree: n } = this
          return (
            this.emitCodePoint(1 === t ? n[e] & ~Xt.VALUE_LENGTH : n[e + 1], r),
            3 === t && this.emitCodePoint(n[e + 2], r),
            r
          )
        }
        end() {
          var e
          switch (this.state) {
            case jt.NamedEntity:
              return 0 === this.result ||
                (this.decodeMode === Kt.Attribute &&
                  this.result !== this.treeIndex)
                ? 0
                : this.emitNotTerminatedNamedEntity()
            case jt.NumericDecimal:
              return this.emitNumericEntity(0, 2)
            case jt.NumericHex:
              return this.emitNumericEntity(0, 3)
            case jt.NumericStart:
              return (
                null === (e = this.errors) ||
                  void 0 === e ||
                  e.absenceOfDigitsInNumericCharacterReference(this.consumed),
                0
              )
            case jt.EntityStart:
              return 0
          }
        }
      }
      function Zt(e) {
        let t = ''
        const r = new $t(e, (e) => (t += Qt(e)))
        return function (e, n) {
          let s = 0,
            a = 0
          for (; (a = e.indexOf('&', a)) >= 0; ) {
            ;(t += e.slice(s, a)), r.startEntity(n)
            const i = r.write(e, a + 1)
            if (i < 0) {
              s = a + r.end()
              break
            }
            ;(s = a + i), (a = 0 === i ? s + 1 : s)
          }
          const i = t + e.slice(s)
          return (t = ''), i
        }
      }
      function Jt(e, t, r, n) {
        const s = (t & Xt.BRANCH_LENGTH) >> 7,
          a = t & Xt.JUMP_TABLE
        if (0 === s) return 0 !== a && n === a ? r : -1
        if (a) {
          const t = n - a
          return t < 0 || t >= s ? -1 : e[r + t] - 1
        }
        let i = r,
          o = i + s - 1
        for (; i <= o; ) {
          const t = (i + o) >>> 1,
            r = e[t]
          if (r < n) i = t + 1
          else {
            if (!(r > n)) return e[t + s]
            o = t - 1
          }
        }
        return -1
      }
      function er(e) {
        for (let t = 1; t < e.length; t++) e[t][0] += e[t - 1][0] + 1
        return e
      }
      Zt(qt),
        Zt(Gt),
        new Map(
          er([
            [9, '&Tab;'],
            [0, '&NewLine;'],
            [22, '&excl;'],
            [0, '&quot;'],
            [0, '&num;'],
            [0, '&dollar;'],
            [0, '&percnt;'],
            [0, '&amp;'],
            [0, '&apos;'],
            [0, '&lpar;'],
            [0, '&rpar;'],
            [0, '&ast;'],
            [0, '&plus;'],
            [0, '&comma;'],
            [1, '&period;'],
            [0, '&sol;'],
            [10, '&colon;'],
            [0, '&semi;'],
            [0, { v: '&lt;', n: 8402, o: '&nvlt;' }],
            [0, { v: '&equals;', n: 8421, o: '&bne;' }],
            [0, { v: '&gt;', n: 8402, o: '&nvgt;' }],
            [0, '&quest;'],
            [0, '&commat;'],
            [26, '&lbrack;'],
            [0, '&bsol;'],
            [0, '&rbrack;'],
            [0, '&Hat;'],
            [0, '&lowbar;'],
            [0, '&DiacriticalGrave;'],
            [5, { n: 106, o: '&fjlig;' }],
            [20, '&lbrace;'],
            [0, '&verbar;'],
            [0, '&rbrace;'],
            [34, '&nbsp;'],
            [0, '&iexcl;'],
            [0, '&cent;'],
            [0, '&pound;'],
            [0, '&curren;'],
            [0, '&yen;'],
            [0, '&brvbar;'],
            [0, '&sect;'],
            [0, '&die;'],
            [0, '&copy;'],
            [0, '&ordf;'],
            [0, '&laquo;'],
            [0, '&not;'],
            [0, '&shy;'],
            [0, '&circledR;'],
            [0, '&macr;'],
            [0, '&deg;'],
            [0, '&PlusMinus;'],
            [0, '&sup2;'],
            [0, '&sup3;'],
            [0, '&acute;'],
            [0, '&micro;'],
            [0, '&para;'],
            [0, '&centerdot;'],
            [0, '&cedil;'],
            [0, '&sup1;'],
            [0, '&ordm;'],
            [0, '&raquo;'],
            [0, '&frac14;'],
            [0, '&frac12;'],
            [0, '&frac34;'],
            [0, '&iquest;'],
            [0, '&Agrave;'],
            [0, '&Aacute;'],
            [0, '&Acirc;'],
            [0, '&Atilde;'],
            [0, '&Auml;'],
            [0, '&angst;'],
            [0, '&AElig;'],
            [0, '&Ccedil;'],
            [0, '&Egrave;'],
            [0, '&Eacute;'],
            [0, '&Ecirc;'],
            [0, '&Euml;'],
            [0, '&Igrave;'],
            [0, '&Iacute;'],
            [0, '&Icirc;'],
            [0, '&Iuml;'],
            [0, '&ETH;'],
            [0, '&Ntilde;'],
            [0, '&Ograve;'],
            [0, '&Oacute;'],
            [0, '&Ocirc;'],
            [0, '&Otilde;'],
            [0, '&Ouml;'],
            [0, '&times;'],
            [0, '&Oslash;'],
            [0, '&Ugrave;'],
            [0, '&Uacute;'],
            [0, '&Ucirc;'],
            [0, '&Uuml;'],
            [0, '&Yacute;'],
            [0, '&THORN;'],
            [0, '&szlig;'],
            [0, '&agrave;'],
            [0, '&aacute;'],
            [0, '&acirc;'],
            [0, '&atilde;'],
            [0, '&auml;'],
            [0, '&aring;'],
            [0, '&aelig;'],
            [0, '&ccedil;'],
            [0, '&egrave;'],
            [0, '&eacute;'],
            [0, '&ecirc;'],
            [0, '&euml;'],
            [0, '&igrave;'],
            [0, '&iacute;'],
            [0, '&icirc;'],
            [0, '&iuml;'],
            [0, '&eth;'],
            [0, '&ntilde;'],
            [0, '&ograve;'],
            [0, '&oacute;'],
            [0, '&ocirc;'],
            [0, '&otilde;'],
            [0, '&ouml;'],
            [0, '&div;'],
            [0, '&oslash;'],
            [0, '&ugrave;'],
            [0, '&uacute;'],
            [0, '&ucirc;'],
            [0, '&uuml;'],
            [0, '&yacute;'],
            [0, '&thorn;'],
            [0, '&yuml;'],
            [0, '&Amacr;'],
            [0, '&amacr;'],
            [0, '&Abreve;'],
            [0, '&abreve;'],
            [0, '&Aogon;'],
            [0, '&aogon;'],
            [0, '&Cacute;'],
            [0, '&cacute;'],
            [0, '&Ccirc;'],
            [0, '&ccirc;'],
            [0, '&Cdot;'],
            [0, '&cdot;'],
            [0, '&Ccaron;'],
            [0, '&ccaron;'],
            [0, '&Dcaron;'],
            [0, '&dcaron;'],
            [0, '&Dstrok;'],
            [0, '&dstrok;'],
            [0, '&Emacr;'],
            [0, '&emacr;'],
            [2, '&Edot;'],
            [0, '&edot;'],
            [0, '&Eogon;'],
            [0, '&eogon;'],
            [0, '&Ecaron;'],
            [0, '&ecaron;'],
            [0, '&Gcirc;'],
            [0, '&gcirc;'],
            [0, '&Gbreve;'],
            [0, '&gbreve;'],
            [0, '&Gdot;'],
            [0, '&gdot;'],
            [0, '&Gcedil;'],
            [1, '&Hcirc;'],
            [0, '&hcirc;'],
            [0, '&Hstrok;'],
            [0, '&hstrok;'],
            [0, '&Itilde;'],
            [0, '&itilde;'],
            [0, '&Imacr;'],
            [0, '&imacr;'],
            [2, '&Iogon;'],
            [0, '&iogon;'],
            [0, '&Idot;'],
            [0, '&imath;'],
            [0, '&IJlig;'],
            [0, '&ijlig;'],
            [0, '&Jcirc;'],
            [0, '&jcirc;'],
            [0, '&Kcedil;'],
            [0, '&kcedil;'],
            [0, '&kgreen;'],
            [0, '&Lacute;'],
            [0, '&lacute;'],
            [0, '&Lcedil;'],
            [0, '&lcedil;'],
            [0, '&Lcaron;'],
            [0, '&lcaron;'],
            [0, '&Lmidot;'],
            [0, '&lmidot;'],
            [0, '&Lstrok;'],
            [0, '&lstrok;'],
            [0, '&Nacute;'],
            [0, '&nacute;'],
            [0, '&Ncedil;'],
            [0, '&ncedil;'],
            [0, '&Ncaron;'],
            [0, '&ncaron;'],
            [0, '&napos;'],
            [0, '&ENG;'],
            [0, '&eng;'],
            [0, '&Omacr;'],
            [0, '&omacr;'],
            [2, '&Odblac;'],
            [0, '&odblac;'],
            [0, '&OElig;'],
            [0, '&oelig;'],
            [0, '&Racute;'],
            [0, '&racute;'],
            [0, '&Rcedil;'],
            [0, '&rcedil;'],
            [0, '&Rcaron;'],
            [0, '&rcaron;'],
            [0, '&Sacute;'],
            [0, '&sacute;'],
            [0, '&Scirc;'],
            [0, '&scirc;'],
            [0, '&Scedil;'],
            [0, '&scedil;'],
            [0, '&Scaron;'],
            [0, '&scaron;'],
            [0, '&Tcedil;'],
            [0, '&tcedil;'],
            [0, '&Tcaron;'],
            [0, '&tcaron;'],
            [0, '&Tstrok;'],
            [0, '&tstrok;'],
            [0, '&Utilde;'],
            [0, '&utilde;'],
            [0, '&Umacr;'],
            [0, '&umacr;'],
            [0, '&Ubreve;'],
            [0, '&ubreve;'],
            [0, '&Uring;'],
            [0, '&uring;'],
            [0, '&Udblac;'],
            [0, '&udblac;'],
            [0, '&Uogon;'],
            [0, '&uogon;'],
            [0, '&Wcirc;'],
            [0, '&wcirc;'],
            [0, '&Ycirc;'],
            [0, '&ycirc;'],
            [0, '&Yuml;'],
            [0, '&Zacute;'],
            [0, '&zacute;'],
            [0, '&Zdot;'],
            [0, '&zdot;'],
            [0, '&Zcaron;'],
            [0, '&zcaron;'],
            [19, '&fnof;'],
            [34, '&imped;'],
            [63, '&gacute;'],
            [65, '&jmath;'],
            [142, '&circ;'],
            [0, '&caron;'],
            [16, '&breve;'],
            [0, '&DiacriticalDot;'],
            [0, '&ring;'],
            [0, '&ogon;'],
            [0, '&DiacriticalTilde;'],
            [0, '&dblac;'],
            [51, '&DownBreve;'],
            [127, '&Alpha;'],
            [0, '&Beta;'],
            [0, '&Gamma;'],
            [0, '&Delta;'],
            [0, '&Epsilon;'],
            [0, '&Zeta;'],
            [0, '&Eta;'],
            [0, '&Theta;'],
            [0, '&Iota;'],
            [0, '&Kappa;'],
            [0, '&Lambda;'],
            [0, '&Mu;'],
            [0, '&Nu;'],
            [0, '&Xi;'],
            [0, '&Omicron;'],
            [0, '&Pi;'],
            [0, '&Rho;'],
            [1, '&Sigma;'],
            [0, '&Tau;'],
            [0, '&Upsilon;'],
            [0, '&Phi;'],
            [0, '&Chi;'],
            [0, '&Psi;'],
            [0, '&ohm;'],
            [7, '&alpha;'],
            [0, '&beta;'],
            [0, '&gamma;'],
            [0, '&delta;'],
            [0, '&epsi;'],
            [0, '&zeta;'],
            [0, '&eta;'],
            [0, '&theta;'],
            [0, '&iota;'],
            [0, '&kappa;'],
            [0, '&lambda;'],
            [0, '&mu;'],
            [0, '&nu;'],
            [0, '&xi;'],
            [0, '&omicron;'],
            [0, '&pi;'],
            [0, '&rho;'],
            [0, '&sigmaf;'],
            [0, '&sigma;'],
            [0, '&tau;'],
            [0, '&upsi;'],
            [0, '&phi;'],
            [0, '&chi;'],
            [0, '&psi;'],
            [0, '&omega;'],
            [7, '&thetasym;'],
            [0, '&Upsi;'],
            [2, '&phiv;'],
            [0, '&piv;'],
            [5, '&Gammad;'],
            [0, '&digamma;'],
            [18, '&kappav;'],
            [0, '&rhov;'],
            [3, '&epsiv;'],
            [0, '&backepsilon;'],
            [10, '&IOcy;'],
            [0, '&DJcy;'],
            [0, '&GJcy;'],
            [0, '&Jukcy;'],
            [0, '&DScy;'],
            [0, '&Iukcy;'],
            [0, '&YIcy;'],
            [0, '&Jsercy;'],
            [0, '&LJcy;'],
            [0, '&NJcy;'],
            [0, '&TSHcy;'],
            [0, '&KJcy;'],
            [1, '&Ubrcy;'],
            [0, '&DZcy;'],
            [0, '&Acy;'],
            [0, '&Bcy;'],
            [0, '&Vcy;'],
            [0, '&Gcy;'],
            [0, '&Dcy;'],
            [0, '&IEcy;'],
            [0, '&ZHcy;'],
            [0, '&Zcy;'],
            [0, '&Icy;'],
            [0, '&Jcy;'],
            [0, '&Kcy;'],
            [0, '&Lcy;'],
            [0, '&Mcy;'],
            [0, '&Ncy;'],
            [0, '&Ocy;'],
            [0, '&Pcy;'],
            [0, '&Rcy;'],
            [0, '&Scy;'],
            [0, '&Tcy;'],
            [0, '&Ucy;'],
            [0, '&Fcy;'],
            [0, '&KHcy;'],
            [0, '&TScy;'],
            [0, '&CHcy;'],
            [0, '&SHcy;'],
            [0, '&SHCHcy;'],
            [0, '&HARDcy;'],
            [0, '&Ycy;'],
            [0, '&SOFTcy;'],
            [0, '&Ecy;'],
            [0, '&YUcy;'],
            [0, '&YAcy;'],
            [0, '&acy;'],
            [0, '&bcy;'],
            [0, '&vcy;'],
            [0, '&gcy;'],
            [0, '&dcy;'],
            [0, '&iecy;'],
            [0, '&zhcy;'],
            [0, '&zcy;'],
            [0, '&icy;'],
            [0, '&jcy;'],
            [0, '&kcy;'],
            [0, '&lcy;'],
            [0, '&mcy;'],
            [0, '&ncy;'],
            [0, '&ocy;'],
            [0, '&pcy;'],
            [0, '&rcy;'],
            [0, '&scy;'],
            [0, '&tcy;'],
            [0, '&ucy;'],
            [0, '&fcy;'],
            [0, '&khcy;'],
            [0, '&tscy;'],
            [0, '&chcy;'],
            [0, '&shcy;'],
            [0, '&shchcy;'],
            [0, '&hardcy;'],
            [0, '&ycy;'],
            [0, '&softcy;'],
            [0, '&ecy;'],
            [0, '&yucy;'],
            [0, '&yacy;'],
            [1, '&iocy;'],
            [0, '&djcy;'],
            [0, '&gjcy;'],
            [0, '&jukcy;'],
            [0, '&dscy;'],
            [0, '&iukcy;'],
            [0, '&yicy;'],
            [0, '&jsercy;'],
            [0, '&ljcy;'],
            [0, '&njcy;'],
            [0, '&tshcy;'],
            [0, '&kjcy;'],
            [1, '&ubrcy;'],
            [0, '&dzcy;'],
            [7074, '&ensp;'],
            [0, '&emsp;'],
            [0, '&emsp13;'],
            [0, '&emsp14;'],
            [1, '&numsp;'],
            [0, '&puncsp;'],
            [0, '&ThinSpace;'],
            [0, '&hairsp;'],
            [0, '&NegativeMediumSpace;'],
            [0, '&zwnj;'],
            [0, '&zwj;'],
            [0, '&lrm;'],
            [0, '&rlm;'],
            [0, '&dash;'],
            [2, '&ndash;'],
            [0, '&mdash;'],
            [0, '&horbar;'],
            [0, '&Verbar;'],
            [1, '&lsquo;'],
            [0, '&CloseCurlyQuote;'],
            [0, '&lsquor;'],
            [1, '&ldquo;'],
            [0, '&CloseCurlyDoubleQuote;'],
            [0, '&bdquo;'],
            [1, '&dagger;'],
            [0, '&Dagger;'],
            [0, '&bull;'],
            [2, '&nldr;'],
            [0, '&hellip;'],
            [9, '&permil;'],
            [0, '&pertenk;'],
            [0, '&prime;'],
            [0, '&Prime;'],
            [0, '&tprime;'],
            [0, '&backprime;'],
            [3, '&lsaquo;'],
            [0, '&rsaquo;'],
            [3, '&oline;'],
            [2, '&caret;'],
            [1, '&hybull;'],
            [0, '&frasl;'],
            [10, '&bsemi;'],
            [7, '&qprime;'],
            [7, { v: '&MediumSpace;', n: 8202, o: '&ThickSpace;' }],
            [0, '&NoBreak;'],
            [0, '&af;'],
            [0, '&InvisibleTimes;'],
            [0, '&ic;'],
            [72, '&euro;'],
            [46, '&tdot;'],
            [0, '&DotDot;'],
            [37, '&complexes;'],
            [2, '&incare;'],
            [4, '&gscr;'],
            [0, '&hamilt;'],
            [0, '&Hfr;'],
            [0, '&Hopf;'],
            [0, '&planckh;'],
            [0, '&hbar;'],
            [0, '&imagline;'],
            [0, '&Ifr;'],
            [0, '&lagran;'],
            [0, '&ell;'],
            [1, '&naturals;'],
            [0, '&numero;'],
            [0, '&copysr;'],
            [0, '&weierp;'],
            [0, '&Popf;'],
            [0, '&Qopf;'],
            [0, '&realine;'],
            [0, '&real;'],
            [0, '&reals;'],
            [0, '&rx;'],
            [3, '&trade;'],
            [1, '&integers;'],
            [2, '&mho;'],
            [0, '&zeetrf;'],
            [0, '&iiota;'],
            [2, '&bernou;'],
            [0, '&Cayleys;'],
            [1, '&escr;'],
            [0, '&Escr;'],
            [0, '&Fouriertrf;'],
            [1, '&Mellintrf;'],
            [0, '&order;'],
            [0, '&alefsym;'],
            [0, '&beth;'],
            [0, '&gimel;'],
            [0, '&daleth;'],
            [12, '&CapitalDifferentialD;'],
            [0, '&dd;'],
            [0, '&ee;'],
            [0, '&ii;'],
            [10, '&frac13;'],
            [0, '&frac23;'],
            [0, '&frac15;'],
            [0, '&frac25;'],
            [0, '&frac35;'],
            [0, '&frac45;'],
            [0, '&frac16;'],
            [0, '&frac56;'],
            [0, '&frac18;'],
            [0, '&frac38;'],
            [0, '&frac58;'],
            [0, '&frac78;'],
            [49, '&larr;'],
            [0, '&ShortUpArrow;'],
            [0, '&rarr;'],
            [0, '&darr;'],
            [0, '&harr;'],
            [0, '&updownarrow;'],
            [0, '&nwarr;'],
            [0, '&nearr;'],
            [0, '&LowerRightArrow;'],
            [0, '&LowerLeftArrow;'],
            [0, '&nlarr;'],
            [0, '&nrarr;'],
            [1, { v: '&rarrw;', n: 824, o: '&nrarrw;' }],
            [0, '&Larr;'],
            [0, '&Uarr;'],
            [0, '&Rarr;'],
            [0, '&Darr;'],
            [0, '&larrtl;'],
            [0, '&rarrtl;'],
            [0, '&LeftTeeArrow;'],
            [0, '&mapstoup;'],
            [0, '&map;'],
            [0, '&DownTeeArrow;'],
            [1, '&hookleftarrow;'],
            [0, '&hookrightarrow;'],
            [0, '&larrlp;'],
            [0, '&looparrowright;'],
            [0, '&harrw;'],
            [0, '&nharr;'],
            [1, '&lsh;'],
            [0, '&rsh;'],
            [0, '&ldsh;'],
            [0, '&rdsh;'],
            [1, '&crarr;'],
            [0, '&cularr;'],
            [0, '&curarr;'],
            [2, '&circlearrowleft;'],
            [0, '&circlearrowright;'],
            [0, '&leftharpoonup;'],
            [0, '&DownLeftVector;'],
            [0, '&RightUpVector;'],
            [0, '&LeftUpVector;'],
            [0, '&rharu;'],
            [0, '&DownRightVector;'],
            [0, '&dharr;'],
            [0, '&dharl;'],
            [0, '&RightArrowLeftArrow;'],
            [0, '&udarr;'],
            [0, '&LeftArrowRightArrow;'],
            [0, '&leftleftarrows;'],
            [0, '&upuparrows;'],
            [0, '&rightrightarrows;'],
            [0, '&ddarr;'],
            [0, '&leftrightharpoons;'],
            [0, '&Equilibrium;'],
            [0, '&nlArr;'],
            [0, '&nhArr;'],
            [0, '&nrArr;'],
            [0, '&DoubleLeftArrow;'],
            [0, '&DoubleUpArrow;'],
            [0, '&DoubleRightArrow;'],
            [0, '&dArr;'],
            [0, '&DoubleLeftRightArrow;'],
            [0, '&DoubleUpDownArrow;'],
            [0, '&nwArr;'],
            [0, '&neArr;'],
            [0, '&seArr;'],
            [0, '&swArr;'],
            [0, '&lAarr;'],
            [0, '&rAarr;'],
            [1, '&zigrarr;'],
            [6, '&larrb;'],
            [0, '&rarrb;'],
            [15, '&DownArrowUpArrow;'],
            [7, '&loarr;'],
            [0, '&roarr;'],
            [0, '&hoarr;'],
            [0, '&forall;'],
            [0, '&comp;'],
            [0, { v: '&part;', n: 824, o: '&npart;' }],
            [0, '&exist;'],
            [0, '&nexist;'],
            [0, '&empty;'],
            [1, '&Del;'],
            [0, '&Element;'],
            [0, '&NotElement;'],
            [1, '&ni;'],
            [0, '&notni;'],
            [2, '&prod;'],
            [0, '&coprod;'],
            [0, '&sum;'],
            [0, '&minus;'],
            [0, '&MinusPlus;'],
            [0, '&dotplus;'],
            [1, '&Backslash;'],
            [0, '&lowast;'],
            [0, '&compfn;'],
            [1, '&radic;'],
            [2, '&prop;'],
            [0, '&infin;'],
            [0, '&angrt;'],
            [0, { v: '&ang;', n: 8402, o: '&nang;' }],
            [0, '&angmsd;'],
            [0, '&angsph;'],
            [0, '&mid;'],
            [0, '&nmid;'],
            [0, '&DoubleVerticalBar;'],
            [0, '&NotDoubleVerticalBar;'],
            [0, '&and;'],
            [0, '&or;'],
            [0, { v: '&cap;', n: 65024, o: '&caps;' }],
            [0, { v: '&cup;', n: 65024, o: '&cups;' }],
            [0, '&int;'],
            [0, '&Int;'],
            [0, '&iiint;'],
            [0, '&conint;'],
            [0, '&Conint;'],
            [0, '&Cconint;'],
            [0, '&cwint;'],
            [0, '&ClockwiseContourIntegral;'],
            [0, '&awconint;'],
            [0, '&there4;'],
            [0, '&becaus;'],
            [0, '&ratio;'],
            [0, '&Colon;'],
            [0, '&dotminus;'],
            [1, '&mDDot;'],
            [0, '&homtht;'],
            [0, { v: '&sim;', n: 8402, o: '&nvsim;' }],
            [0, { v: '&backsim;', n: 817, o: '&race;' }],
            [0, { v: '&ac;', n: 819, o: '&acE;' }],
            [0, '&acd;'],
            [0, '&VerticalTilde;'],
            [0, '&NotTilde;'],
            [0, { v: '&eqsim;', n: 824, o: '&nesim;' }],
            [0, '&sime;'],
            [0, '&NotTildeEqual;'],
            [0, '&cong;'],
            [0, '&simne;'],
            [0, '&ncong;'],
            [0, '&ap;'],
            [0, '&nap;'],
            [0, '&ape;'],
            [0, { v: '&apid;', n: 824, o: '&napid;' }],
            [0, '&backcong;'],
            [0, { v: '&asympeq;', n: 8402, o: '&nvap;' }],
            [0, { v: '&bump;', n: 824, o: '&nbump;' }],
            [0, { v: '&bumpe;', n: 824, o: '&nbumpe;' }],
            [0, { v: '&doteq;', n: 824, o: '&nedot;' }],
            [0, '&doteqdot;'],
            [0, '&efDot;'],
            [0, '&erDot;'],
            [0, '&Assign;'],
            [0, '&ecolon;'],
            [0, '&ecir;'],
            [0, '&circeq;'],
            [1, '&wedgeq;'],
            [0, '&veeeq;'],
            [1, '&triangleq;'],
            [2, '&equest;'],
            [0, '&ne;'],
            [0, { v: '&Congruent;', n: 8421, o: '&bnequiv;' }],
            [0, '&nequiv;'],
            [1, { v: '&le;', n: 8402, o: '&nvle;' }],
            [0, { v: '&ge;', n: 8402, o: '&nvge;' }],
            [0, { v: '&lE;', n: 824, o: '&nlE;' }],
            [0, { v: '&gE;', n: 824, o: '&ngE;' }],
            [0, { v: '&lnE;', n: 65024, o: '&lvertneqq;' }],
            [0, { v: '&gnE;', n: 65024, o: '&gvertneqq;' }],
            [
              0,
              {
                v: '&ll;',
                n: new Map(
                  er([
                    [824, '&nLtv;'],
                    [7577, '&nLt;'],
                  ])
                ),
              },
            ],
            [
              0,
              {
                v: '&gg;',
                n: new Map(
                  er([
                    [824, '&nGtv;'],
                    [7577, '&nGt;'],
                  ])
                ),
              },
            ],
            [0, '&between;'],
            [0, '&NotCupCap;'],
            [0, '&nless;'],
            [0, '&ngt;'],
            [0, '&nle;'],
            [0, '&nge;'],
            [0, '&lesssim;'],
            [0, '&GreaterTilde;'],
            [0, '&nlsim;'],
            [0, '&ngsim;'],
            [0, '&LessGreater;'],
            [0, '&gl;'],
            [0, '&NotLessGreater;'],
            [0, '&NotGreaterLess;'],
            [0, '&pr;'],
            [0, '&sc;'],
            [0, '&prcue;'],
            [0, '&sccue;'],
            [0, '&PrecedesTilde;'],
            [0, { v: '&scsim;', n: 824, o: '&NotSucceedsTilde;' }],
            [0, '&NotPrecedes;'],
            [0, '&NotSucceeds;'],
            [0, { v: '&sub;', n: 8402, o: '&NotSubset;' }],
            [0, { v: '&sup;', n: 8402, o: '&NotSuperset;' }],
            [0, '&nsub;'],
            [0, '&nsup;'],
            [0, '&sube;'],
            [0, '&supe;'],
            [0, '&NotSubsetEqual;'],
            [0, '&NotSupersetEqual;'],
            [0, { v: '&subne;', n: 65024, o: '&varsubsetneq;' }],
            [0, { v: '&supne;', n: 65024, o: '&varsupsetneq;' }],
            [1, '&cupdot;'],
            [0, '&UnionPlus;'],
            [0, { v: '&sqsub;', n: 824, o: '&NotSquareSubset;' }],
            [0, { v: '&sqsup;', n: 824, o: '&NotSquareSuperset;' }],
            [0, '&sqsube;'],
            [0, '&sqsupe;'],
            [0, { v: '&sqcap;', n: 65024, o: '&sqcaps;' }],
            [0, { v: '&sqcup;', n: 65024, o: '&sqcups;' }],
            [0, '&CirclePlus;'],
            [0, '&CircleMinus;'],
            [0, '&CircleTimes;'],
            [0, '&osol;'],
            [0, '&CircleDot;'],
            [0, '&circledcirc;'],
            [0, '&circledast;'],
            [1, '&circleddash;'],
            [0, '&boxplus;'],
            [0, '&boxminus;'],
            [0, '&boxtimes;'],
            [0, '&dotsquare;'],
            [0, '&RightTee;'],
            [0, '&dashv;'],
            [0, '&DownTee;'],
            [0, '&bot;'],
            [1, '&models;'],
            [0, '&DoubleRightTee;'],
            [0, '&Vdash;'],
            [0, '&Vvdash;'],
            [0, '&VDash;'],
            [0, '&nvdash;'],
            [0, '&nvDash;'],
            [0, '&nVdash;'],
            [0, '&nVDash;'],
            [0, '&prurel;'],
            [1, '&LeftTriangle;'],
            [0, '&RightTriangle;'],
            [0, { v: '&LeftTriangleEqual;', n: 8402, o: '&nvltrie;' }],
            [0, { v: '&RightTriangleEqual;', n: 8402, o: '&nvrtrie;' }],
            [0, '&origof;'],
            [0, '&imof;'],
            [0, '&multimap;'],
            [0, '&hercon;'],
            [0, '&intcal;'],
            [0, '&veebar;'],
            [1, '&barvee;'],
            [0, '&angrtvb;'],
            [0, '&lrtri;'],
            [0, '&bigwedge;'],
            [0, '&bigvee;'],
            [0, '&bigcap;'],
            [0, '&bigcup;'],
            [0, '&diam;'],
            [0, '&sdot;'],
            [0, '&sstarf;'],
            [0, '&divideontimes;'],
            [0, '&bowtie;'],
            [0, '&ltimes;'],
            [0, '&rtimes;'],
            [0, '&leftthreetimes;'],
            [0, '&rightthreetimes;'],
            [0, '&backsimeq;'],
            [0, '&curlyvee;'],
            [0, '&curlywedge;'],
            [0, '&Sub;'],
            [0, '&Sup;'],
            [0, '&Cap;'],
            [0, '&Cup;'],
            [0, '&fork;'],
            [0, '&epar;'],
            [0, '&lessdot;'],
            [0, '&gtdot;'],
            [0, { v: '&Ll;', n: 824, o: '&nLl;' }],
            [0, { v: '&Gg;', n: 824, o: '&nGg;' }],
            [0, { v: '&leg;', n: 65024, o: '&lesg;' }],
            [0, { v: '&gel;', n: 65024, o: '&gesl;' }],
            [2, '&cuepr;'],
            [0, '&cuesc;'],
            [0, '&NotPrecedesSlantEqual;'],
            [0, '&NotSucceedsSlantEqual;'],
            [0, '&NotSquareSubsetEqual;'],
            [0, '&NotSquareSupersetEqual;'],
            [2, '&lnsim;'],
            [0, '&gnsim;'],
            [0, '&precnsim;'],
            [0, '&scnsim;'],
            [0, '&nltri;'],
            [0, '&NotRightTriangle;'],
            [0, '&nltrie;'],
            [0, '&NotRightTriangleEqual;'],
            [0, '&vellip;'],
            [0, '&ctdot;'],
            [0, '&utdot;'],
            [0, '&dtdot;'],
            [0, '&disin;'],
            [0, '&isinsv;'],
            [0, '&isins;'],
            [0, { v: '&isindot;', n: 824, o: '&notindot;' }],
            [0, '&notinvc;'],
            [0, '&notinvb;'],
            [1, { v: '&isinE;', n: 824, o: '&notinE;' }],
            [0, '&nisd;'],
            [0, '&xnis;'],
            [0, '&nis;'],
            [0, '&notnivc;'],
            [0, '&notnivb;'],
            [6, '&barwed;'],
            [0, '&Barwed;'],
            [1, '&lceil;'],
            [0, '&rceil;'],
            [0, '&LeftFloor;'],
            [0, '&rfloor;'],
            [0, '&drcrop;'],
            [0, '&dlcrop;'],
            [0, '&urcrop;'],
            [0, '&ulcrop;'],
            [0, '&bnot;'],
            [1, '&profline;'],
            [0, '&profsurf;'],
            [1, '&telrec;'],
            [0, '&target;'],
            [5, '&ulcorn;'],
            [0, '&urcorn;'],
            [0, '&dlcorn;'],
            [0, '&drcorn;'],
            [2, '&frown;'],
            [0, '&smile;'],
            [9, '&cylcty;'],
            [0, '&profalar;'],
            [7, '&topbot;'],
            [6, '&ovbar;'],
            [1, '&solbar;'],
            [60, '&angzarr;'],
            [51, '&lmoustache;'],
            [0, '&rmoustache;'],
            [2, '&OverBracket;'],
            [0, '&bbrk;'],
            [0, '&bbrktbrk;'],
            [37, '&OverParenthesis;'],
            [0, '&UnderParenthesis;'],
            [0, '&OverBrace;'],
            [0, '&UnderBrace;'],
            [2, '&trpezium;'],
            [4, '&elinters;'],
            [59, '&blank;'],
            [164, '&circledS;'],
            [55, '&boxh;'],
            [1, '&boxv;'],
            [9, '&boxdr;'],
            [3, '&boxdl;'],
            [3, '&boxur;'],
            [3, '&boxul;'],
            [3, '&boxvr;'],
            [7, '&boxvl;'],
            [7, '&boxhd;'],
            [7, '&boxhu;'],
            [7, '&boxvh;'],
            [19, '&boxH;'],
            [0, '&boxV;'],
            [0, '&boxdR;'],
            [0, '&boxDr;'],
            [0, '&boxDR;'],
            [0, '&boxdL;'],
            [0, '&boxDl;'],
            [0, '&boxDL;'],
            [0, '&boxuR;'],
            [0, '&boxUr;'],
            [0, '&boxUR;'],
            [0, '&boxuL;'],
            [0, '&boxUl;'],
            [0, '&boxUL;'],
            [0, '&boxvR;'],
            [0, '&boxVr;'],
            [0, '&boxVR;'],
            [0, '&boxvL;'],
            [0, '&boxVl;'],
            [0, '&boxVL;'],
            [0, '&boxHd;'],
            [0, '&boxhD;'],
            [0, '&boxHD;'],
            [0, '&boxHu;'],
            [0, '&boxhU;'],
            [0, '&boxHU;'],
            [0, '&boxvH;'],
            [0, '&boxVh;'],
            [0, '&boxVH;'],
            [19, '&uhblk;'],
            [3, '&lhblk;'],
            [3, '&block;'],
            [8, '&blk14;'],
            [0, '&blk12;'],
            [0, '&blk34;'],
            [13, '&square;'],
            [8, '&blacksquare;'],
            [0, '&EmptyVerySmallSquare;'],
            [1, '&rect;'],
            [0, '&marker;'],
            [2, '&fltns;'],
            [1, '&bigtriangleup;'],
            [0, '&blacktriangle;'],
            [0, '&triangle;'],
            [2, '&blacktriangleright;'],
            [0, '&rtri;'],
            [3, '&bigtriangledown;'],
            [0, '&blacktriangledown;'],
            [0, '&dtri;'],
            [2, '&blacktriangleleft;'],
            [0, '&ltri;'],
            [6, '&loz;'],
            [0, '&cir;'],
            [32, '&tridot;'],
            [2, '&bigcirc;'],
            [8, '&ultri;'],
            [0, '&urtri;'],
            [0, '&lltri;'],
            [0, '&EmptySmallSquare;'],
            [0, '&FilledSmallSquare;'],
            [8, '&bigstar;'],
            [0, '&star;'],
            [7, '&phone;'],
            [49, '&female;'],
            [1, '&male;'],
            [29, '&spades;'],
            [2, '&clubs;'],
            [1, '&hearts;'],
            [0, '&diamondsuit;'],
            [3, '&sung;'],
            [2, '&flat;'],
            [0, '&natural;'],
            [0, '&sharp;'],
            [163, '&check;'],
            [3, '&cross;'],
            [8, '&malt;'],
            [21, '&sext;'],
            [33, '&VerticalSeparator;'],
            [25, '&lbbrk;'],
            [0, '&rbbrk;'],
            [84, '&bsolhsub;'],
            [0, '&suphsol;'],
            [28, '&LeftDoubleBracket;'],
            [0, '&RightDoubleBracket;'],
            [0, '&lang;'],
            [0, '&rang;'],
            [0, '&Lang;'],
            [0, '&Rang;'],
            [0, '&loang;'],
            [0, '&roang;'],
            [7, '&longleftarrow;'],
            [0, '&longrightarrow;'],
            [0, '&longleftrightarrow;'],
            [0, '&DoubleLongLeftArrow;'],
            [0, '&DoubleLongRightArrow;'],
            [0, '&DoubleLongLeftRightArrow;'],
            [1, '&longmapsto;'],
            [2, '&dzigrarr;'],
            [258, '&nvlArr;'],
            [0, '&nvrArr;'],
            [0, '&nvHarr;'],
            [0, '&Map;'],
            [6, '&lbarr;'],
            [0, '&bkarow;'],
            [0, '&lBarr;'],
            [0, '&dbkarow;'],
            [0, '&drbkarow;'],
            [0, '&DDotrahd;'],
            [0, '&UpArrowBar;'],
            [0, '&DownArrowBar;'],
            [2, '&Rarrtl;'],
            [2, '&latail;'],
            [0, '&ratail;'],
            [0, '&lAtail;'],
            [0, '&rAtail;'],
            [0, '&larrfs;'],
            [0, '&rarrfs;'],
            [0, '&larrbfs;'],
            [0, '&rarrbfs;'],
            [2, '&nwarhk;'],
            [0, '&nearhk;'],
            [0, '&hksearow;'],
            [0, '&hkswarow;'],
            [0, '&nwnear;'],
            [0, '&nesear;'],
            [0, '&seswar;'],
            [0, '&swnwar;'],
            [8, { v: '&rarrc;', n: 824, o: '&nrarrc;' }],
            [1, '&cudarrr;'],
            [0, '&ldca;'],
            [0, '&rdca;'],
            [0, '&cudarrl;'],
            [0, '&larrpl;'],
            [2, '&curarrm;'],
            [0, '&cularrp;'],
            [7, '&rarrpl;'],
            [2, '&harrcir;'],
            [0, '&Uarrocir;'],
            [0, '&lurdshar;'],
            [0, '&ldrushar;'],
            [2, '&LeftRightVector;'],
            [0, '&RightUpDownVector;'],
            [0, '&DownLeftRightVector;'],
            [0, '&LeftUpDownVector;'],
            [0, '&LeftVectorBar;'],
            [0, '&RightVectorBar;'],
            [0, '&RightUpVectorBar;'],
            [0, '&RightDownVectorBar;'],
            [0, '&DownLeftVectorBar;'],
            [0, '&DownRightVectorBar;'],
            [0, '&LeftUpVectorBar;'],
            [0, '&LeftDownVectorBar;'],
            [0, '&LeftTeeVector;'],
            [0, '&RightTeeVector;'],
            [0, '&RightUpTeeVector;'],
            [0, '&RightDownTeeVector;'],
            [0, '&DownLeftTeeVector;'],
            [0, '&DownRightTeeVector;'],
            [0, '&LeftUpTeeVector;'],
            [0, '&LeftDownTeeVector;'],
            [0, '&lHar;'],
            [0, '&uHar;'],
            [0, '&rHar;'],
            [0, '&dHar;'],
            [0, '&luruhar;'],
            [0, '&ldrdhar;'],
            [0, '&ruluhar;'],
            [0, '&rdldhar;'],
            [0, '&lharul;'],
            [0, '&llhard;'],
            [0, '&rharul;'],
            [0, '&lrhard;'],
            [0, '&udhar;'],
            [0, '&duhar;'],
            [0, '&RoundImplies;'],
            [0, '&erarr;'],
            [0, '&simrarr;'],
            [0, '&larrsim;'],
            [0, '&rarrsim;'],
            [0, '&rarrap;'],
            [0, '&ltlarr;'],
            [1, '&gtrarr;'],
            [0, '&subrarr;'],
            [1, '&suplarr;'],
            [0, '&lfisht;'],
            [0, '&rfisht;'],
            [0, '&ufisht;'],
            [0, '&dfisht;'],
            [5, '&lopar;'],
            [0, '&ropar;'],
            [4, '&lbrke;'],
            [0, '&rbrke;'],
            [0, '&lbrkslu;'],
            [0, '&rbrksld;'],
            [0, '&lbrksld;'],
            [0, '&rbrkslu;'],
            [0, '&langd;'],
            [0, '&rangd;'],
            [0, '&lparlt;'],
            [0, '&rpargt;'],
            [0, '&gtlPar;'],
            [0, '&ltrPar;'],
            [3, '&vzigzag;'],
            [1, '&vangrt;'],
            [0, '&angrtvbd;'],
            [6, '&ange;'],
            [0, '&range;'],
            [0, '&dwangle;'],
            [0, '&uwangle;'],
            [0, '&angmsdaa;'],
            [0, '&angmsdab;'],
            [0, '&angmsdac;'],
            [0, '&angmsdad;'],
            [0, '&angmsdae;'],
            [0, '&angmsdaf;'],
            [0, '&angmsdag;'],
            [0, '&angmsdah;'],
            [0, '&bemptyv;'],
            [0, '&demptyv;'],
            [0, '&cemptyv;'],
            [0, '&raemptyv;'],
            [0, '&laemptyv;'],
            [0, '&ohbar;'],
            [0, '&omid;'],
            [0, '&opar;'],
            [1, '&operp;'],
            [1, '&olcross;'],
            [0, '&odsold;'],
            [1, '&olcir;'],
            [0, '&ofcir;'],
            [0, '&olt;'],
            [0, '&ogt;'],
            [0, '&cirscir;'],
            [0, '&cirE;'],
            [0, '&solb;'],
            [0, '&bsolb;'],
            [3, '&boxbox;'],
            [3, '&trisb;'],
            [0, '&rtriltri;'],
            [0, { v: '&LeftTriangleBar;', n: 824, o: '&NotLeftTriangleBar;' }],
            [
              0,
              { v: '&RightTriangleBar;', n: 824, o: '&NotRightTriangleBar;' },
            ],
            [11, '&iinfin;'],
            [0, '&infintie;'],
            [0, '&nvinfin;'],
            [4, '&eparsl;'],
            [0, '&smeparsl;'],
            [0, '&eqvparsl;'],
            [5, '&blacklozenge;'],
            [8, '&RuleDelayed;'],
            [1, '&dsol;'],
            [9, '&bigodot;'],
            [0, '&bigoplus;'],
            [0, '&bigotimes;'],
            [1, '&biguplus;'],
            [1, '&bigsqcup;'],
            [5, '&iiiint;'],
            [0, '&fpartint;'],
            [2, '&cirfnint;'],
            [0, '&awint;'],
            [0, '&rppolint;'],
            [0, '&scpolint;'],
            [0, '&npolint;'],
            [0, '&pointint;'],
            [0, '&quatint;'],
            [0, '&intlarhk;'],
            [10, '&pluscir;'],
            [0, '&plusacir;'],
            [0, '&simplus;'],
            [0, '&plusdu;'],
            [0, '&plussim;'],
            [0, '&plustwo;'],
            [1, '&mcomma;'],
            [0, '&minusdu;'],
            [2, '&loplus;'],
            [0, '&roplus;'],
            [0, '&Cross;'],
            [0, '&timesd;'],
            [0, '&timesbar;'],
            [1, '&smashp;'],
            [0, '&lotimes;'],
            [0, '&rotimes;'],
            [0, '&otimesas;'],
            [0, '&Otimes;'],
            [0, '&odiv;'],
            [0, '&triplus;'],
            [0, '&triminus;'],
            [0, '&tritime;'],
            [0, '&intprod;'],
            [2, '&amalg;'],
            [0, '&capdot;'],
            [1, '&ncup;'],
            [0, '&ncap;'],
            [0, '&capand;'],
            [0, '&cupor;'],
            [0, '&cupcap;'],
            [0, '&capcup;'],
            [0, '&cupbrcap;'],
            [0, '&capbrcup;'],
            [0, '&cupcup;'],
            [0, '&capcap;'],
            [0, '&ccups;'],
            [0, '&ccaps;'],
            [2, '&ccupssm;'],
            [2, '&And;'],
            [0, '&Or;'],
            [0, '&andand;'],
            [0, '&oror;'],
            [0, '&orslope;'],
            [0, '&andslope;'],
            [1, '&andv;'],
            [0, '&orv;'],
            [0, '&andd;'],
            [0, '&ord;'],
            [1, '&wedbar;'],
            [6, '&sdote;'],
            [3, '&simdot;'],
            [2, { v: '&congdot;', n: 824, o: '&ncongdot;' }],
            [0, '&easter;'],
            [0, '&apacir;'],
            [0, { v: '&apE;', n: 824, o: '&napE;' }],
            [0, '&eplus;'],
            [0, '&pluse;'],
            [0, '&Esim;'],
            [0, '&Colone;'],
            [0, '&Equal;'],
            [1, '&ddotseq;'],
            [0, '&equivDD;'],
            [0, '&ltcir;'],
            [0, '&gtcir;'],
            [0, '&ltquest;'],
            [0, '&gtquest;'],
            [0, { v: '&leqslant;', n: 824, o: '&nleqslant;' }],
            [0, { v: '&geqslant;', n: 824, o: '&ngeqslant;' }],
            [0, '&lesdot;'],
            [0, '&gesdot;'],
            [0, '&lesdoto;'],
            [0, '&gesdoto;'],
            [0, '&lesdotor;'],
            [0, '&gesdotol;'],
            [0, '&lap;'],
            [0, '&gap;'],
            [0, '&lne;'],
            [0, '&gne;'],
            [0, '&lnap;'],
            [0, '&gnap;'],
            [0, '&lEg;'],
            [0, '&gEl;'],
            [0, '&lsime;'],
            [0, '&gsime;'],
            [0, '&lsimg;'],
            [0, '&gsiml;'],
            [0, '&lgE;'],
            [0, '&glE;'],
            [0, '&lesges;'],
            [0, '&gesles;'],
            [0, '&els;'],
            [0, '&egs;'],
            [0, '&elsdot;'],
            [0, '&egsdot;'],
            [0, '&el;'],
            [0, '&eg;'],
            [2, '&siml;'],
            [0, '&simg;'],
            [0, '&simlE;'],
            [0, '&simgE;'],
            [0, { v: '&LessLess;', n: 824, o: '&NotNestedLessLess;' }],
            [
              0,
              { v: '&GreaterGreater;', n: 824, o: '&NotNestedGreaterGreater;' },
            ],
            [1, '&glj;'],
            [0, '&gla;'],
            [0, '&ltcc;'],
            [0, '&gtcc;'],
            [0, '&lescc;'],
            [0, '&gescc;'],
            [0, '&smt;'],
            [0, '&lat;'],
            [0, { v: '&smte;', n: 65024, o: '&smtes;' }],
            [0, { v: '&late;', n: 65024, o: '&lates;' }],
            [0, '&bumpE;'],
            [0, { v: '&PrecedesEqual;', n: 824, o: '&NotPrecedesEqual;' }],
            [0, { v: '&sce;', n: 824, o: '&NotSucceedsEqual;' }],
            [2, '&prE;'],
            [0, '&scE;'],
            [0, '&precneqq;'],
            [0, '&scnE;'],
            [0, '&prap;'],
            [0, '&scap;'],
            [0, '&precnapprox;'],
            [0, '&scnap;'],
            [0, '&Pr;'],
            [0, '&Sc;'],
            [0, '&subdot;'],
            [0, '&supdot;'],
            [0, '&subplus;'],
            [0, '&supplus;'],
            [0, '&submult;'],
            [0, '&supmult;'],
            [0, '&subedot;'],
            [0, '&supedot;'],
            [0, { v: '&subE;', n: 824, o: '&nsubE;' }],
            [0, { v: '&supE;', n: 824, o: '&nsupE;' }],
            [0, '&subsim;'],
            [0, '&supsim;'],
            [2, { v: '&subnE;', n: 65024, o: '&varsubsetneqq;' }],
            [0, { v: '&supnE;', n: 65024, o: '&varsupsetneqq;' }],
            [2, '&csub;'],
            [0, '&csup;'],
            [0, '&csube;'],
            [0, '&csupe;'],
            [0, '&subsup;'],
            [0, '&supsub;'],
            [0, '&subsub;'],
            [0, '&supsup;'],
            [0, '&suphsub;'],
            [0, '&supdsub;'],
            [0, '&forkv;'],
            [0, '&topfork;'],
            [0, '&mlcp;'],
            [8, '&Dashv;'],
            [1, '&Vdashl;'],
            [0, '&Barv;'],
            [0, '&vBar;'],
            [0, '&vBarv;'],
            [1, '&Vbar;'],
            [0, '&Not;'],
            [0, '&bNot;'],
            [0, '&rnmid;'],
            [0, '&cirmid;'],
            [0, '&midcir;'],
            [0, '&topcir;'],
            [0, '&nhpar;'],
            [0, '&parsim;'],
            [9, { v: '&parsl;', n: 8421, o: '&nparsl;' }],
            [
              44343,
              {
                n: new Map(
                  er([
                    [56476, '&Ascr;'],
                    [1, '&Cscr;'],
                    [0, '&Dscr;'],
                    [2, '&Gscr;'],
                    [2, '&Jscr;'],
                    [0, '&Kscr;'],
                    [2, '&Nscr;'],
                    [0, '&Oscr;'],
                    [0, '&Pscr;'],
                    [0, '&Qscr;'],
                    [1, '&Sscr;'],
                    [0, '&Tscr;'],
                    [0, '&Uscr;'],
                    [0, '&Vscr;'],
                    [0, '&Wscr;'],
                    [0, '&Xscr;'],
                    [0, '&Yscr;'],
                    [0, '&Zscr;'],
                    [0, '&ascr;'],
                    [0, '&bscr;'],
                    [0, '&cscr;'],
                    [0, '&dscr;'],
                    [1, '&fscr;'],
                    [1, '&hscr;'],
                    [0, '&iscr;'],
                    [0, '&jscr;'],
                    [0, '&kscr;'],
                    [0, '&lscr;'],
                    [0, '&mscr;'],
                    [0, '&nscr;'],
                    [1, '&pscr;'],
                    [0, '&qscr;'],
                    [0, '&rscr;'],
                    [0, '&sscr;'],
                    [0, '&tscr;'],
                    [0, '&uscr;'],
                    [0, '&vscr;'],
                    [0, '&wscr;'],
                    [0, '&xscr;'],
                    [0, '&yscr;'],
                    [0, '&zscr;'],
                    [52, '&Afr;'],
                    [0, '&Bfr;'],
                    [1, '&Dfr;'],
                    [0, '&Efr;'],
                    [0, '&Ffr;'],
                    [0, '&Gfr;'],
                    [2, '&Jfr;'],
                    [0, '&Kfr;'],
                    [0, '&Lfr;'],
                    [0, '&Mfr;'],
                    [0, '&Nfr;'],
                    [0, '&Ofr;'],
                    [0, '&Pfr;'],
                    [0, '&Qfr;'],
                    [1, '&Sfr;'],
                    [0, '&Tfr;'],
                    [0, '&Ufr;'],
                    [0, '&Vfr;'],
                    [0, '&Wfr;'],
                    [0, '&Xfr;'],
                    [0, '&Yfr;'],
                    [1, '&afr;'],
                    [0, '&bfr;'],
                    [0, '&cfr;'],
                    [0, '&dfr;'],
                    [0, '&efr;'],
                    [0, '&ffr;'],
                    [0, '&gfr;'],
                    [0, '&hfr;'],
                    [0, '&ifr;'],
                    [0, '&jfr;'],
                    [0, '&kfr;'],
                    [0, '&lfr;'],
                    [0, '&mfr;'],
                    [0, '&nfr;'],
                    [0, '&ofr;'],
                    [0, '&pfr;'],
                    [0, '&qfr;'],
                    [0, '&rfr;'],
                    [0, '&sfr;'],
                    [0, '&tfr;'],
                    [0, '&ufr;'],
                    [0, '&vfr;'],
                    [0, '&wfr;'],
                    [0, '&xfr;'],
                    [0, '&yfr;'],
                    [0, '&zfr;'],
                    [0, '&Aopf;'],
                    [0, '&Bopf;'],
                    [1, '&Dopf;'],
                    [0, '&Eopf;'],
                    [0, '&Fopf;'],
                    [0, '&Gopf;'],
                    [1, '&Iopf;'],
                    [0, '&Jopf;'],
                    [0, '&Kopf;'],
                    [0, '&Lopf;'],
                    [0, '&Mopf;'],
                    [1, '&Oopf;'],
                    [3, '&Sopf;'],
                    [0, '&Topf;'],
                    [0, '&Uopf;'],
                    [0, '&Vopf;'],
                    [0, '&Wopf;'],
                    [0, '&Xopf;'],
                    [0, '&Yopf;'],
                    [1, '&aopf;'],
                    [0, '&bopf;'],
                    [0, '&copf;'],
                    [0, '&dopf;'],
                    [0, '&eopf;'],
                    [0, '&fopf;'],
                    [0, '&gopf;'],
                    [0, '&hopf;'],
                    [0, '&iopf;'],
                    [0, '&jopf;'],
                    [0, '&kopf;'],
                    [0, '&lopf;'],
                    [0, '&mopf;'],
                    [0, '&nopf;'],
                    [0, '&oopf;'],
                    [0, '&popf;'],
                    [0, '&qopf;'],
                    [0, '&ropf;'],
                    [0, '&sopf;'],
                    [0, '&topf;'],
                    [0, '&uopf;'],
                    [0, '&vopf;'],
                    [0, '&wopf;'],
                    [0, '&xopf;'],
                    [0, '&yopf;'],
                    [0, '&zopf;'],
                  ])
                ),
              },
            ],
            [8906, '&fflig;'],
            [0, '&filig;'],
            [0, '&fllig;'],
            [0, '&ffilig;'],
            [0, '&ffllig;'],
          ])
        )
      const tr = /["&'<>$\x80-\uFFFF]/g,
        rr = new Map([
          [34, '&quot;'],
          [38, '&amp;'],
          [39, '&apos;'],
          [60, '&lt;'],
          [62, '&gt;'],
        ]),
        nr =
          null != String.prototype.codePointAt
            ? (e, t) => e.codePointAt(t)
            : (e, t) =>
                55296 == (64512 & e.charCodeAt(t))
                  ? 1024 * (e.charCodeAt(t) - 55296) +
                    e.charCodeAt(t + 1) -
                    56320 +
                    65536
                  : e.charCodeAt(t)
      function sr(e) {
        let t,
          r = '',
          n = 0
        for (; null !== (t = tr.exec(e)); ) {
          const s = t.index,
            a = e.charCodeAt(s),
            i = rr.get(a)
          void 0 !== i
            ? ((r += e.substring(n, s) + i), (n = s + 1))
            : ((r += `${e.substring(n, s)}&#x${nr(e, s).toString(16)};`),
              (n = tr.lastIndex += Number(55296 == (64512 & a))))
        }
        return r + e.substr(n)
      }
      function ar(e, t) {
        return function (r) {
          let n,
            s = 0,
            a = ''
          for (; (n = e.exec(r)); )
            s !== n.index && (a += r.substring(s, n.index)),
              (a += t.get(n[0].charCodeAt(0))),
              (s = n.index + 1)
          return a + r.substring(s)
        }
      }
      ar(/[&<>'"]/g, rr)
      const ir = ar(
          /["&\u00A0]/g,
          new Map([
            [34, '&quot;'],
            [38, '&amp;'],
            [160, '&nbsp;'],
          ])
        ),
        or = ar(
          /[&<>\u00A0]/g,
          new Map([
            [38, '&amp;'],
            [60, '&lt;'],
            [62, '&gt;'],
            [160, '&nbsp;'],
          ])
        )
      var cr, lr
      !(function (e) {
        ;(e[(e.XML = 0)] = 'XML'), (e[(e.HTML = 1)] = 'HTML')
      })(cr || (cr = {})),
        (function (e) {
          ;(e[(e.UTF8 = 0)] = 'UTF8'),
            (e[(e.ASCII = 1)] = 'ASCII'),
            (e[(e.Extensive = 2)] = 'Extensive'),
            (e[(e.Attribute = 3)] = 'Attribute'),
            (e[(e.Text = 4)] = 'Text')
        })(lr || (lr = {}))
      const hr = new Map(
          [
            'altGlyph',
            'altGlyphDef',
            'altGlyphItem',
            'animateColor',
            'animateMotion',
            'animateTransform',
            'clipPath',
            'feBlend',
            'feColorMatrix',
            'feComponentTransfer',
            'feComposite',
            'feConvolveMatrix',
            'feDiffuseLighting',
            'feDisplacementMap',
            'feDistantLight',
            'feDropShadow',
            'feFlood',
            'feFuncA',
            'feFuncB',
            'feFuncG',
            'feFuncR',
            'feGaussianBlur',
            'feImage',
            'feMerge',
            'feMergeNode',
            'feMorphology',
            'feOffset',
            'fePointLight',
            'feSpecularLighting',
            'feSpotLight',
            'feTile',
            'feTurbulence',
            'foreignObject',
            'glyphRef',
            'linearGradient',
            'radialGradient',
            'textPath',
          ].map((e) => [e.toLowerCase(), e])
        ),
        ur = new Map(
          [
            'definitionURL',
            'attributeName',
            'attributeType',
            'baseFrequency',
            'baseProfile',
            'calcMode',
            'clipPathUnits',
            'diffuseConstant',
            'edgeMode',
            'filterUnits',
            'glyphRef',
            'gradientTransform',
            'gradientUnits',
            'kernelMatrix',
            'kernelUnitLength',
            'keyPoints',
            'keySplines',
            'keyTimes',
            'lengthAdjust',
            'limitingConeAngle',
            'markerHeight',
            'markerUnits',
            'markerWidth',
            'maskContentUnits',
            'maskUnits',
            'numOctaves',
            'pathLength',
            'patternContentUnits',
            'patternTransform',
            'patternUnits',
            'pointsAtX',
            'pointsAtY',
            'pointsAtZ',
            'preserveAlpha',
            'preserveAspectRatio',
            'primitiveUnits',
            'refX',
            'refY',
            'repeatCount',
            'repeatDur',
            'requiredExtensions',
            'requiredFeatures',
            'specularConstant',
            'specularExponent',
            'spreadMethod',
            'startOffset',
            'stdDeviation',
            'stitchTiles',
            'surfaceScale',
            'systemLanguage',
            'tableValues',
            'targetX',
            'targetY',
            'textLength',
            'viewBox',
            'viewTarget',
            'xChannelSelector',
            'yChannelSelector',
            'zoomAndPan',
          ].map((e) => [e.toLowerCase(), e])
        ),
        dr = new Set([
          'style',
          'script',
          'xmp',
          'iframe',
          'noembed',
          'noframes',
          'plaintext',
          'noscript',
        ])
      function pr(e) {
        return e.replace(/"/g, '&quot;')
      }
      const Er = new Set([
        'area',
        'base',
        'basefont',
        'br',
        'col',
        'command',
        'embed',
        'frame',
        'hr',
        'img',
        'input',
        'isindex',
        'keygen',
        'link',
        'meta',
        'param',
        'source',
        'track',
        'wbr',
      ])
      function mr(e, t = {}) {
        const r = 'length' in e ? e : [e]
        let n = ''
        for (let e = 0; e < r.length; e++) n += fr(r[e], t)
        return n
      }
      const Tr = mr
      function fr(e, t) {
        switch (e.type) {
          case N:
            return mr(e.children, t)
          case O:
          case I:
            return `<${e.data}>`
          case b:
            return `\x3c!--${e.data}--\x3e`
          case L:
            return (function (e) {
              return `<![CDATA[${e.children[0].data}]]>`
            })(e)
          case S:
          case D:
          case R:
            return (function (e, t) {
              var r
              'foreign' === t.xmlMode &&
                ((e.name =
                  null !== (r = hr.get(e.name)) && void 0 !== r ? r : e.name),
                e.parent &&
                  Ar.has(e.parent.name) &&
                  (t = { ...t, xmlMode: !1 })),
                !t.xmlMode &&
                  gr.has(e.name) &&
                  (t = { ...t, xmlMode: 'foreign' })
              let n = `<${e.name}`
              const s = (function (e, t) {
                var r
                if (!e) return
                const n =
                  !1 ===
                  (null !== (r = t.encodeEntities) && void 0 !== r
                    ? r
                    : t.decodeEntities)
                    ? pr
                    : t.xmlMode || 'utf8' !== t.encodeEntities
                    ? sr
                    : ir
                return Object.keys(e)
                  .map((r) => {
                    var s, a
                    const i = null !== (s = e[r]) && void 0 !== s ? s : ''
                    return (
                      'foreign' === t.xmlMode &&
                        (r = null !== (a = ur.get(r)) && void 0 !== a ? a : r),
                      t.emptyAttrs || t.xmlMode || '' !== i
                        ? `${r}="${n(i)}"`
                        : r
                    )
                  })
                  .join(' ')
              })(e.attribs, t)
              return (
                s && (n += ` ${s}`),
                0 === e.children.length &&
                (t.xmlMode
                  ? !1 !== t.selfClosingTags
                  : t.selfClosingTags && Er.has(e.name))
                  ? (t.xmlMode || (n += ' '), (n += '/>'))
                  : ((n += '>'),
                    e.children.length > 0 && (n += mr(e.children, t)),
                    (!t.xmlMode && Er.has(e.name)) || (n += `</${e.name}>`)),
                n
              )
            })(e, t)
          case C:
            return (function (e, t) {
              var r
              let n = e.data || ''
              return (
                !1 ===
                  (null !== (r = t.encodeEntities) && void 0 !== r
                    ? r
                    : t.decodeEntities) ||
                  (!t.xmlMode && e.parent && dr.has(e.parent.name)) ||
                  (n =
                    t.xmlMode || 'utf8' !== t.encodeEntities ? sr(n) : or(n)),
                n
              )
            })(e, t)
        }
      }
      const Ar = new Set([
          'mi',
          'mo',
          'mn',
          'ms',
          'mtext',
          'annotation-xml',
          'foreignObject',
          'desc',
          'title',
        ]),
        gr = new Set(['svg', 'math'])
      function _r(e, t) {
        return Tr(e, t)
      }
      function Nr(e, t) {
        return Ft(e) ? e.children.map((e) => _r(e, t)).join('') : ''
      }
      function Cr(e) {
        return Array.isArray(e)
          ? e.map(Cr).join('')
          : wt(e)
          ? 'br' === e.name
            ? '\n'
            : Cr(e.children)
          : xt(e)
          ? Cr(e.children)
          : Bt(e)
          ? e.data
          : ''
      }
      function Ir(e) {
        return Array.isArray(e)
          ? e.map(Ir).join('')
          : Ft(e) && !Ut(e)
          ? Ir(e.children)
          : Bt(e)
          ? e.data
          : ''
      }
      function br(e) {
        return Array.isArray(e)
          ? e.map(br).join('')
          : Ft(e) && (e.type === A.Tag || xt(e))
          ? br(e.children)
          : Bt(e)
          ? e.data
          : ''
      }
      function Sr(e) {
        return Ft(e) ? e.children : []
      }
      function Dr(e) {
        return e.parent || null
      }
      function Rr(e) {
        const t = Dr(e)
        if (null != t) return Sr(t)
        const r = [e]
        let { prev: n, next: s } = e
        for (; null != n; ) r.unshift(n), ({ prev: n } = n)
        for (; null != s; ) r.push(s), ({ next: s } = s)
        return r
      }
      function Lr(e, t) {
        var r
        return null === (r = e.attribs) || void 0 === r ? void 0 : r[t]
      }
      function Or(e, t) {
        return (
          null != e.attribs &&
          Object.prototype.hasOwnProperty.call(e.attribs, t) &&
          null != e.attribs[t]
        )
      }
      function yr(e) {
        return e.name
      }
      function kr(e) {
        let { next: t } = e
        for (; null !== t && !wt(t); ) ({ next: t } = t)
        return t
      }
      function Mr(e) {
        let { prev: t } = e
        for (; null !== t && !wt(t); ) ({ prev: t } = t)
        return t
      }
      function Pr(e) {
        if (
          (e.prev && (e.prev.next = e.next),
          e.next && (e.next.prev = e.prev),
          e.parent)
        ) {
          const t = e.parent.children,
            r = t.lastIndexOf(e)
          r >= 0 && t.splice(r, 1)
        }
        ;(e.next = null), (e.prev = null), (e.parent = null)
      }
      function vr(e, t) {
        const r = (t.prev = e.prev)
        r && (r.next = t)
        const n = (t.next = e.next)
        n && (n.prev = t)
        const s = (t.parent = e.parent)
        if (s) {
          const r = s.children
          ;(r[r.lastIndexOf(e)] = t), (e.parent = null)
        }
      }
      function wr(e, t) {
        if ((Pr(t), (t.next = null), (t.parent = e), e.children.push(t) > 1)) {
          const r = e.children[e.children.length - 2]
          ;(r.next = t), (t.prev = r)
        } else t.prev = null
      }
      function xr(e, t) {
        Pr(t)
        const { parent: r } = e,
          n = e.next
        if (((t.next = n), (t.prev = e), (e.next = t), (t.parent = r), n)) {
          if (((n.prev = t), r)) {
            const e = r.children
            e.splice(e.lastIndexOf(n), 0, t)
          }
        } else r && r.children.push(t)
      }
      function Br(e, t) {
        if (
          (Pr(t), (t.parent = e), (t.prev = null), 1 !== e.children.unshift(t))
        ) {
          const r = e.children[1]
          ;(r.prev = t), (t.next = r)
        } else t.next = null
      }
      function Ur(e, t) {
        Pr(t)
        const { parent: r } = e
        if (r) {
          const n = r.children
          n.splice(n.indexOf(e), 0, t)
        }
        e.prev && (e.prev.next = t),
          (t.parent = r),
          (t.prev = e.prev),
          (t.next = e),
          (e.prev = t)
      }
      function Hr(e, t, r = !0, n = 1 / 0) {
        return Fr(e, Array.isArray(t) ? t : [t], r, n)
      }
      function Fr(e, t, r, n) {
        const s = [],
          a = [t],
          i = [0]
        for (;;) {
          if (i[0] >= a[0].length) {
            if (1 === i.length) return s
            a.shift(), i.shift()
            continue
          }
          const t = a[0][i[0]++]
          if (e(t) && (s.push(t), --n <= 0)) return s
          r &&
            Ft(t) &&
            t.children.length > 0 &&
            (i.unshift(0), a.unshift(t.children))
        }
      }
      function qr(e, t) {
        return t.find(e)
      }
      function Gr(e, t, r = !0) {
        let n = null
        for (let s = 0; s < t.length && !n; s++) {
          const a = t[s]
          wt(a) &&
            (e(a)
              ? (n = a)
              : r && a.children.length > 0 && (n = Gr(e, a.children, !0)))
        }
        return n
      }
      function Vr(e, t) {
        return t.some((t) => wt(t) && (e(t) || Vr(e, t.children)))
      }
      function Yr(e, t) {
        const r = [],
          n = [t],
          s = [0]
        for (;;) {
          if (s[0] >= n[0].length) {
            if (1 === n.length) return r
            n.shift(), s.shift()
            continue
          }
          const t = n[0][s[0]++]
          wt(t) &&
            (e(t) && r.push(t),
            t.children.length > 0 && (s.unshift(0), n.unshift(t.children)))
        }
      }
      const Qr = {
        tag_name: (e) =>
          'function' == typeof e
            ? (t) => wt(t) && e(t.name)
            : '*' === e
            ? wt
            : (t) => wt(t) && t.name === e,
        tag_type: (e) =>
          'function' == typeof e ? (t) => e(t.type) : (t) => t.type === e,
        tag_contains: (e) =>
          'function' == typeof e
            ? (t) => Bt(t) && e(t.data)
            : (t) => Bt(t) && t.data === e,
      }
      function Wr(e, t) {
        return 'function' == typeof t
          ? (r) => wt(r) && t(r.attribs[e])
          : (r) => wt(r) && r.attribs[e] === t
      }
      function Xr(e, t) {
        return (r) => e(r) || t(r)
      }
      function jr(e) {
        const t = Object.keys(e).map((t) => {
          const r = e[t]
          return Object.prototype.hasOwnProperty.call(Qr, t)
            ? Qr[t](r)
            : Wr(t, r)
        })
        return 0 === t.length ? null : t.reduce(Xr)
      }
      function Kr(e, t) {
        const r = jr(e)
        return !r || r(t)
      }
      function zr(e, t, r, n = 1 / 0) {
        const s = jr(e)
        return s ? Hr(s, t, r, n) : []
      }
      function $r(e, t, r = !0) {
        return Array.isArray(t) || (t = [t]), Gr(Wr('id', e), t, r)
      }
      function Zr(e, t, r = !0, n = 1 / 0) {
        return Hr(Qr.tag_name(e), t, r, n)
      }
      function Jr(e, t, r = !0, n = 1 / 0) {
        return Hr(Qr.tag_type(e), t, r, n)
      }
      function en(e) {
        let t = e.length
        for (; --t >= 0; ) {
          const r = e[t]
          if (t > 0 && e.lastIndexOf(r, t - 1) >= 0) e.splice(t, 1)
          else
            for (let n = r.parent; n; n = n.parent)
              if (e.includes(n)) {
                e.splice(t, 1)
                break
              }
        }
        return e
      }
      var tn
      function rn(e, t) {
        const r = [],
          n = []
        if (e === t) return 0
        let s = Ft(e) ? e : e.parent
        for (; s; ) r.unshift(s), (s = s.parent)
        for (s = Ft(t) ? t : t.parent; s; ) n.unshift(s), (s = s.parent)
        const a = Math.min(r.length, n.length)
        let i = 0
        for (; i < a && r[i] === n[i]; ) i++
        if (0 === i) return tn.DISCONNECTED
        const o = r[i - 1],
          c = o.children,
          l = r[i],
          h = n[i]
        return c.indexOf(l) > c.indexOf(h)
          ? o === t
            ? tn.FOLLOWING | tn.CONTAINED_BY
            : tn.FOLLOWING
          : o === e
          ? tn.PRECEDING | tn.CONTAINS
          : tn.PRECEDING
      }
      function nn(e) {
        return (
          (e = e.filter((e, t, r) => !r.includes(e, t + 1))).sort((e, t) => {
            const r = rn(e, t)
            return r & tn.PRECEDING ? -1 : r & tn.FOLLOWING ? 1 : 0
          }),
          e
        )
      }
      function sn(e) {
        const t = ln(dn, e)
        return t
          ? 'feed' === t.name
            ? (function (e) {
                var t
                const r = e.children,
                  n = {
                    type: 'atom',
                    items: Zr('entry', r).map((e) => {
                      var t
                      const { children: r } = e,
                        n = { media: cn(r) }
                      un(n, 'id', 'id', r), un(n, 'title', 'title', r)
                      const s =
                        null === (t = ln('link', r)) || void 0 === t
                          ? void 0
                          : t.attribs.href
                      s && (n.link = s)
                      const a = hn('summary', r) || hn('content', r)
                      a && (n.description = a)
                      const i = hn('updated', r)
                      return i && (n.pubDate = new Date(i)), n
                    }),
                  }
                un(n, 'id', 'id', r), un(n, 'title', 'title', r)
                const s =
                  null === (t = ln('link', r)) || void 0 === t
                    ? void 0
                    : t.attribs.href
                s && (n.link = s), un(n, 'description', 'subtitle', r)
                const a = hn('updated', r)
                return (
                  a && (n.updated = new Date(a)),
                  un(n, 'author', 'email', r, !0),
                  n
                )
              })(t)
            : (function (e) {
                var t, r
                const n =
                    null !==
                      (r =
                        null === (t = ln('channel', e.children)) || void 0 === t
                          ? void 0
                          : t.children) && void 0 !== r
                      ? r
                      : [],
                  s = {
                    type: e.name.substr(0, 3),
                    id: '',
                    items: Zr('item', e.children).map((e) => {
                      const { children: t } = e,
                        r = { media: cn(t) }
                      un(r, 'id', 'guid', t),
                        un(r, 'title', 'title', t),
                        un(r, 'link', 'link', t),
                        un(r, 'description', 'description', t)
                      const n = hn('pubDate', t) || hn('dc:date', t)
                      return n && (r.pubDate = new Date(n)), r
                    }),
                  }
                un(s, 'title', 'title', n),
                  un(s, 'link', 'link', n),
                  un(s, 'description', 'description', n)
                const a = hn('lastBuildDate', n)
                return (
                  a && (s.updated = new Date(a)),
                  un(s, 'author', 'managingEditor', n, !0),
                  s
                )
              })(t)
          : null
      }
      !(function (e) {
        ;(e[(e.DISCONNECTED = 1)] = 'DISCONNECTED'),
          (e[(e.PRECEDING = 2)] = 'PRECEDING'),
          (e[(e.FOLLOWING = 4)] = 'FOLLOWING'),
          (e[(e.CONTAINS = 8)] = 'CONTAINS'),
          (e[(e.CONTAINED_BY = 16)] = 'CONTAINED_BY')
      })(tn || (tn = {}))
      const an = ['url', 'type', 'lang'],
        on = [
          'fileSize',
          'bitrate',
          'framerate',
          'samplingrate',
          'channels',
          'duration',
          'height',
          'width',
        ]
      function cn(e) {
        return Zr('media:content', e).map((e) => {
          const { attribs: t } = e,
            r = { medium: t.medium, isDefault: !!t.isDefault }
          for (const e of an) t[e] && (r[e] = t[e])
          for (const e of on) t[e] && (r[e] = parseInt(t[e], 10))
          return t.expression && (r.expression = t.expression), r
        })
      }
      function ln(e, t) {
        return Zr(e, t, !0, 1)[0]
      }
      function hn(e, t, r = !1) {
        return Ir(Zr(e, t, r, 1)).trim()
      }
      function un(e, t, r, n, s = !1) {
        const a = hn(r, n, s)
        a && (e[t] = a)
      }
      function dn(e) {
        return 'rss' === e || 'feed' === e || 'rdf:RDF' === e
      }
      var pn = r(73)
      const En = new Map([
        [Nt.Universal, 50],
        [Nt.Tag, 30],
        [Nt.Attribute, 1],
        [Nt.Pseudo, 0],
      ])
      function mn(e) {
        return !En.has(e.type)
      }
      const Tn = new Map([
        [Ct.Exists, 10],
        [Ct.Equals, 8],
        [Ct.Not, 7],
        [Ct.Start, 6],
        [Ct.End, 6],
        [Ct.Any, 5],
      ])
      function fn(e) {
        const t = e.map(An)
        for (let r = 1; r < e.length; r++) {
          const n = t[r]
          if (!(n < 0))
            for (let s = r - 1; s >= 0 && n < t[s]; s--) {
              const r = e[s + 1]
              ;(e[s + 1] = e[s]), (e[s] = r), (t[s + 1] = t[s]), (t[s] = n)
            }
        }
      }
      function An(e) {
        var t, r
        let n = null !== (t = En.get(e.type)) && void 0 !== t ? t : -1
        return (
          e.type === Nt.Attribute
            ? ((n = null !== (r = Tn.get(e.action)) && void 0 !== r ? r : 4),
              e.action === Ct.Equals && 'id' === e.name && (n = 9),
              e.ignoreCase && (n >>= 1))
            : e.type === Nt.Pseudo &&
              (e.data
                ? 'has' === e.name || 'contains' === e.name
                  ? (n = 0)
                  : Array.isArray(e.data)
                  ? ((n = Math.min(
                      ...e.data.map((e) => Math.min(...e.map(An)))
                    )),
                    n < 0 && (n = 0))
                  : (n = 2)
                : (n = 3)),
          n
        )
      }
      const gn = /[-[\]{}()*+?.,\\^$|#\s]/g
      function _n(e) {
        return e.replace(gn, '\\$&')
      }
      const Nn = new Set([
        'accept',
        'accept-charset',
        'align',
        'alink',
        'axis',
        'bgcolor',
        'charset',
        'checked',
        'clear',
        'codetype',
        'color',
        'compact',
        'declare',
        'defer',
        'dir',
        'direction',
        'disabled',
        'enctype',
        'face',
        'frame',
        'hreflang',
        'http-equiv',
        'lang',
        'language',
        'link',
        'media',
        'method',
        'multiple',
        'nohref',
        'noresize',
        'noshade',
        'nowrap',
        'readonly',
        'rel',
        'rev',
        'rules',
        'scope',
        'scrolling',
        'selected',
        'shape',
        'target',
        'text',
        'type',
        'valign',
        'valuetype',
        'vlink',
      ])
      function Cn(e, t) {
        return 'boolean' == typeof e.ignoreCase
          ? e.ignoreCase
          : 'quirks' === e.ignoreCase
          ? !!t.quirksMode
          : !t.xmlMode && Nn.has(e.name)
      }
      const In = {
          equals(e, t, r) {
            const { adapter: n } = r,
              { name: s } = t
            let { value: a } = t
            return Cn(t, r)
              ? ((a = a.toLowerCase()),
                (t) => {
                  const r = n.getAttributeValue(t, s)
                  return (
                    null != r &&
                    r.length === a.length &&
                    r.toLowerCase() === a &&
                    e(t)
                  )
                })
              : (t) => n.getAttributeValue(t, s) === a && e(t)
          },
          hyphen(e, t, r) {
            const { adapter: n } = r,
              { name: s } = t
            let { value: a } = t
            const i = a.length
            return Cn(t, r)
              ? ((a = a.toLowerCase()),
                function (t) {
                  const r = n.getAttributeValue(t, s)
                  return (
                    null != r &&
                    (r.length === i || '-' === r.charAt(i)) &&
                    r.substr(0, i).toLowerCase() === a &&
                    e(t)
                  )
                })
              : function (t) {
                  const r = n.getAttributeValue(t, s)
                  return (
                    null != r &&
                    (r.length === i || '-' === r.charAt(i)) &&
                    r.substr(0, i) === a &&
                    e(t)
                  )
                }
          },
          element(e, t, r) {
            const { adapter: n } = r,
              { name: s, value: a } = t
            if (/\s/.test(a)) return pn.falseFunc
            const i = new RegExp(
              `(?:^|\\s)${_n(a)}(?:$|\\s)`,
              Cn(t, r) ? 'i' : ''
            )
            return function (t) {
              const r = n.getAttributeValue(t, s)
              return null != r && r.length >= a.length && i.test(r) && e(t)
            }
          },
          exists:
            (e, { name: t }, { adapter: r }) =>
            (n) =>
              r.hasAttrib(n, t) && e(n),
          start(e, t, r) {
            const { adapter: n } = r,
              { name: s } = t
            let { value: a } = t
            const i = a.length
            return 0 === i
              ? pn.falseFunc
              : Cn(t, r)
              ? ((a = a.toLowerCase()),
                (t) => {
                  const r = n.getAttributeValue(t, s)
                  return (
                    null != r &&
                    r.length >= i &&
                    r.substr(0, i).toLowerCase() === a &&
                    e(t)
                  )
                })
              : (t) => {
                  var r
                  return (
                    !!(null === (r = n.getAttributeValue(t, s)) || void 0 === r
                      ? void 0
                      : r.startsWith(a)) && e(t)
                  )
                }
          },
          end(e, t, r) {
            const { adapter: n } = r,
              { name: s } = t
            let { value: a } = t
            const i = -a.length
            return 0 === i
              ? pn.falseFunc
              : Cn(t, r)
              ? ((a = a.toLowerCase()),
                (t) => {
                  var r
                  return (
                    (null === (r = n.getAttributeValue(t, s)) || void 0 === r
                      ? void 0
                      : r.substr(i).toLowerCase()) === a && e(t)
                  )
                })
              : (t) => {
                  var r
                  return (
                    !!(null === (r = n.getAttributeValue(t, s)) || void 0 === r
                      ? void 0
                      : r.endsWith(a)) && e(t)
                  )
                }
          },
          any(e, t, r) {
            const { adapter: n } = r,
              { name: s, value: a } = t
            if ('' === a) return pn.falseFunc
            if (Cn(t, r)) {
              const t = new RegExp(_n(a), 'i')
              return function (r) {
                const i = n.getAttributeValue(r, s)
                return null != i && i.length >= a.length && t.test(i) && e(r)
              }
            }
            return (t) => {
              var r
              return (
                !!(null === (r = n.getAttributeValue(t, s)) || void 0 === r
                  ? void 0
                  : r.includes(a)) && e(t)
              )
            }
          },
          not(e, t, r) {
            const { adapter: n } = r,
              { name: s } = t
            let { value: a } = t
            return '' === a
              ? (t) => !!n.getAttributeValue(t, s) && e(t)
              : Cn(t, r)
              ? ((a = a.toLowerCase()),
                (t) => {
                  const r = n.getAttributeValue(t, s)
                  return (
                    (null == r ||
                      r.length !== a.length ||
                      r.toLowerCase() !== a) &&
                    e(t)
                  )
                })
              : (t) => n.getAttributeValue(t, s) !== a && e(t)
          },
        },
        bn = new Set([9, 10, 12, 13, 32]),
        Sn = '0'.charCodeAt(0),
        Dn = '9'.charCodeAt(0)
      function Rn(e) {
        return (function (e) {
          const t = e[0],
            r = e[1] - 1
          if (r < 0 && t <= 0) return pn.falseFunc
          if (-1 === t) return (e) => e <= r
          if (0 === t) return (e) => e === r
          if (1 === t) return r < 0 ? pn.trueFunc : (e) => e >= r
          const n = Math.abs(t),
            s = ((r % n) + n) % n
          return t > 1
            ? (e) => e >= r && e % n === s
            : (e) => e <= r && e % n === s
        })(
          (function (e) {
            if ('even' === (e = e.trim().toLowerCase())) return [2, 0]
            if ('odd' === e) return [2, 1]
            let t = 0,
              r = 0,
              n = a(),
              s = i()
            if (
              (t < e.length &&
                'n' === e.charAt(t) &&
                (t++,
                (r = n * (null != s ? s : 1)),
                o(),
                t < e.length ? ((n = a()), o(), (s = i())) : (n = s = 0)),
              null === s || t < e.length)
            )
              throw new Error(`n-th rule couldn't be parsed ('${e}')`)
            return [r, n * s]
            function a() {
              return '-' === e.charAt(t)
                ? (t++, -1)
                : ('+' === e.charAt(t) && t++, 1)
            }
            function i() {
              const r = t
              let n = 0
              for (
                ;
                t < e.length && e.charCodeAt(t) >= Sn && e.charCodeAt(t) <= Dn;

              )
                (n = 10 * n + (e.charCodeAt(t) - Sn)), t++
              return t === r ? null : n
            }
            function o() {
              for (; t < e.length && bn.has(e.charCodeAt(t)); ) t++
            }
          })(e)
        )
      }
      function Ln(e, t) {
        return (r) => {
          const n = t.getParent(r)
          return null != n && t.isTag(n) && e(r)
        }
      }
      const On = {
        contains: (e, t, { adapter: r }) =>
          function (n) {
            return e(n) && r.getText(n).includes(t)
          },
        icontains(e, t, { adapter: r }) {
          const n = t.toLowerCase()
          return function (t) {
            return e(t) && r.getText(t).toLowerCase().includes(n)
          }
        },
        'nth-child'(e, t, { adapter: r, equals: n }) {
          const s = Rn(t)
          return s === pn.falseFunc
            ? pn.falseFunc
            : s === pn.trueFunc
            ? Ln(e, r)
            : function (t) {
                const a = r.getSiblings(t)
                let i = 0
                for (let e = 0; e < a.length && !n(t, a[e]); e++)
                  r.isTag(a[e]) && i++
                return s(i) && e(t)
              }
        },
        'nth-last-child'(e, t, { adapter: r, equals: n }) {
          const s = Rn(t)
          return s === pn.falseFunc
            ? pn.falseFunc
            : s === pn.trueFunc
            ? Ln(e, r)
            : function (t) {
                const a = r.getSiblings(t)
                let i = 0
                for (let e = a.length - 1; e >= 0 && !n(t, a[e]); e--)
                  r.isTag(a[e]) && i++
                return s(i) && e(t)
              }
        },
        'nth-of-type'(e, t, { adapter: r, equals: n }) {
          const s = Rn(t)
          return s === pn.falseFunc
            ? pn.falseFunc
            : s === pn.trueFunc
            ? Ln(e, r)
            : function (t) {
                const a = r.getSiblings(t)
                let i = 0
                for (let e = 0; e < a.length; e++) {
                  const s = a[e]
                  if (n(t, s)) break
                  r.isTag(s) && r.getName(s) === r.getName(t) && i++
                }
                return s(i) && e(t)
              }
        },
        'nth-last-of-type'(e, t, { adapter: r, equals: n }) {
          const s = Rn(t)
          return s === pn.falseFunc
            ? pn.falseFunc
            : s === pn.trueFunc
            ? Ln(e, r)
            : function (t) {
                const a = r.getSiblings(t)
                let i = 0
                for (let e = a.length - 1; e >= 0; e--) {
                  const s = a[e]
                  if (n(t, s)) break
                  r.isTag(s) && r.getName(s) === r.getName(t) && i++
                }
                return s(i) && e(t)
              }
        },
        root:
          (e, t, { adapter: r }) =>
          (t) => {
            const n = r.getParent(t)
            return (null == n || !r.isTag(n)) && e(t)
          },
        scope(e, t, r, n) {
          const { equals: s } = r
          return n && 0 !== n.length
            ? 1 === n.length
              ? (t) => s(n[0], t) && e(t)
              : (t) => n.includes(t) && e(t)
            : On.root(e, t, r)
        },
        hover: yn('isHovered'),
        visited: yn('isVisited'),
        active: yn('isActive'),
      }
      function yn(e) {
        return function (t, r, { adapter: n }) {
          const s = n[e]
          return 'function' != typeof s
            ? pn.falseFunc
            : function (e) {
                return s(e) && t(e)
              }
        }
      }
      const kn = {
        empty: (e, { adapter: t }) =>
          !t.getChildren(e).some((e) => t.isTag(e) || '' !== t.getText(e)),
        'first-child'(e, { adapter: t, equals: r }) {
          if (t.prevElementSibling) return null == t.prevElementSibling(e)
          const n = t.getSiblings(e).find((e) => t.isTag(e))
          return null != n && r(e, n)
        },
        'last-child'(e, { adapter: t, equals: r }) {
          const n = t.getSiblings(e)
          for (let s = n.length - 1; s >= 0; s--) {
            if (r(e, n[s])) return !0
            if (t.isTag(n[s])) break
          }
          return !1
        },
        'first-of-type'(e, { adapter: t, equals: r }) {
          const n = t.getSiblings(e),
            s = t.getName(e)
          for (let a = 0; a < n.length; a++) {
            const i = n[a]
            if (r(e, i)) return !0
            if (t.isTag(i) && t.getName(i) === s) break
          }
          return !1
        },
        'last-of-type'(e, { adapter: t, equals: r }) {
          const n = t.getSiblings(e),
            s = t.getName(e)
          for (let a = n.length - 1; a >= 0; a--) {
            const i = n[a]
            if (r(e, i)) return !0
            if (t.isTag(i) && t.getName(i) === s) break
          }
          return !1
        },
        'only-of-type'(e, { adapter: t, equals: r }) {
          const n = t.getName(e)
          return t
            .getSiblings(e)
            .every((s) => r(e, s) || !t.isTag(s) || t.getName(s) !== n)
        },
        'only-child': (e, { adapter: t, equals: r }) =>
          t.getSiblings(e).every((n) => r(e, n) || !t.isTag(n)),
      }
      function Mn(e, t, r, n) {
        if (null === r) {
          if (e.length > n)
            throw new Error(`Pseudo-class :${t} requires an argument`)
        } else if (e.length === n)
          throw new Error(`Pseudo-class :${t} doesn't have any arguments`)
      }
      const Pn = {
          'any-link': ':is(a, area, link)[href]',
          link: ':any-link:not(:visited)',
          disabled:
            ':is(\n        :is(button, input, select, textarea, optgroup, option)[disabled],\n        optgroup[disabled] > option,\n        fieldset[disabled]:not(fieldset[disabled] legend:first-of-type *)\n    )',
          enabled: ':not(:disabled)',
          checked:
            ':is(:is(input[type=radio], input[type=checkbox])[checked], option:selected)',
          required: ':is(input, select, textarea)[required]',
          optional: ':is(input, select, textarea):not([required])',
          selected:
            'option:is([selected], select:not([multiple]):not(:has(> option[selected])) > :first-of-type)',
          checkbox: '[type=checkbox]',
          file: '[type=file]',
          password: '[type=password]',
          radio: '[type=radio]',
          reset: '[type=reset]',
          image: '[type=image]',
          submit: '[type=submit]',
          parent: ':not(:empty)',
          header: ':is(h1, h2, h3, h4, h5, h6)',
          button: ':is(button, input[type=button])',
          input: ':is(input, textarea, select, button)',
          text: "input:is(:not([type!='']), [type=text])",
        },
        vn = {}
      function wn(e, t) {
        return e === pn.falseFunc ? pn.falseFunc : (r) => t.isTag(r) && e(r)
      }
      function xn(e, t) {
        const r = t.getSiblings(e)
        if (r.length <= 1) return []
        const n = r.indexOf(e)
        return n < 0 || n === r.length - 1 ? [] : r.slice(n + 1).filter(t.isTag)
      }
      function Bn(e) {
        return {
          xmlMode: !!e.xmlMode,
          lowerCaseAttributeNames: !!e.lowerCaseAttributeNames,
          lowerCaseTags: !!e.lowerCaseTags,
          quirksMode: !!e.quirksMode,
          cacheResults: !!e.cacheResults,
          pseudos: e.pseudos,
          adapter: e.adapter,
          equals: e.equals,
        }
      }
      const Un = (e, t, r, n, s) => {
          const a = s(t, Bn(r), n)
          return a === pn.trueFunc
            ? e
            : a === pn.falseFunc
            ? pn.falseFunc
            : (t) => a(t) && e(t)
        },
        Hn = {
          is: Un,
          matches: Un,
          where: Un,
          not(e, t, r, n, s) {
            const a = s(t, Bn(r), n)
            return a === pn.falseFunc
              ? e
              : a === pn.trueFunc
              ? pn.falseFunc
              : (t) => !a(t) && e(t)
          },
          has(e, t, r, n, s) {
            const { adapter: a } = r,
              i = Bn(r)
            i.relativeSelector = !0
            const o = t.some((e) => e.some(mn)) ? [vn] : void 0,
              c = s(t, i, o)
            if (c === pn.falseFunc) return pn.falseFunc
            const l = wn(c, a)
            if (o && c !== pn.trueFunc) {
              const { shouldTestNextSiblings: t = !1 } = c
              return (r) => {
                if (!e(r)) return !1
                o[0] = r
                const n = a.getChildren(r),
                  s = t ? [...n, ...xn(r, a)] : n
                return a.existsOne(l, s)
              }
            }
            return (t) => e(t) && a.existsOne(l, a.getChildren(t))
          },
        }
      function Fn(e, t) {
        const r = t.getParent(e)
        return r && t.isTag(r) ? r : null
      }
      function qn(e, t, r) {
        return Wn('string' == typeof e ? Pt(e) : e, t, r)
      }
      function Gn(e) {
        return (
          e.type === Nt.Pseudo &&
          ('scope' === e.name ||
            (Array.isArray(e.data) && e.data.some((e) => e.some(Gn))))
        )
      }
      const Vn = { type: Nt.Descendant },
        Yn = { type: '_flexibleDescendant' },
        Qn = { type: Nt.Pseudo, name: 'scope', data: null }
      function Wn(e, t, r) {
        var n
        e.forEach(fn), (r = null !== (n = t.context) && void 0 !== n ? n : r)
        const s = Array.isArray(r),
          a = r && (Array.isArray(r) ? r : [r])
        if (!1 !== t.relativeSelector)
          !(function (e, { adapter: t }, r) {
            const n = !!(null == r
              ? void 0
              : r.every((e) => {
                  const r = t.isTag(e) && t.getParent(e)
                  return e === vn || (r && t.isTag(r))
                }))
            for (const t of e) {
              if (t.length > 0 && mn(t[0]) && t[0].type !== Nt.Descendant);
              else {
                if (!n || t.some(Gn)) continue
                t.unshift(Vn)
              }
              t.unshift(Qn)
            }
          })(e, t, a)
        else if (e.some((e) => e.length > 0 && mn(e[0])))
          throw new Error(
            'Relative selectors are not allowed when the `relativeSelector` option is disabled'
          )
        let i = !1
        const o = e
          .map((e) => {
            if (e.length >= 2) {
              const [t, r] = e
              t.type !== Nt.Pseudo ||
                'scope' !== t.name ||
                (s && r.type === Nt.Descendant
                  ? (e[1] = Yn)
                  : (r.type !== Nt.Adjacent && r.type !== Nt.Sibling) ||
                    (i = !0))
            }
            return (function (e, t, r) {
              var n
              return e.reduce(
                (e, n) =>
                  e === pn.falseFunc
                    ? pn.falseFunc
                    : (function (e, t, r, n, s) {
                        const { adapter: a, equals: i } = r
                        switch (t.type) {
                          case Nt.PseudoElement:
                            throw new Error(
                              'Pseudo-elements are not supported by css-select'
                            )
                          case Nt.ColumnCombinator:
                            throw new Error(
                              'Column combinators are not yet supported by css-select'
                            )
                          case Nt.Attribute:
                            if (null != t.namespace)
                              throw new Error(
                                'Namespaced attributes are not yet supported by css-select'
                              )
                            return (
                              (r.xmlMode && !r.lowerCaseAttributeNames) ||
                                (t.name = t.name.toLowerCase()),
                              In[t.action](e, t, r)
                            )
                          case Nt.Pseudo:
                            return (function (e, t, r, n, s) {
                              var a
                              const { name: i, data: o } = t
                              if (Array.isArray(o)) {
                                if (!(i in Hn))
                                  throw new Error(
                                    `Unknown pseudo-class :${i}(${o})`
                                  )
                                return Hn[i](e, o, r, n, s)
                              }
                              const c =
                                  null === (a = r.pseudos) || void 0 === a
                                    ? void 0
                                    : a[i],
                                l = 'string' == typeof c ? c : Pn[i]
                              if ('string' == typeof l) {
                                if (null != o)
                                  throw new Error(
                                    `Pseudo ${i} doesn't have any arguments`
                                  )
                                const t = Pt(l)
                                return Hn.is(e, t, r, n, s)
                              }
                              if ('function' == typeof c)
                                return Mn(c, i, o, 1), (t) => c(t, o) && e(t)
                              if (i in On) return On[i](e, o, r, n)
                              if (i in kn) {
                                const t = kn[i]
                                return Mn(t, i, o, 2), (n) => t(n, r, o) && e(n)
                              }
                              throw new Error(`Unknown pseudo-class :${i}`)
                            })(e, t, r, n, s)
                          case Nt.Tag: {
                            if (null != t.namespace)
                              throw new Error(
                                'Namespaced tag names are not yet supported by css-select'
                              )
                            let { name: n } = t
                            return (
                              (r.xmlMode && !r.lowerCaseTags) ||
                                (n = n.toLowerCase()),
                              function (t) {
                                return a.getName(t) === n && e(t)
                              }
                            )
                          }
                          case Nt.Descendant: {
                            if (
                              !1 === r.cacheResults ||
                              'undefined' == typeof WeakSet
                            )
                              return function (t) {
                                let r = t
                                for (; (r = Fn(r, a)); ) if (e(r)) return !0
                                return !1
                              }
                            const t = new WeakSet()
                            return function (r) {
                              let n = r
                              for (; (n = Fn(n, a)); )
                                if (!t.has(n)) {
                                  if (a.isTag(n) && e(n)) return !0
                                  t.add(n)
                                }
                              return !1
                            }
                          }
                          case '_flexibleDescendant':
                            return function (t) {
                              let r = t
                              do {
                                if (e(r)) return !0
                              } while ((r = Fn(r, a)))
                              return !1
                            }
                          case Nt.Parent:
                            return function (t) {
                              return a
                                .getChildren(t)
                                .some((t) => a.isTag(t) && e(t))
                            }
                          case Nt.Child:
                            return function (t) {
                              const r = a.getParent(t)
                              return null != r && a.isTag(r) && e(r)
                            }
                          case Nt.Sibling:
                            return function (t) {
                              const r = a.getSiblings(t)
                              for (let n = 0; n < r.length; n++) {
                                const s = r[n]
                                if (i(t, s)) break
                                if (a.isTag(s) && e(s)) return !0
                              }
                              return !1
                            }
                          case Nt.Adjacent:
                            return a.prevElementSibling
                              ? function (t) {
                                  const r = a.prevElementSibling(t)
                                  return null != r && e(r)
                                }
                              : function (t) {
                                  const r = a.getSiblings(t)
                                  let n
                                  for (let e = 0; e < r.length; e++) {
                                    const s = r[e]
                                    if (i(t, s)) break
                                    a.isTag(s) && (n = s)
                                  }
                                  return !!n && e(n)
                                }
                          case Nt.Universal:
                            if (null != t.namespace && '*' !== t.namespace)
                              throw new Error(
                                'Namespaced universal selectors are not yet supported by css-select'
                              )
                            return e
                        }
                      })(e, n, t, r, Wn),
                null !== (n = t.rootFunc) && void 0 !== n ? n : pn.trueFunc
              )
            })(e, t, a)
          })
          .reduce(Xn, pn.falseFunc)
        return (o.shouldTestNextSiblings = i), o
      }
      function Xn(e, t) {
        return t === pn.falseFunc || e === pn.trueFunc
          ? e
          : e === pn.falseFunc || t === pn.trueFunc
          ? t
          : function (r) {
              return e(r) || t(r)
            }
      }
      const jn = (e, t) => e === t,
        Kn = { adapter: n, equals: jn }
      function zn(e) {
        var t, r, s, a
        const i = null != e ? e : Kn
        return (
          (null !== (t = i.adapter) && void 0 !== t) || (i.adapter = n),
          (null !== (r = i.equals) && void 0 !== r) ||
            (i.equals =
              null !==
                (a =
                  null === (s = i.adapter) || void 0 === s
                    ? void 0
                    : s.equals) && void 0 !== a
                ? a
                : jn),
          i
        )
      }
      function $n(e) {
        return function (t, r, n) {
          const s = zn(r)
          return e(t, s, n)
        }
      }
      $n(function (e, t, r) {
        return wn(qn(e, t, r), t.adapter)
      }),
        $n(qn)
      const Zn = $n(Wn)
      function Jn(e) {
        return function (t, r, n) {
          const s = zn(n)
          'function' != typeof t && (t = qn(t, s, r))
          const a = es(r, s.adapter, t.shouldTestNextSiblings)
          return e(t, a, s)
        }
      }
      function es(e, t, r = !1) {
        return (
          r &&
            (e = (function (e, t) {
              const r = Array.isArray(e) ? e.slice(0) : [e],
                n = r.length
              for (let e = 0; e < n; e++) {
                const n = xn(r[e], t)
                r.push(...n)
              }
              return r
            })(e, t)),
          Array.isArray(e) ? t.removeSubsets(e) : t.getChildren(e)
        )
      }
      Jn((e, t, r) =>
        e !== pn.falseFunc && t && 0 !== t.length ? r.adapter.findAll(e, t) : []
      ),
        Jn((e, t, r) =>
          e !== pn.falseFunc && t && 0 !== t.length
            ? r.adapter.findOne(e, t)
            : null
        )
      const ts = new Set([
        'first',
        'last',
        'eq',
        'gt',
        'nth',
        'lt',
        'even',
        'odd',
      ])
      function rs(e) {
        return (
          'pseudo' === e.type &&
          (!!ts.has(e.name) ||
            (!('not' !== e.name || !Array.isArray(e.data)) &&
              e.data.some((e) => e.some(rs))))
        )
      }
      function ns(e) {
        const t = [],
          r = []
        for (const n of e) n.some(rs) ? t.push(n) : r.push(n)
        return [r, t]
      }
      const ss = { type: Nt.Universal, namespace: null },
        as = { type: Nt.Pseudo, name: 'scope', data: null }
      function is(e, t, r = {}) {
        return os([e], t, r)
      }
      function os(e, t, r = {}) {
        if ('function' == typeof t) return e.some(t)
        const [n, s] = ns(Pt(t))
        return (
          (n.length > 0 && e.some(Zn(n, r))) ||
          s.some((t) => hs(t, e, r).length > 0)
        )
      }
      function cs(e, t, r = {}) {
        return ls(Pt(e), t, r)
      }
      function ls(e, t, r) {
        if (0 === t.length) return []
        const [n, s] = ns(e)
        let a
        if (n.length) {
          const e = Es(t, n, r)
          if (0 === s.length) return e
          e.length && (a = new Set(e))
        }
        for (
          let e = 0;
          e < s.length && (null == a ? void 0 : a.size) !== t.length;
          e++
        ) {
          const n = s[e]
          if (0 === (a ? t.filter((e) => wt(e) && !a.has(e)) : t).length) break
          const i = hs(n, t, r)
          if (i.length)
            if (a) i.forEach((e) => a.add(e))
            else {
              if (e === s.length - 1) return i
              a = new Set(i)
            }
        }
        return void 0 !== a
          ? a.size === t.length
            ? t
            : t.filter((e) => a.has(e))
          : []
      }
      function hs(e, t, r) {
        var n
        if (e.some(Rt)) {
          const s =
              null !== (n = r.root) && void 0 !== n
                ? n
                : (function (e) {
                    for (; e.parent; ) e = e.parent
                    return e
                  })(t[0]),
            a = { ...r, context: t, relativeSelector: !1 }
          return e.push(as), us(s, e, a, !0, t.length)
        }
        return us(t, e, r, !1, t.length)
      }
      function us(e, t, r, s, a) {
        const i = t.findIndex(rs),
          o = t.slice(0, i),
          c = t[i],
          l = t.length - 1 === i ? a : 1 / 0,
          h = (function (e, t, r) {
            const n = null != t ? parseInt(t, 10) : NaN
            switch (e) {
              case 'first':
                return 1
              case 'nth':
              case 'eq':
                return isFinite(n) ? (n >= 0 ? n + 1 : 1 / 0) : 0
              case 'lt':
                return isFinite(n) ? (n >= 0 ? Math.min(n, r) : 1 / 0) : 0
              case 'gt':
                return isFinite(n) ? 1 / 0 : 0
              case 'odd':
                return 2 * r
              case 'even':
                return 2 * r - 1
              case 'last':
              case 'not':
                return 1 / 0
            }
          })(c.name, c.data, l)
        if (0 === h) return []
        const u = (
          0 !== o.length || Array.isArray(e)
            ? 0 === o.length
              ? (Array.isArray(e) ? e : [e]).filter(wt)
              : s || o.some(Rt)
              ? ds(e, [o], r, h)
              : Es(e, [o], r)
            : Sr(e).filter(wt)
        ).slice(0, h)
        let d = (function (e, t, r, n) {
          const s = 'string' == typeof r ? parseInt(r, 10) : NaN
          switch (e) {
            case 'first':
            case 'lt':
              return t
            case 'last':
              return t.length > 0 ? [t[t.length - 1]] : t
            case 'nth':
            case 'eq':
              return isFinite(s) && Math.abs(s) < t.length
                ? [s < 0 ? t[t.length + s] : t[s]]
                : []
            case 'gt':
              return isFinite(s) ? t.slice(s + 1) : []
            case 'even':
              return t.filter((e, t) => t % 2 == 0)
            case 'odd':
              return t.filter((e, t) => t % 2 == 1)
            case 'not': {
              const e = new Set(ls(r, t, n))
              return t.filter((t) => !e.has(t))
            }
          }
        })(c.name, u, c.data, r)
        if (0 === d.length || t.length === i + 1) return d
        const p = t.slice(i + 1),
          E = p.some(Rt)
        if (E) {
          if (Rt(p[0])) {
            const { type: e } = p[0]
            ;(e !== Nt.Sibling && e !== Nt.Adjacent) || (d = es(d, n, !0)),
              p.unshift(ss)
          }
          r = { ...r, relativeSelector: !1, rootFunc: (e) => d.includes(e) }
        } else
          r.rootFunc &&
            r.rootFunc !== pn.trueFunc &&
            (r = { ...r, rootFunc: pn.trueFunc })
        return p.some(rs)
          ? us(d, p, r, !1, a)
          : E
          ? ds(d, [p], r, a)
          : Es(d, [p], r)
      }
      function ds(e, t, r, n) {
        return ps(e, Zn(t, r, e), n)
      }
      function ps(e, t, r = 1 / 0) {
        return Fr(
          (e) => wt(e) && t(e),
          es(e, n, t.shouldTestNextSiblings),
          !0,
          r
        )
      }
      function Es(e, t, r) {
        const n = (Array.isArray(e) ? e : [e]).filter(wt)
        if (0 === n.length) return n
        const s = Zn(t, r)
        return s === pn.trueFunc ? n : n.filter(s)
      }
      const ms = /^\s*[~+]/
      function Ts(e) {
        var t
        if (!e) return this._make([])
        const r = this.toArray()
        if ('string' != typeof e) {
          const t = je(e) ? e.toArray() : [e]
          return this._make(t.filter((e) => r.some((t) => Qe(t, e))))
        }
        const n = ms.test(e) ? r : this.children().toArray(),
          s = {
            context: r,
            root: null === (t = this._root) || void 0 === t ? void 0 : t[0],
            xmlMode: this.options.xmlMode,
            lowerCaseTags: this.options.lowerCaseTags,
            lowerCaseAttributeNames: this.options.lowerCaseAttributeNames,
            pseudos: this.options.pseudos,
            quirksMode: this.options.quirksMode,
          }
        return this._make(
          (function (e, t, r = {}, n = 1 / 0) {
            if ('function' == typeof e) return ps(t, e)
            const [s, a] = ns(Pt(e)),
              i = a.map((e) => us(t, e, r, !0, n))
            return (
              s.length && i.push(ds(t, s, r, n)),
              0 === i.length
                ? []
                : 1 === i.length
                ? i[0]
                : nn(i.reduce((e, t) => [...e, ...t]))
            )
          })(e, n, s)
        )
      }
      function fs(e) {
        return function (t, ...r) {
          return function (n) {
            var s
            let a = e(t, this)
            return (
              n &&
                (a = Hs(
                  a,
                  n,
                  this.options.xmlMode,
                  null === (s = this._root) || void 0 === s ? void 0 : s[0]
                )),
              this._make(
                this.length > 1 && a.length > 1
                  ? r.reduce((e, t) => t(e), a)
                  : a
              )
            )
          }
        }
      }
      const As = fs((e, t) => {
          const r = []
          for (let n = 0; n < t.length; n++) {
            const s = e(t[n])
            r.push(s)
          }
          return new Array().concat(...r)
        }),
        gs = fs((e, t) => {
          const r = []
          for (let n = 0; n < t.length; n++) {
            const s = e(t[n])
            null !== s && r.push(s)
          }
          return r
        })
      function _s(e, ...t) {
        let r = null
        const n = fs((e, t) => {
          const n = []
          return (
            Ke(t, (t) => {
              for (
                let s;
                (s = e(t)) && !(null == r ? void 0 : r(s, n.length));
                t = s
              )
                n.push(s)
            }),
            n
          )
        })(e, ...t)
        return function (e, t) {
          r =
            'string' == typeof e
              ? (t) => is(t, e, this.options)
              : e
              ? Bs(e)
              : null
          const s = n.call(this, t)
          return (r = null), s
        }
      }
      function Ns(e) {
        return Array.from(new Set(e))
      }
      const Cs = gs(({ parent: e }) => (e && !V(e) ? e : null), Ns),
        Is = As(
          (e) => {
            const t = []
            for (; e.parent && !V(e.parent); ) t.push(e.parent), (e = e.parent)
            return t
          },
          Ue,
          (e) => e.reverse()
        ),
        bs = _s(
          ({ parent: e }) => (e && !V(e) ? e : null),
          Ue,
          (e) => e.reverse()
        )
      function Ss(e) {
        var t
        const r = []
        if (!e) return this._make(r)
        const n = {
            xmlMode: this.options.xmlMode,
            root: null === (t = this._root) || void 0 === t ? void 0 : t[0],
          },
          s = 'string' == typeof e ? (t) => is(t, e, n) : Bs(e)
        return (
          Ke(this, (e) => {
            for (; e && H(e); ) {
              if (s(e, 0)) {
                r.includes(e) || r.push(e)
                break
              }
              e = e.parent
            }
          }),
          this._make(r)
        )
      }
      const Ds = gs((e) => Pe(e)),
        Rs = As((e) => {
          const t = []
          for (; e.next; ) H((e = e.next)) && t.push(e)
          return t
        }, Ns),
        Ls = _s((e) => Pe(e), Ns),
        Os = gs((e) => ve(e)),
        ys = As((e) => {
          const t = []
          for (; e.prev; ) H((e = e.prev)) && t.push(e)
          return t
        }, Ns),
        ks = _s((e) => ve(e), Ns),
        Ms = As(
          (e) =>
            (function (e) {
              const t = (function (e) {
                return e.parent || null
              })(e)
              if (null != t) return Me(t)
              const r = [e]
              let { prev: n, next: s } = e
              for (; null != n; ) r.unshift(n), ({ prev: n } = n)
              for (; null != s; ) r.push(s), ({ next: s } = s)
              return r
            })(e).filter((t) => H(t) && t !== e),
          Ue
        ),
        Ps = As((e) => Me(e).filter(H), Ns)
      function vs() {
        const e = this.toArray().reduce(
          (e, t) => (Y(t) ? e.concat(t.children) : e),
          []
        )
        return this._make(e)
      }
      function ws(e) {
        let t = 0
        const r = this.length
        for (; t < r && !1 !== e.call(this[t], t, this[t]); ) ++t
        return this
      }
      function xs(e) {
        let t = []
        for (let r = 0; r < this.length; r++) {
          const n = this[r],
            s = e.call(n, r, n)
          null != s && (t = t.concat(s))
        }
        return this._make(t)
      }
      function Bs(e) {
        return 'function' == typeof e
          ? (t, r) => e.call(t, r, t)
          : je(e)
          ? (t) => Array.prototype.includes.call(e, t)
          : function (t) {
              return e === t
            }
      }
      function Us(e) {
        var t
        return this._make(
          Hs(
            this.toArray(),
            e,
            this.options.xmlMode,
            null === (t = this._root) || void 0 === t ? void 0 : t[0]
          )
        )
      }
      function Hs(e, t, r, n) {
        return 'string' == typeof t
          ? cs(t, e, { xmlMode: r, root: n })
          : e.filter(Bs(t))
      }
      function Fs(e) {
        const t = this.toArray()
        return 'string' == typeof e
          ? os(t.filter(H), e, this.options)
          : !!e && t.some(Bs(e))
      }
      function qs(e) {
        let t = this.toArray()
        if ('string' == typeof e) {
          const r = new Set(cs(e, t, this.options))
          t = t.filter((e) => !r.has(e))
        } else {
          const r = Bs(e)
          t = t.filter((e, t) => !r(e, t))
        }
        return this._make(t)
      }
      function Gs(e) {
        return this.filter(
          'string' == typeof e
            ? `:has(${e})`
            : (t, r) => this._make(r).find(e).length > 0
        )
      }
      function Vs() {
        return this.length > 1 ? this._make(this[0]) : this
      }
      function Ys() {
        return this.length > 0 ? this._make(this[this.length - 1]) : this
      }
      function Qs(e) {
        var t
        return 0 == (e = +e) && this.length <= 1
          ? this
          : (e < 0 && (e = this.length + e),
            this._make(null !== (t = this[e]) && void 0 !== t ? t : []))
      }
      function Ws(e) {
        return null == e ? this.toArray() : this[e < 0 ? this.length + e : e]
      }
      function Xs() {
        return Array.prototype.slice.call(this)
      }
      function js(e) {
        let t, r
        return (
          null == e
            ? ((t = this.parent().children()), (r = this[0]))
            : 'string' == typeof e
            ? ((t = this._make(e)), (r = this[0]))
            : ((t = this), (r = je(e) ? e[0] : e)),
          Array.prototype.indexOf.call(t, r)
        )
      }
      function Ks(e, t) {
        return this._make(Array.prototype.slice.call(this, e, t))
      }
      function zs() {
        var e
        return null !== (e = this.prevObject) && void 0 !== e
          ? e
          : this._make([])
      }
      function $s(e, t) {
        const r = this._make(e, t),
          n = Ue([...this.get(), ...r.get()])
        return this._make(n)
      }
      function Zs(e) {
        return this.prevObject
          ? this.add(e ? this.prevObject.filter(e) : this.prevObject)
          : this
      }
      function Js(e, t) {
        const r = Array.isArray(e) ? e : [e]
        t ? (t.children = r) : (t = null)
        for (let e = 0; e < r.length; e++) {
          const n = r[e]
          n.parent && n.parent.children !== r && we(n),
            t
              ? ((n.prev = r[e - 1] || null), (n.next = r[e + 1] || null))
              : (n.prev = n.next = null),
            (n.parent = t)
        }
        return t
      }
      function ea(e, t) {
        return null == e
          ? []
          : je(e)
          ? t
            ? ze(e.get())
            : e.get()
          : Array.isArray(e)
          ? e.reduce((e, r) => e.concat(this._makeDomArray(r, t)), [])
          : 'string' == typeof e
          ? this._parse(e, this.options, !1, null).children
          : t
          ? ze([e])
          : [e]
      }
      function ta(e) {
        return function (...t) {
          const r = this.length - 1
          return Ke(this, (n, s) => {
            if (!Y(n)) return
            const a =
                'function' == typeof t[0]
                  ? t[0].call(n, s, this._render(n.children))
                  : t,
              i = this._makeDomArray(a, s < r)
            e(i, n.children, n)
          })
        }
      }
      function ra(e, t, r, n, s) {
        var a, i
        const o = [t, r, ...n],
          c = 0 === t ? null : e[t - 1],
          l = t + r >= e.length ? null : e[t + r]
        for (let e = 0; e < n.length; ++e) {
          const r = n[e],
            h = r.parent
          if (h) {
            const e = h.children.indexOf(r)
            e > -1 && (h.children.splice(e, 1), s === h && t > e && o[0]--)
          }
          ;(r.parent = s),
            r.prev &&
              (r.prev.next = null !== (a = r.next) && void 0 !== a ? a : null),
            r.next &&
              (r.next.prev = null !== (i = r.prev) && void 0 !== i ? i : null),
            (r.prev = 0 === e ? c : n[e - 1]),
            (r.next = e === n.length - 1 ? l : n[e + 1])
        }
        return (
          c && (c.next = n[0]), l && (l.prev = n[n.length - 1]), e.splice(...o)
        )
      }
      function na(e) {
        return (je(e) ? e : this._make(e)).append(this), this
      }
      function sa(e) {
        return (je(e) ? e : this._make(e)).prepend(this), this
      }
      const aa = ta((e, t, r) => {
          ra(t, t.length, 0, e, r)
        }),
        ia = ta((e, t, r) => {
          ra(t, 0, 0, e, r)
        })
      function oa(e) {
        return function (t) {
          const r = this.length - 1,
            n = this.parents().last()
          for (let s = 0; s < this.length; s++) {
            const a = this[s],
              i =
                'function' == typeof t
                  ? t.call(a, s, a)
                  : 'string' != typeof t || $e(t)
                  ? t
                  : n.find(t).clone(),
              [o] = this._makeDomArray(i, s < r)
            if (!o || !Y(o)) continue
            let c = o,
              l = 0
            for (; l < c.children.length; ) {
              const e = c.children[l]
              H(e) ? ((c = e), (l = 0)) : l++
            }
            e(a, c, [o])
          }
          return this
        }
      }
      const ca = oa((e, t, r) => {
          const { parent: n } = e
          if (!n) return
          const s = n.children,
            a = s.indexOf(e)
          Js([e], t), ra(s, a, 0, r, n)
        }),
        la = oa((e, t, r) => {
          Y(e) && (Js(e.children, t), Js(r, e))
        })
      function ha(e) {
        return (
          this.parent(e)
            .not('body')
            .each((e, t) => {
              this._make(t).replaceWith(t.children)
            }),
          this
        )
      }
      function ua(e) {
        const t = this[0]
        if (t) {
          const r = this._make(
            'function' == typeof e ? e.call(t, 0, t) : e
          ).insertBefore(t)
          let n
          for (let e = 0; e < r.length; e++) 'tag' === r[e].type && (n = r[e])
          let s = 0
          for (; n && s < n.children.length; ) {
            const e = n.children[s]
            'tag' === e.type ? ((n = e), (s = 0)) : s++
          }
          n && this._make(n).append(this)
        }
        return this
      }
      function da(...e) {
        const t = this.length - 1
        return Ke(this, (r, n) => {
          const { parent: s } = r
          if (!Y(r) || !s) return
          const a = s.children,
            i = a.indexOf(r)
          if (i < 0) return
          const o =
            'function' == typeof e[0]
              ? e[0].call(r, n, this._render(r.children))
              : e
          ra(a, i + 1, 0, this._makeDomArray(o, n < t), s)
        })
      }
      function pa(e) {
        'string' == typeof e && (e = this._make(e)), this.remove()
        const t = []
        return (
          this._makeDomArray(e).forEach((e) => {
            const r = this.clone().toArray(),
              { parent: n } = e
            if (!n) return
            const s = n.children,
              a = s.indexOf(e)
            a < 0 || (ra(s, a + 1, 0, r, n), t.push(...r))
          }),
          this._make(t)
        )
      }
      function Ea(...e) {
        const t = this.length - 1
        return Ke(this, (r, n) => {
          const { parent: s } = r
          if (!Y(r) || !s) return
          const a = s.children,
            i = a.indexOf(r)
          if (i < 0) return
          const o =
            'function' == typeof e[0]
              ? e[0].call(r, n, this._render(r.children))
              : e
          ra(a, i, 0, this._makeDomArray(o, n < t), s)
        })
      }
      function ma(e) {
        const t = this._make(e)
        this.remove()
        const r = []
        return (
          Ke(t, (e) => {
            const t = this.clone().toArray(),
              { parent: n } = e
            if (!n) return
            const s = n.children,
              a = s.indexOf(e)
            a < 0 || (ra(s, a, 0, t, n), r.push(...t))
          }),
          this._make(r)
        )
      }
      function Ta(e) {
        return (
          Ke(e ? this.filter(e) : this, (e) => {
            we(e), (e.prev = e.next = e.parent = null)
          }),
          this
        )
      }
      function fa(e) {
        return Ke(this, (t, r) => {
          const { parent: n } = t
          if (!n) return
          const s = n.children,
            a = 'function' == typeof e ? e.call(t, r, t) : e,
            i = this._makeDomArray(a)
          Js(i, null)
          const o = s.indexOf(t)
          ra(s, o, 1, i, n),
            i.includes(t) || (t.parent = t.prev = t.next = null)
        })
      }
      function Aa() {
        return Ke(this, (e) => {
          Y(e) &&
            (e.children.forEach((e) => {
              e.next = e.prev = e.parent = null
            }),
            (e.children.length = 0))
        })
      }
      function ga(e) {
        if (void 0 === e) {
          const e = this[0]
          return e && Y(e) ? this._render(e.children) : null
        }
        return Ke(this, (t) => {
          Y(t) &&
            (t.children.forEach((e) => {
              e.next = e.prev = e.parent = null
            }),
            Js(
              je(e)
                ? e.toArray()
                : this._parse(`${e}`, this.options, !1, t).children,
              t
            ))
        })
      }
      function _a() {
        return this._render(this)
      }
      function Na(e) {
        return void 0 === e
          ? Ge(this)
          : Ke(
              this,
              'function' == typeof e
                ? (t, r) => this._make(t).text(e.call(t, r, Ge([t])))
                : (t) => {
                    Y(t) &&
                      (t.children.forEach((e) => {
                        e.next = e.prev = e.parent = null
                      }),
                      Js(new M(`${e}`), t))
                  }
            )
      }
      function Ca() {
        return this._make(ze(this.get()))
      }
      function Ia(e, t) {
        return (null != e && null != t) ||
          ('object' == typeof e && !Array.isArray(e))
          ? Ke(this, (r, n) => {
              H(r) && ba(r, e, t, n)
            })
          : 0 !== this.length
          ? Sa(this[0], e)
          : void 0
      }
      function ba(e, t, r, n) {
        if ('string' == typeof t) {
          const a = Sa(e),
            i = 'function' == typeof r ? r.call(e, n, a[t]) : r
          '' === i ? delete a[t] : null != i && (a[t] = i),
            (e.attribs.style =
              ((s = a),
              Object.keys(s).reduce(
                (e, t) => `${e}${e ? ' ' : ''}${t}: ${s[t]};`,
                ''
              )))
        } else
          'object' == typeof t &&
            Object.keys(t).forEach((r, n) => {
              ba(e, r, t[r], n)
            })
        var s
      }
      function Sa(e, t) {
        if (!e || !H(e)) return
        const r = (function (e) {
          if (!(e = (e || '').trim())) return {}
          const t = {}
          let r
          for (const n of e.split(';')) {
            const e = n.indexOf(':')
            if (e < 1 || e === n.length - 1) {
              const e = n.trimEnd()
              e.length > 0 && void 0 !== r && (t[r] += `;${e}`)
            } else (r = n.slice(0, e).trim()), (t[r] = n.slice(e + 1).trim())
          }
          return t
        })(e.attribs.style)
        if ('string' == typeof t) return r[t]
        if (Array.isArray(t)) {
          const e = {}
          return (
            t.forEach((t) => {
              null != r[t] && (e[t] = r[t])
            }),
            e
          )
        }
        return r
      }
      const Da = 'input,select,textarea,keygen',
        Ra = /%20/g,
        La = /\r?\n/g
      function Oa() {
        const e = this.serializeArray().map(
          (e) => `${encodeURIComponent(e.name)}=${encodeURIComponent(e.value)}`
        )
        return e.join('&').replace(Ra, '+')
      }
      function ya() {
        return this.map((e, t) => {
          const r = this._make(t)
          return H(t) && 'form' === t.name
            ? r.find(Da).toArray()
            : r.filter(Da).toArray()
        })
          .filter(
            '[name!=""]:enabled:not(:submit, :button, :image, :reset, :file):matches([checked], :not(:checkbox, :radio))'
          )
          .map((e, t) => {
            var r
            const n = this._make(t),
              s = n.attr('name'),
              a = null !== (r = n.val()) && void 0 !== r ? r : ''
            return Array.isArray(a)
              ? a.map((e) => ({ name: s, value: e.replace(La, '\r\n') }))
              : { name: s, value: a.replace(La, '\r\n') }
          })
          .toArray()
      }
      class ka {
        constructor(e, t, r) {
          if (((this.length = 0), (this.options = r), (this._root = t), e)) {
            for (let t = 0; t < e.length; t++) this[t] = e[t]
            this.length = e.length
          }
        }
      }
      ;(ka.prototype.cheerio = '[cheerio object]'),
        (ka.prototype.splice = Array.prototype.splice),
        (ka.prototype[Symbol.iterator] = Array.prototype[Symbol.iterator]),
        Object.assign(ka.prototype, t, s, a, i, o)
      const Ma = new Set([
          65534, 65535, 131070, 131071, 196606, 196607, 262142, 262143, 327678,
          327679, 393214, 393215, 458750, 458751, 524286, 524287, 589822,
          589823, 655358, 655359, 720894, 720895, 786430, 786431, 851966,
          851967, 917502, 917503, 983038, 983039, 1048574, 1048575, 1114110,
          1114111,
        ]),
        Pa = '�'
      var va
      !(function (e) {
        ;(e[(e.EOF = -1)] = 'EOF'),
          (e[(e.NULL = 0)] = 'NULL'),
          (e[(e.TABULATION = 9)] = 'TABULATION'),
          (e[(e.CARRIAGE_RETURN = 13)] = 'CARRIAGE_RETURN'),
          (e[(e.LINE_FEED = 10)] = 'LINE_FEED'),
          (e[(e.FORM_FEED = 12)] = 'FORM_FEED'),
          (e[(e.SPACE = 32)] = 'SPACE'),
          (e[(e.EXCLAMATION_MARK = 33)] = 'EXCLAMATION_MARK'),
          (e[(e.QUOTATION_MARK = 34)] = 'QUOTATION_MARK'),
          (e[(e.NUMBER_SIGN = 35)] = 'NUMBER_SIGN'),
          (e[(e.AMPERSAND = 38)] = 'AMPERSAND'),
          (e[(e.APOSTROPHE = 39)] = 'APOSTROPHE'),
          (e[(e.HYPHEN_MINUS = 45)] = 'HYPHEN_MINUS'),
          (e[(e.SOLIDUS = 47)] = 'SOLIDUS'),
          (e[(e.DIGIT_0 = 48)] = 'DIGIT_0'),
          (e[(e.DIGIT_9 = 57)] = 'DIGIT_9'),
          (e[(e.SEMICOLON = 59)] = 'SEMICOLON'),
          (e[(e.LESS_THAN_SIGN = 60)] = 'LESS_THAN_SIGN'),
          (e[(e.EQUALS_SIGN = 61)] = 'EQUALS_SIGN'),
          (e[(e.GREATER_THAN_SIGN = 62)] = 'GREATER_THAN_SIGN'),
          (e[(e.QUESTION_MARK = 63)] = 'QUESTION_MARK'),
          (e[(e.LATIN_CAPITAL_A = 65)] = 'LATIN_CAPITAL_A'),
          (e[(e.LATIN_CAPITAL_F = 70)] = 'LATIN_CAPITAL_F'),
          (e[(e.LATIN_CAPITAL_X = 88)] = 'LATIN_CAPITAL_X'),
          (e[(e.LATIN_CAPITAL_Z = 90)] = 'LATIN_CAPITAL_Z'),
          (e[(e.RIGHT_SQUARE_BRACKET = 93)] = 'RIGHT_SQUARE_BRACKET'),
          (e[(e.GRAVE_ACCENT = 96)] = 'GRAVE_ACCENT'),
          (e[(e.LATIN_SMALL_A = 97)] = 'LATIN_SMALL_A'),
          (e[(e.LATIN_SMALL_F = 102)] = 'LATIN_SMALL_F'),
          (e[(e.LATIN_SMALL_X = 120)] = 'LATIN_SMALL_X'),
          (e[(e.LATIN_SMALL_Z = 122)] = 'LATIN_SMALL_Z'),
          (e[(e.REPLACEMENT_CHARACTER = 65533)] = 'REPLACEMENT_CHARACTER')
      })((va = va || (va = {})))
      const wa = '[CDATA[',
        xa = 'doctype',
        Ba = 'script'
      function Ua(e) {
        return e >= 55296 && e <= 57343
      }
      function Ha(e) {
        return (
          (32 !== e &&
            10 !== e &&
            13 !== e &&
            9 !== e &&
            12 !== e &&
            e >= 1 &&
            e <= 31) ||
          (e >= 127 && e <= 159)
        )
      }
      function Fa(e) {
        return (e >= 64976 && e <= 65007) || Ma.has(e)
      }
      var qa, Ga
      !(function (e) {
        ;(e.controlCharacterInInputStream =
          'control-character-in-input-stream'),
          (e.noncharacterInInputStream = 'noncharacter-in-input-stream'),
          (e.surrogateInInputStream = 'surrogate-in-input-stream'),
          (e.nonVoidHtmlElementStartTagWithTrailingSolidus =
            'non-void-html-element-start-tag-with-trailing-solidus'),
          (e.endTagWithAttributes = 'end-tag-with-attributes'),
          (e.endTagWithTrailingSolidus = 'end-tag-with-trailing-solidus'),
          (e.unexpectedSolidusInTag = 'unexpected-solidus-in-tag'),
          (e.unexpectedNullCharacter = 'unexpected-null-character'),
          (e.unexpectedQuestionMarkInsteadOfTagName =
            'unexpected-question-mark-instead-of-tag-name'),
          (e.invalidFirstCharacterOfTagName =
            'invalid-first-character-of-tag-name'),
          (e.unexpectedEqualsSignBeforeAttributeName =
            'unexpected-equals-sign-before-attribute-name'),
          (e.missingEndTagName = 'missing-end-tag-name'),
          (e.unexpectedCharacterInAttributeName =
            'unexpected-character-in-attribute-name'),
          (e.unknownNamedCharacterReference =
            'unknown-named-character-reference'),
          (e.missingSemicolonAfterCharacterReference =
            'missing-semicolon-after-character-reference'),
          (e.unexpectedCharacterAfterDoctypeSystemIdentifier =
            'unexpected-character-after-doctype-system-identifier'),
          (e.unexpectedCharacterInUnquotedAttributeValue =
            'unexpected-character-in-unquoted-attribute-value'),
          (e.eofBeforeTagName = 'eof-before-tag-name'),
          (e.eofInTag = 'eof-in-tag'),
          (e.missingAttributeValue = 'missing-attribute-value'),
          (e.missingWhitespaceBetweenAttributes =
            'missing-whitespace-between-attributes'),
          (e.missingWhitespaceAfterDoctypePublicKeyword =
            'missing-whitespace-after-doctype-public-keyword'),
          (e.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers =
            'missing-whitespace-between-doctype-public-and-system-identifiers'),
          (e.missingWhitespaceAfterDoctypeSystemKeyword =
            'missing-whitespace-after-doctype-system-keyword'),
          (e.missingQuoteBeforeDoctypePublicIdentifier =
            'missing-quote-before-doctype-public-identifier'),
          (e.missingQuoteBeforeDoctypeSystemIdentifier =
            'missing-quote-before-doctype-system-identifier'),
          (e.missingDoctypePublicIdentifier =
            'missing-doctype-public-identifier'),
          (e.missingDoctypeSystemIdentifier =
            'missing-doctype-system-identifier'),
          (e.abruptDoctypePublicIdentifier =
            'abrupt-doctype-public-identifier'),
          (e.abruptDoctypeSystemIdentifier =
            'abrupt-doctype-system-identifier'),
          (e.cdataInHtmlContent = 'cdata-in-html-content'),
          (e.incorrectlyOpenedComment = 'incorrectly-opened-comment'),
          (e.eofInScriptHtmlCommentLikeText =
            'eof-in-script-html-comment-like-text'),
          (e.eofInDoctype = 'eof-in-doctype'),
          (e.nestedComment = 'nested-comment'),
          (e.abruptClosingOfEmptyComment = 'abrupt-closing-of-empty-comment'),
          (e.eofInComment = 'eof-in-comment'),
          (e.incorrectlyClosedComment = 'incorrectly-closed-comment'),
          (e.eofInCdata = 'eof-in-cdata'),
          (e.absenceOfDigitsInNumericCharacterReference =
            'absence-of-digits-in-numeric-character-reference'),
          (e.nullCharacterReference = 'null-character-reference'),
          (e.surrogateCharacterReference = 'surrogate-character-reference'),
          (e.characterReferenceOutsideUnicodeRange =
            'character-reference-outside-unicode-range'),
          (e.controlCharacterReference = 'control-character-reference'),
          (e.noncharacterCharacterReference =
            'noncharacter-character-reference'),
          (e.missingWhitespaceBeforeDoctypeName =
            'missing-whitespace-before-doctype-name'),
          (e.missingDoctypeName = 'missing-doctype-name'),
          (e.invalidCharacterSequenceAfterDoctypeName =
            'invalid-character-sequence-after-doctype-name'),
          (e.duplicateAttribute = 'duplicate-attribute'),
          (e.nonConformingDoctype = 'non-conforming-doctype'),
          (e.missingDoctype = 'missing-doctype'),
          (e.misplacedDoctype = 'misplaced-doctype'),
          (e.endTagWithoutMatchingOpenElement =
            'end-tag-without-matching-open-element'),
          (e.closingOfElementWithOpenChildElements =
            'closing-of-element-with-open-child-elements'),
          (e.disallowedContentInNoscriptInHead =
            'disallowed-content-in-noscript-in-head'),
          (e.openElementsLeftAfterEof = 'open-elements-left-after-eof'),
          (e.abandonedHeadElementChild = 'abandoned-head-element-child'),
          (e.misplacedStartTagForHeadElement =
            'misplaced-start-tag-for-head-element'),
          (e.nestedNoscriptInHead = 'nested-noscript-in-head'),
          (e.eofInElementThatCanContainOnlyText =
            'eof-in-element-that-can-contain-only-text')
      })((qa = qa || (qa = {})))
      class Va {
        constructor(e) {
          ;(this.handler = e),
            (this.html = ''),
            (this.pos = -1),
            (this.lastGapPos = -2),
            (this.gapStack = []),
            (this.skipNextNewLine = !1),
            (this.lastChunkWritten = !1),
            (this.endOfChunkHit = !1),
            (this.bufferWaterline = 65536),
            (this.isEol = !1),
            (this.lineStartPos = 0),
            (this.droppedBufferSize = 0),
            (this.line = 1),
            (this.lastErrOffset = -1)
        }
        get col() {
          return (
            this.pos - this.lineStartPos + Number(this.lastGapPos !== this.pos)
          )
        }
        get offset() {
          return this.droppedBufferSize + this.pos
        }
        getError(e) {
          const { line: t, col: r, offset: n } = this
          return {
            code: e,
            startLine: t,
            endLine: t,
            startCol: r,
            endCol: r,
            startOffset: n,
            endOffset: n,
          }
        }
        _err(e) {
          this.handler.onParseError &&
            this.lastErrOffset !== this.offset &&
            ((this.lastErrOffset = this.offset),
            this.handler.onParseError(this.getError(e)))
        }
        _addGap() {
          this.gapStack.push(this.lastGapPos), (this.lastGapPos = this.pos)
        }
        _processSurrogate(e) {
          if (this.pos !== this.html.length - 1) {
            const t = this.html.charCodeAt(this.pos + 1)
            if (
              (function (e) {
                return e >= 56320 && e <= 57343
              })(t)
            )
              return this.pos++, this._addGap(), 1024 * (e - 55296) + 9216 + t
          } else if (!this.lastChunkWritten)
            return (this.endOfChunkHit = !0), va.EOF
          return this._err(qa.surrogateInInputStream), e
        }
        willDropParsedChunk() {
          return this.pos > this.bufferWaterline
        }
        dropParsedChunk() {
          this.willDropParsedChunk() &&
            ((this.html = this.html.substring(this.pos)),
            (this.lineStartPos -= this.pos),
            (this.droppedBufferSize += this.pos),
            (this.pos = 0),
            (this.lastGapPos = -2),
            (this.gapStack.length = 0))
        }
        write(e, t) {
          this.html.length > 0 ? (this.html += e) : (this.html = e),
            (this.endOfChunkHit = !1),
            (this.lastChunkWritten = t)
        }
        insertHtmlAtCurrentPos(e) {
          ;(this.html =
            this.html.substring(0, this.pos + 1) +
            e +
            this.html.substring(this.pos + 1)),
            (this.endOfChunkHit = !1)
        }
        startsWith(e, t) {
          if (this.pos + e.length > this.html.length)
            return (this.endOfChunkHit = !this.lastChunkWritten), !1
          if (t) return this.html.startsWith(e, this.pos)
          for (let t = 0; t < e.length; t++)
            if ((32 | this.html.charCodeAt(this.pos + t)) !== e.charCodeAt(t))
              return !1
          return !0
        }
        peek(e) {
          const t = this.pos + e
          if (t >= this.html.length)
            return (this.endOfChunkHit = !this.lastChunkWritten), va.EOF
          const r = this.html.charCodeAt(t)
          return r === va.CARRIAGE_RETURN ? va.LINE_FEED : r
        }
        advance() {
          if (
            (this.pos++,
            this.isEol &&
              ((this.isEol = !1), this.line++, (this.lineStartPos = this.pos)),
            this.pos >= this.html.length)
          )
            return (this.endOfChunkHit = !this.lastChunkWritten), va.EOF
          let e = this.html.charCodeAt(this.pos)
          return e === va.CARRIAGE_RETURN
            ? ((this.isEol = !0), (this.skipNextNewLine = !0), va.LINE_FEED)
            : e === va.LINE_FEED && ((this.isEol = !0), this.skipNextNewLine)
            ? (this.line--,
              (this.skipNextNewLine = !1),
              this._addGap(),
              this.advance())
            : ((this.skipNextNewLine = !1),
              Ua(e) && (e = this._processSurrogate(e)),
              null === this.handler.onParseError ||
                (e > 31 && e < 127) ||
                e === va.LINE_FEED ||
                e === va.CARRIAGE_RETURN ||
                (e > 159 && e < 64976) ||
                this._checkForProblematicCharacters(e),
              e)
        }
        _checkForProblematicCharacters(e) {
          Ha(e)
            ? this._err(qa.controlCharacterInInputStream)
            : Fa(e) && this._err(qa.noncharacterInInputStream)
        }
        retreat(e) {
          for (this.pos -= e; this.pos < this.lastGapPos; )
            (this.lastGapPos = this.gapStack.pop()), this.pos--
          this.isEol = !1
        }
      }
      function Ya(e, t) {
        for (let r = e.attrs.length - 1; r >= 0; r--)
          if (e.attrs[r].name === t) return e.attrs[r].value
        return null
      }
      !(function (e) {
        ;(e[(e.CHARACTER = 0)] = 'CHARACTER'),
          (e[(e.NULL_CHARACTER = 1)] = 'NULL_CHARACTER'),
          (e[(e.WHITESPACE_CHARACTER = 2)] = 'WHITESPACE_CHARACTER'),
          (e[(e.START_TAG = 3)] = 'START_TAG'),
          (e[(e.END_TAG = 4)] = 'END_TAG'),
          (e[(e.COMMENT = 5)] = 'COMMENT'),
          (e[(e.DOCTYPE = 6)] = 'DOCTYPE'),
          (e[(e.EOF = 7)] = 'EOF'),
          (e[(e.HIBERNATION = 8)] = 'HIBERNATION')
      })((Ga = Ga || (Ga = {})))
      const Qa = new Uint16Array(
          'ᵁ<Õıʊҝջאٵ۞ޢߖࠏ੊ઑඡ๭༉༦჊ረዡᐕᒝᓃᓟᔥ\0\0\0\0\0\0ᕫᛍᦍᰒᷝ὾⁠↰⊍⏀⏻⑂⠤⤒ⴈ⹈⿎〖㊺㘹㞬㣾㨨㩱㫠㬮ࠀEMabcfglmnoprstu\\bfms¦³¹ÈÏlig耻Æ䃆P耻&䀦cute耻Á䃁reve;䄂Āiyx}rc耻Â䃂;䐐r;쀀𝔄rave耻À䃀pha;䎑acr;䄀d;橓Āgp¡on;䄄f;쀀𝔸plyFunction;恡ing耻Å䃅Ācs¾Ãr;쀀𝒜ign;扔ilde耻Ã䃃ml耻Ä䃄ЀaceforsuåûþėĜĢħĪĀcrêòkslash;或Ŷöø;櫧ed;挆y;䐑ƀcrtąċĔause;戵noullis;愬a;䎒r;쀀𝔅pf;쀀𝔹eve;䋘còēmpeq;扎܀HOacdefhilorsuōőŖƀƞƢƵƷƺǜȕɳɸɾcy;䐧PY耻©䂩ƀcpyŝŢźute;䄆Ā;iŧŨ拒talDifferentialD;慅leys;愭ȀaeioƉƎƔƘron;䄌dil耻Ç䃇rc;䄈nint;戰ot;䄊ĀdnƧƭilla;䂸terDot;䂷òſi;䎧rcleȀDMPTǇǋǑǖot;抙inus;抖lus;投imes;抗oĀcsǢǸkwiseContourIntegral;戲eCurlyĀDQȃȏoubleQuote;思uote;怙ȀlnpuȞȨɇɕonĀ;eȥȦ户;橴ƀgitȯȶȺruent;扡nt;戯ourIntegral;戮ĀfrɌɎ;愂oduct;成nterClockwiseContourIntegral;戳oss;樯cr;쀀𝒞pĀ;Cʄʅ拓ap;才րDJSZacefiosʠʬʰʴʸˋ˗ˡ˦̳ҍĀ;oŹʥtrahd;椑cy;䐂cy;䐅cy;䐏ƀgrsʿ˄ˇger;怡r;憡hv;櫤Āayː˕ron;䄎;䐔lĀ;t˝˞戇a;䎔r;쀀𝔇Āaf˫̧Ācm˰̢riticalȀADGT̖̜̀̆cute;䂴oŴ̋̍;䋙bleAcute;䋝rave;䁠ilde;䋜ond;拄ferentialD;慆Ѱ̽\0\0\0͔͂\0Ѕf;쀀𝔻ƀ;DE͈͉͍䂨ot;惜qual;扐blèCDLRUVͣͲ΂ϏϢϸontourIntegraìȹoɴ͹\0\0ͻ»͉nArrow;懓Āeo·ΤftƀARTΐΖΡrrow;懐ightArrow;懔eåˊngĀLRΫτeftĀARγιrrow;柸ightArrow;柺ightArrow;柹ightĀATϘϞrrow;懒ee;抨pɁϩ\0\0ϯrrow;懑ownArrow;懕erticalBar;戥ǹABLRTaВЪаўѿͼrrowƀ;BUНОТ憓ar;椓pArrow;懵reve;䌑eft˒к\0ц\0ѐightVector;楐eeVector;楞ectorĀ;Bљњ憽ar;楖ightǔѧ\0ѱeeVector;楟ectorĀ;BѺѻ懁ar;楗eeĀ;A҆҇护rrow;憧ĀctҒҗr;쀀𝒟rok;䄐ࠀNTacdfglmopqstuxҽӀӄӋӞӢӧӮӵԡԯԶՒ՝ՠեG;䅊H耻Ð䃐cute耻É䃉ƀaiyӒӗӜron;䄚rc耻Ê䃊;䐭ot;䄖r;쀀𝔈rave耻È䃈ement;戈ĀapӺӾcr;䄒tyɓԆ\0\0ԒmallSquare;旻erySmallSquare;斫ĀgpԦԪon;䄘f;쀀𝔼silon;䎕uĀaiԼՉlĀ;TՂՃ橵ilde;扂librium;懌Āci՗՚r;愰m;橳a;䎗ml耻Ë䃋Āipժկsts;戃onentialE;慇ʀcfiosօֈ֍ֲ׌y;䐤r;쀀𝔉lledɓ֗\0\0֣mallSquare;旼erySmallSquare;斪Ͱֺ\0ֿ\0\0ׄf;쀀𝔽All;戀riertrf;愱cò׋؀JTabcdfgorstר׬ׯ׺؀ؒؖ؛؝أ٬ٲcy;䐃耻>䀾mmaĀ;d׷׸䎓;䏜reve;䄞ƀeiy؇،ؐdil;䄢rc;䄜;䐓ot;䄠r;쀀𝔊;拙pf;쀀𝔾eater̀EFGLSTصلَٖٛ٦qualĀ;Lؾؿ扥ess;招ullEqual;执reater;檢ess;扷lantEqual;橾ilde;扳cr;쀀𝒢;扫ЀAacfiosuڅڋږڛڞڪھۊRDcy;䐪Āctڐڔek;䋇;䁞irc;䄤r;愌lbertSpace;愋ǰگ\0ڲf;愍izontalLine;攀Āctۃۅòکrok;䄦mpńېۘownHumðįqual;扏܀EJOacdfgmnostuۺ۾܃܇܎ܚܞܡܨ݄ݸދޏޕcy;䐕lig;䄲cy;䐁cute耻Í䃍Āiyܓܘrc耻Î䃎;䐘ot;䄰r;愑rave耻Ì䃌ƀ;apܠܯܿĀcgܴܷr;䄪inaryI;慈lieóϝǴ݉\0ݢĀ;eݍݎ戬Āgrݓݘral;戫section;拂isibleĀCTݬݲomma;恣imes;恢ƀgptݿރވon;䄮f;쀀𝕀a;䎙cr;愐ilde;䄨ǫޚ\0ޞcy;䐆l耻Ï䃏ʀcfosuެ޷޼߂ߐĀiyޱ޵rc;䄴;䐙r;쀀𝔍pf;쀀𝕁ǣ߇\0ߌr;쀀𝒥rcy;䐈kcy;䐄΀HJacfosߤߨ߽߬߱ࠂࠈcy;䐥cy;䐌ppa;䎚Āey߶߻dil;䄶;䐚r;쀀𝔎pf;쀀𝕂cr;쀀𝒦րJTaceflmostࠥࠩࠬࡐࡣ঳সে্਷ੇcy;䐉耻<䀼ʀcmnpr࠷࠼ࡁࡄࡍute;䄹bda;䎛g;柪lacetrf;愒r;憞ƀaeyࡗ࡜ࡡron;䄽dil;䄻;䐛Āfsࡨ॰tԀACDFRTUVarࡾࢩࢱࣦ࣠ࣼयज़ΐ४Ānrࢃ࢏gleBracket;柨rowƀ;BR࢙࢚࢞憐ar;懤ightArrow;懆eiling;挈oǵࢷ\0ࣃbleBracket;柦nǔࣈ\0࣒eeVector;楡ectorĀ;Bࣛࣜ懃ar;楙loor;挊ightĀAV࣯ࣵrrow;憔ector;楎Āerँगeƀ;AVउऊऐ抣rrow;憤ector;楚iangleƀ;BEतथऩ抲ar;槏qual;抴pƀDTVषूौownVector;楑eeVector;楠ectorĀ;Bॖॗ憿ar;楘ectorĀ;B॥०憼ar;楒ightáΜs̀EFGLSTॾঋকঝঢভqualGreater;拚ullEqual;扦reater;扶ess;檡lantEqual;橽ilde;扲r;쀀𝔏Ā;eঽা拘ftarrow;懚idot;䄿ƀnpw৔ਖਛgȀLRlr৞৷ਂਐeftĀAR০৬rrow;柵ightArrow;柷ightArrow;柶eftĀarγਊightáοightáϊf;쀀𝕃erĀLRਢਬeftArrow;憙ightArrow;憘ƀchtਾੀੂòࡌ;憰rok;䅁;扪Ѐacefiosuਗ਼੝੠੷੼અઋ઎p;椅y;䐜Ādl੥੯iumSpace;恟lintrf;愳r;쀀𝔐nusPlus;戓pf;쀀𝕄cò੶;䎜ҀJacefostuણધભીଔଙඑ඗ඞcy;䐊cute;䅃ƀaey઴હાron;䅇dil;䅅;䐝ƀgswે૰଎ativeƀMTV૓૟૨ediumSpace;怋hiĀcn૦૘ë૙eryThiî૙tedĀGL૸ଆreaterGreateòٳessLesóੈLine;䀊r;쀀𝔑ȀBnptଢନଷ଺reak;恠BreakingSpace;䂠f;愕ڀ;CDEGHLNPRSTV୕ୖ୪୼஡௫ఄ౞಄ದ೘ൡඅ櫬Āou୛୤ngruent;扢pCap;扭oubleVerticalBar;戦ƀlqxஃஊ஛ement;戉ualĀ;Tஒஓ扠ilde;쀀≂̸ists;戄reater΀;EFGLSTஶஷ஽௉௓௘௥扯qual;扱ullEqual;쀀≧̸reater;쀀≫̸ess;批lantEqual;쀀⩾̸ilde;扵umpń௲௽ownHump;쀀≎̸qual;쀀≏̸eĀfsఊధtTriangleƀ;BEచఛడ拪ar;쀀⧏̸qual;括s̀;EGLSTవశ఼ౄోౘ扮qual;扰reater;扸ess;쀀≪̸lantEqual;쀀⩽̸ilde;扴estedĀGL౨౹reaterGreater;쀀⪢̸essLess;쀀⪡̸recedesƀ;ESಒಓಛ技qual;쀀⪯̸lantEqual;拠ĀeiಫಹverseElement;戌ghtTriangleƀ;BEೋೌ೒拫ar;쀀⧐̸qual;拭ĀquೝഌuareSuĀbp೨೹setĀ;E೰ೳ쀀⊏̸qual;拢ersetĀ;Eഃആ쀀⊐̸qual;拣ƀbcpഓതൎsetĀ;Eഛഞ쀀⊂⃒qual;抈ceedsȀ;ESTലള഻െ抁qual;쀀⪰̸lantEqual;拡ilde;쀀≿̸ersetĀ;E൘൛쀀⊃⃒qual;抉ildeȀ;EFT൮൯൵ൿ扁qual;扄ullEqual;扇ilde;扉erticalBar;戤cr;쀀𝒩ilde耻Ñ䃑;䎝܀Eacdfgmoprstuvලෂ෉෕ෛ෠෧෼ขภยา฿ไlig;䅒cute耻Ó䃓Āiy෎ීrc耻Ô䃔;䐞blac;䅐r;쀀𝔒rave耻Ò䃒ƀaei෮ෲ෶cr;䅌ga;䎩cron;䎟pf;쀀𝕆enCurlyĀDQฎบoubleQuote;怜uote;怘;橔Āclวฬr;쀀𝒪ash耻Ø䃘iŬื฼de耻Õ䃕es;樷ml耻Ö䃖erĀBP๋๠Āar๐๓r;怾acĀek๚๜;揞et;掴arenthesis;揜Ҁacfhilors๿ງຊຏຒດຝະ໼rtialD;戂y;䐟r;쀀𝔓i;䎦;䎠usMinus;䂱Āipຢອncareplanåڝf;愙Ȁ;eio຺ູ໠໤檻cedesȀ;EST່້໏໚扺qual;檯lantEqual;扼ilde;找me;怳Ādp໩໮uct;戏ortionĀ;aȥ໹l;戝Āci༁༆r;쀀𝒫;䎨ȀUfos༑༖༛༟OT耻"䀢r;쀀𝔔pf;愚cr;쀀𝒬؀BEacefhiorsu༾གྷཇའཱིྦྷྪྭ႖ႩႴႾarr;椐G耻®䂮ƀcnrཎནབute;䅔g;柫rĀ;tཛྷཝ憠l;椖ƀaeyཧཬཱron;䅘dil;䅖;䐠Ā;vླྀཹ愜erseĀEUྂྙĀlq྇ྎement;戋uilibrium;懋pEquilibrium;楯r»ཹo;䎡ghtЀACDFTUVa࿁࿫࿳ဢဨၛႇϘĀnr࿆࿒gleBracket;柩rowƀ;BL࿜࿝࿡憒ar;懥eftArrow;懄eiling;按oǵ࿹\0စbleBracket;柧nǔည\0နeeVector;楝ectorĀ;Bဝသ懂ar;楕loor;挋Āerိ၃eƀ;AVဵံြ抢rrow;憦ector;楛iangleƀ;BEၐၑၕ抳ar;槐qual;抵pƀDTVၣၮၸownVector;楏eeVector;楜ectorĀ;Bႂႃ憾ar;楔ectorĀ;B႑႒懀ar;楓Āpuႛ႞f;愝ndImplies;楰ightarrow;懛ĀchႹႼr;愛;憱leDelayed;槴ڀHOacfhimoqstuფჱჷჽᄙᄞᅑᅖᅡᅧᆵᆻᆿĀCcჩხHcy;䐩y;䐨FTcy;䐬cute;䅚ʀ;aeiyᄈᄉᄎᄓᄗ檼ron;䅠dil;䅞rc;䅜;䐡r;쀀𝔖ortȀDLRUᄪᄴᄾᅉownArrow»ОeftArrow»࢚ightArrow»࿝pArrow;憑gma;䎣allCircle;战pf;쀀𝕊ɲᅭ\0\0ᅰt;戚areȀ;ISUᅻᅼᆉᆯ斡ntersection;抓uĀbpᆏᆞsetĀ;Eᆗᆘ抏qual;抑ersetĀ;Eᆨᆩ抐qual;抒nion;抔cr;쀀𝒮ar;拆ȀbcmpᇈᇛሉላĀ;sᇍᇎ拐etĀ;Eᇍᇕqual;抆ĀchᇠህeedsȀ;ESTᇭᇮᇴᇿ扻qual;檰lantEqual;扽ilde;承Tháྌ;我ƀ;esሒሓሣ拑rsetĀ;Eሜም抃qual;抇et»ሓրHRSacfhiorsሾቄ቉ቕ቞ቱቶኟዂወዑORN耻Þ䃞ADE;愢ĀHc቎ቒcy;䐋y;䐦Ābuቚቜ;䀉;䎤ƀaeyብቪቯron;䅤dil;䅢;䐢r;쀀𝔗Āeiቻ኉ǲኀ\0ኇefore;戴a;䎘Ācn኎ኘkSpace;쀀  Space;怉ldeȀ;EFTካኬኲኼ戼qual;扃ullEqual;扅ilde;扈pf;쀀𝕋ipleDot;惛Āctዖዛr;쀀𝒯rok;䅦ૡዷጎጚጦ\0ጬጱ\0\0\0\0\0ጸጽ፷ᎅ\0᏿ᐄᐊᐐĀcrዻጁute耻Ú䃚rĀ;oጇገ憟cir;楉rǣጓ\0጖y;䐎ve;䅬Āiyጞጣrc耻Û䃛;䐣blac;䅰r;쀀𝔘rave耻Ù䃙acr;䅪Ādiፁ፩erĀBPፈ፝Āarፍፐr;䁟acĀekፗፙ;揟et;掵arenthesis;揝onĀ;P፰፱拃lus;抎Āgp፻፿on;䅲f;쀀𝕌ЀADETadps᎕ᎮᎸᏄϨᏒᏗᏳrrowƀ;BDᅐᎠᎤar;椒ownArrow;懅ownArrow;憕quilibrium;楮eeĀ;AᏋᏌ报rrow;憥ownáϳerĀLRᏞᏨeftArrow;憖ightArrow;憗iĀ;lᏹᏺ䏒on;䎥ing;䅮cr;쀀𝒰ilde;䅨ml耻Ü䃜ҀDbcdefosvᐧᐬᐰᐳᐾᒅᒊᒐᒖash;披ar;櫫y;䐒ashĀ;lᐻᐼ抩;櫦Āerᑃᑅ;拁ƀbtyᑌᑐᑺar;怖Ā;iᑏᑕcalȀBLSTᑡᑥᑪᑴar;戣ine;䁼eparator;杘ilde;所ThinSpace;怊r;쀀𝔙pf;쀀𝕍cr;쀀𝒱dash;抪ʀcefosᒧᒬᒱᒶᒼirc;䅴dge;拀r;쀀𝔚pf;쀀𝕎cr;쀀𝒲Ȁfiosᓋᓐᓒᓘr;쀀𝔛;䎞pf;쀀𝕏cr;쀀𝒳ҀAIUacfosuᓱᓵᓹᓽᔄᔏᔔᔚᔠcy;䐯cy;䐇cy;䐮cute耻Ý䃝Āiyᔉᔍrc;䅶;䐫r;쀀𝔜pf;쀀𝕐cr;쀀𝒴ml;䅸ЀHacdefosᔵᔹᔿᕋᕏᕝᕠᕤcy;䐖cute;䅹Āayᕄᕉron;䅽;䐗ot;䅻ǲᕔ\0ᕛoWidtè૙a;䎖r;愨pf;愤cr;쀀𝒵௡ᖃᖊᖐ\0ᖰᖶᖿ\0\0\0\0ᗆᗛᗫᙟ᙭\0ᚕ᚛ᚲᚹ\0ᚾcute耻á䃡reve;䄃̀;Ediuyᖜᖝᖡᖣᖨᖭ戾;쀀∾̳;房rc耻â䃢te肻´̆;䐰lig耻æ䃦Ā;r²ᖺ;쀀𝔞rave耻à䃠ĀepᗊᗖĀfpᗏᗔsym;愵èᗓha;䎱ĀapᗟcĀclᗤᗧr;䄁g;樿ɤᗰ\0\0ᘊʀ;adsvᗺᗻᗿᘁᘇ戧nd;橕;橜lope;橘;橚΀;elmrszᘘᘙᘛᘞᘿᙏᙙ戠;榤e»ᘙsdĀ;aᘥᘦ戡ѡᘰᘲᘴᘶᘸᘺᘼᘾ;榨;榩;榪;榫;榬;榭;榮;榯tĀ;vᙅᙆ戟bĀ;dᙌᙍ抾;榝Āptᙔᙗh;戢»¹arr;捼Āgpᙣᙧon;䄅f;쀀𝕒΀;Eaeiop዁ᙻᙽᚂᚄᚇᚊ;橰cir;橯;扊d;手s;䀧roxĀ;e዁ᚒñᚃing耻å䃥ƀctyᚡᚦᚨr;쀀𝒶;䀪mpĀ;e዁ᚯñʈilde耻ã䃣ml耻ä䃤Āciᛂᛈoninôɲnt;樑ࠀNabcdefiklnoprsu᛭ᛱᜰ᜼ᝃᝈ᝸᝽០៦ᠹᡐᜍ᤽᥈ᥰot;櫭Ācrᛶ᜞kȀcepsᜀᜅᜍᜓong;扌psilon;䏶rime;怵imĀ;e᜚᜛戽q;拍Ŷᜢᜦee;抽edĀ;gᜬᜭ挅e»ᜭrkĀ;t፜᜷brk;掶Āoyᜁᝁ;䐱quo;怞ʀcmprtᝓ᝛ᝡᝤᝨausĀ;eĊĉptyv;榰séᜌnoõēƀahwᝯ᝱ᝳ;䎲;愶een;扬r;쀀𝔟g΀costuvwឍឝឳេ៕៛៞ƀaiuបពរðݠrc;旯p»፱ƀdptឤឨឭot;樀lus;樁imes;樂ɱឹ\0\0ើcup;樆ar;昅riangleĀdu៍្own;施p;斳plus;樄eåᑄåᒭarow;植ƀako៭ᠦᠵĀcn៲ᠣkƀlst៺֫᠂ozenge;槫riangleȀ;dlr᠒᠓᠘᠝斴own;斾eft;旂ight;斸k;搣Ʊᠫ\0ᠳƲᠯ\0ᠱ;斒;斑4;斓ck;斈ĀeoᠾᡍĀ;qᡃᡆ쀀=⃥uiv;쀀≡⃥t;挐Ȁptwxᡙᡞᡧᡬf;쀀𝕓Ā;tᏋᡣom»Ꮜtie;拈؀DHUVbdhmptuvᢅᢖᢪᢻᣗᣛᣬ᣿ᤅᤊᤐᤡȀLRlrᢎᢐᢒᢔ;敗;敔;敖;敓ʀ;DUduᢡᢢᢤᢦᢨ敐;敦;敩;敤;敧ȀLRlrᢳᢵᢷᢹ;敝;敚;敜;教΀;HLRhlrᣊᣋᣍᣏᣑᣓᣕ救;敬;散;敠;敫;敢;敟ox;槉ȀLRlrᣤᣦᣨᣪ;敕;敒;攐;攌ʀ;DUduڽ᣷᣹᣻᣽;敥;敨;攬;攴inus;抟lus;択imes;抠ȀLRlrᤙᤛᤝ᤟;敛;敘;攘;攔΀;HLRhlrᤰᤱᤳᤵᤷ᤻᤹攂;敪;敡;敞;攼;攤;攜Āevģ᥂bar耻¦䂦Ȁceioᥑᥖᥚᥠr;쀀𝒷mi;恏mĀ;e᜚᜜lƀ;bhᥨᥩᥫ䁜;槅sub;柈Ŭᥴ᥾lĀ;e᥹᥺怢t»᥺pƀ;Eeįᦅᦇ;檮Ā;qۜۛೡᦧ\0᧨ᨑᨕᨲ\0ᨷᩐ\0\0᪴\0\0᫁\0\0ᬡᬮ᭍᭒\0᯽\0ᰌƀcpr᦭ᦲ᧝ute;䄇̀;abcdsᦿᧀᧄ᧊᧕᧙戩nd;橄rcup;橉Āau᧏᧒p;橋p;橇ot;橀;쀀∩︀Āeo᧢᧥t;恁îړȀaeiu᧰᧻ᨁᨅǰ᧵\0᧸s;橍on;䄍dil耻ç䃧rc;䄉psĀ;sᨌᨍ橌m;橐ot;䄋ƀdmnᨛᨠᨦil肻¸ƭptyv;榲t脀¢;eᨭᨮ䂢räƲr;쀀𝔠ƀceiᨽᩀᩍy;䑇ckĀ;mᩇᩈ朓ark»ᩈ;䏇r΀;Ecefms᩟᩠ᩢᩫ᪤᪪᪮旋;槃ƀ;elᩩᩪᩭ䋆q;扗eɡᩴ\0\0᪈rrowĀlr᩼᪁eft;憺ight;憻ʀRSacd᪒᪔᪖᪚᪟»ཇ;擈st;抛irc;抚ash;抝nint;樐id;櫯cir;槂ubsĀ;u᪻᪼晣it»᪼ˬ᫇᫔᫺\0ᬊonĀ;eᫍᫎ䀺Ā;qÇÆɭ᫙\0\0᫢aĀ;t᫞᫟䀬;䁀ƀ;fl᫨᫩᫫戁îᅠeĀmx᫱᫶ent»᫩eóɍǧ᫾\0ᬇĀ;dኻᬂot;橭nôɆƀfryᬐᬔᬗ;쀀𝕔oäɔ脀©;sŕᬝr;愗Āaoᬥᬩrr;憵ss;朗Ācuᬲᬷr;쀀𝒸Ābpᬼ᭄Ā;eᭁᭂ櫏;櫑Ā;eᭉᭊ櫐;櫒dot;拯΀delprvw᭠᭬᭷ᮂᮬᯔ᯹arrĀlr᭨᭪;椸;椵ɰ᭲\0\0᭵r;拞c;拟arrĀ;p᭿ᮀ憶;椽̀;bcdosᮏᮐᮖᮡᮥᮨ截rcap;橈Āauᮛᮞp;橆p;橊ot;抍r;橅;쀀∪︀Ȁalrv᮵ᮿᯞᯣrrĀ;mᮼᮽ憷;椼yƀevwᯇᯔᯘqɰᯎ\0\0ᯒreã᭳uã᭵ee;拎edge;拏en耻¤䂤earrowĀlrᯮ᯳eft»ᮀight»ᮽeäᯝĀciᰁᰇoninôǷnt;戱lcty;挭ঀAHabcdefhijlorstuwz᰸᰻᰿ᱝᱩᱵᲊᲞᲬᲷ᳻᳿ᴍᵻᶑᶫᶻ᷆᷍rò΁ar;楥Ȁglrs᱈ᱍ᱒᱔ger;怠eth;愸òᄳhĀ;vᱚᱛ怐»ऊūᱡᱧarow;椏aã̕Āayᱮᱳron;䄏;䐴ƀ;ao̲ᱼᲄĀgrʿᲁr;懊tseq;橷ƀglmᲑᲔᲘ耻°䂰ta;䎴ptyv;榱ĀirᲣᲨsht;楿;쀀𝔡arĀlrᲳᲵ»ࣜ»သʀaegsv᳂͸᳖᳜᳠mƀ;oș᳊᳔ndĀ;ș᳑uit;晦amma;䏝in;拲ƀ;io᳧᳨᳸䃷de脀÷;o᳧ᳰntimes;拇nø᳷cy;䑒cɯᴆ\0\0ᴊrn;挞op;挍ʀlptuwᴘᴝᴢᵉᵕlar;䀤f;쀀𝕕ʀ;emps̋ᴭᴷᴽᵂqĀ;d͒ᴳot;扑inus;戸lus;戔quare;抡blebarwedgåúnƀadhᄮᵝᵧownarrowóᲃarpoonĀlrᵲᵶefôᲴighôᲶŢᵿᶅkaro÷གɯᶊ\0\0ᶎrn;挟op;挌ƀcotᶘᶣᶦĀryᶝᶡ;쀀𝒹;䑕l;槶rok;䄑Ādrᶰᶴot;拱iĀ;fᶺ᠖斿Āah᷀᷃ròЩaòྦangle;榦Āci᷒ᷕy;䑟grarr;柿ऀDacdefglmnopqrstuxḁḉḙḸոḼṉṡṾấắẽỡἪἷὄ὎὚ĀDoḆᴴoôᲉĀcsḎḔute耻é䃩ter;橮ȀaioyḢḧḱḶron;䄛rĀ;cḭḮ扖耻ê䃪lon;払;䑍ot;䄗ĀDrṁṅot;扒;쀀𝔢ƀ;rsṐṑṗ檚ave耻è䃨Ā;dṜṝ檖ot;檘Ȁ;ilsṪṫṲṴ檙nters;揧;愓Ā;dṹṺ檕ot;檗ƀapsẅẉẗcr;䄓tyƀ;svẒẓẕ戅et»ẓpĀ1;ẝẤĳạả;怄;怅怃ĀgsẪẬ;䅋p;怂ĀgpẴẸon;䄙f;쀀𝕖ƀalsỄỎỒrĀ;sỊị拕l;槣us;橱iƀ;lvỚớở䎵on»ớ;䏵ȀcsuvỪỳἋἣĀioữḱrc»Ḯɩỹ\0\0ỻíՈantĀglἂἆtr»ṝess»Ṻƀaeiἒ἖Ἒls;䀽st;扟vĀ;DȵἠD;橸parsl;槥ĀDaἯἳot;打rr;楱ƀcdiἾὁỸr;愯oô͒ĀahὉὋ;䎷耻ð䃰Āmrὓὗl耻ë䃫o;悬ƀcipὡὤὧl;䀡sôծĀeoὬὴctatioîՙnentialåչৡᾒ\0ᾞ\0ᾡᾧ\0\0ῆῌ\0ΐ\0ῦῪ \0 ⁚llingdotseñṄy;䑄male;晀ƀilrᾭᾳ῁lig;耀ﬃɩᾹ\0\0᾽g;耀ﬀig;耀ﬄ;쀀𝔣lig;耀ﬁlig;쀀fjƀaltῙ῜ῡt;晭ig;耀ﬂns;斱of;䆒ǰ΅\0ῳf;쀀𝕗ĀakֿῷĀ;vῼ´拔;櫙artint;樍Āao‌⁕Ācs‑⁒α‚‰‸⁅⁈\0⁐β•‥‧‪‬\0‮耻½䂽;慓耻¼䂼;慕;慙;慛Ƴ‴\0‶;慔;慖ʴ‾⁁\0\0⁃耻¾䂾;慗;慜5;慘ƶ⁌\0⁎;慚;慝8;慞l;恄wn;挢cr;쀀𝒻ࢀEabcdefgijlnorstv₂₉₟₥₰₴⃰⃵⃺⃿℃ℒℸ̗ℾ⅒↞Ā;lٍ₇;檌ƀcmpₐₕ₝ute;䇵maĀ;dₜ᳚䎳;檆reve;䄟Āiy₪₮rc;䄝;䐳ot;䄡Ȁ;lqsؾق₽⃉ƀ;qsؾٌ⃄lanô٥Ȁ;cdl٥⃒⃥⃕c;檩otĀ;o⃜⃝檀Ā;l⃢⃣檂;檄Ā;e⃪⃭쀀⋛︀s;檔r;쀀𝔤Ā;gٳ؛mel;愷cy;䑓Ȁ;Eajٚℌℎℐ;檒;檥;檤ȀEaesℛℝ℩ℴ;扩pĀ;p℣ℤ檊rox»ℤĀ;q℮ℯ檈Ā;q℮ℛim;拧pf;쀀𝕘Āci⅃ⅆr;愊mƀ;el٫ⅎ⅐;檎;檐茀>;cdlqr׮ⅠⅪⅮⅳⅹĀciⅥⅧ;檧r;橺ot;拗Par;榕uest;橼ʀadelsↄⅪ←ٖ↛ǰ↉\0↎proø₞r;楸qĀlqؿ↖lesó₈ií٫Āen↣↭rtneqq;쀀≩︀Å↪ԀAabcefkosy⇄⇇⇱⇵⇺∘∝∯≨≽ròΠȀilmr⇐⇔⇗⇛rsðᒄf»․ilôکĀdr⇠⇤cy;䑊ƀ;cwࣴ⇫⇯ir;楈;憭ar;意irc;䄥ƀalr∁∎∓rtsĀ;u∉∊晥it»∊lip;怦con;抹r;쀀𝔥sĀew∣∩arow;椥arow;椦ʀamopr∺∾≃≞≣rr;懿tht;戻kĀlr≉≓eftarrow;憩ightarrow;憪f;쀀𝕙bar;怕ƀclt≯≴≸r;쀀𝒽asè⇴rok;䄧Ābp⊂⊇ull;恃hen»ᱛૡ⊣\0⊪\0⊸⋅⋎\0⋕⋳\0\0⋸⌢⍧⍢⍿\0⎆⎪⎴cute耻í䃭ƀ;iyݱ⊰⊵rc耻î䃮;䐸Ācx⊼⊿y;䐵cl耻¡䂡ĀfrΟ⋉;쀀𝔦rave耻ì䃬Ȁ;inoܾ⋝⋩⋮Āin⋢⋦nt;樌t;戭fin;槜ta;愩lig;䄳ƀaop⋾⌚⌝ƀcgt⌅⌈⌗r;䄫ƀelpܟ⌏⌓inåގarôܠh;䄱f;抷ed;䆵ʀ;cfotӴ⌬⌱⌽⍁are;愅inĀ;t⌸⌹戞ie;槝doô⌙ʀ;celpݗ⍌⍐⍛⍡al;抺Āgr⍕⍙eróᕣã⍍arhk;樗rod;樼Ȁcgpt⍯⍲⍶⍻y;䑑on;䄯f;쀀𝕚a;䎹uest耻¿䂿Āci⎊⎏r;쀀𝒾nʀ;EdsvӴ⎛⎝⎡ӳ;拹ot;拵Ā;v⎦⎧拴;拳Ā;iݷ⎮lde;䄩ǫ⎸\0⎼cy;䑖l耻ï䃯̀cfmosu⏌⏗⏜⏡⏧⏵Āiy⏑⏕rc;䄵;䐹r;쀀𝔧ath;䈷pf;쀀𝕛ǣ⏬\0⏱r;쀀𝒿rcy;䑘kcy;䑔Ѐacfghjos␋␖␢␧␭␱␵␻ppaĀ;v␓␔䎺;䏰Āey␛␠dil;䄷;䐺r;쀀𝔨reen;䄸cy;䑅cy;䑜pf;쀀𝕜cr;쀀𝓀஀ABEHabcdefghjlmnoprstuv⑰⒁⒆⒍⒑┎┽╚▀♎♞♥♹♽⚚⚲⛘❝❨➋⟀⠁⠒ƀart⑷⑺⑼rò৆òΕail;椛arr;椎Ā;gঔ⒋;檋ar;楢ॣ⒥\0⒪\0⒱\0\0\0\0\0⒵Ⓔ\0ⓆⓈⓍ\0⓹ute;䄺mptyv;榴raîࡌbda;䎻gƀ;dlࢎⓁⓃ;榑åࢎ;檅uo耻«䂫rЀ;bfhlpst࢙ⓞⓦⓩ⓫⓮⓱⓵Ā;f࢝ⓣs;椟s;椝ë≒p;憫l;椹im;楳l;憢ƀ;ae⓿─┄檫il;椙Ā;s┉┊檭;쀀⪭︀ƀabr┕┙┝rr;椌rk;杲Āak┢┬cĀek┨┪;䁻;䁛Āes┱┳;榋lĀdu┹┻;榏;榍Ȁaeuy╆╋╖╘ron;䄾Ādi═╔il;䄼ìࢰâ┩;䐻Ȁcqrs╣╦╭╽a;椶uoĀ;rนᝆĀdu╲╷har;楧shar;楋h;憲ʀ;fgqs▋▌উ◳◿扤tʀahlrt▘▤▷◂◨rrowĀ;t࢙□aé⓶arpoonĀdu▯▴own»њp»०eftarrows;懇ightƀahs◍◖◞rrowĀ;sࣴࢧarpoonó྘quigarro÷⇰hreetimes;拋ƀ;qs▋ও◺lanôবʀ;cdgsব☊☍☝☨c;檨otĀ;o☔☕橿Ā;r☚☛檁;檃Ā;e☢☥쀀⋚︀s;檓ʀadegs☳☹☽♉♋pproøⓆot;拖qĀgq♃♅ôউgtò⒌ôছiíলƀilr♕࣡♚sht;楼;쀀𝔩Ā;Eজ♣;檑š♩♶rĀdu▲♮Ā;l॥♳;楪lk;斄cy;䑙ʀ;achtੈ⚈⚋⚑⚖rò◁orneòᴈard;楫ri;旺Āio⚟⚤dot;䅀ustĀ;a⚬⚭掰che»⚭ȀEaes⚻⚽⛉⛔;扨pĀ;p⛃⛄檉rox»⛄Ā;q⛎⛏檇Ā;q⛎⚻im;拦Ѐabnoptwz⛩⛴⛷✚✯❁❇❐Ānr⛮⛱g;柬r;懽rëࣁgƀlmr⛿✍✔eftĀar০✇ightá৲apsto;柼ightá৽parrowĀlr✥✩efô⓭ight;憬ƀafl✶✹✽r;榅;쀀𝕝us;樭imes;樴š❋❏st;戗áፎƀ;ef❗❘᠀旊nge»❘arĀ;l❤❥䀨t;榓ʀachmt❳❶❼➅➇ròࢨorneòᶌarĀ;d྘➃;業;怎ri;抿̀achiqt➘➝ੀ➢➮➻quo;怹r;쀀𝓁mƀ;egল➪➬;檍;檏Ābu┪➳oĀ;rฟ➹;怚rok;䅂萀<;cdhilqrࠫ⟒☹⟜⟠⟥⟪⟰Āci⟗⟙;檦r;橹reå◲mes;拉arr;楶uest;橻ĀPi⟵⟹ar;榖ƀ;ef⠀भ᠛旃rĀdu⠇⠍shar;楊har;楦Āen⠗⠡rtneqq;쀀≨︀Å⠞܀Dacdefhilnopsu⡀⡅⢂⢎⢓⢠⢥⢨⣚⣢⣤ઃ⣳⤂Dot;戺Ȁclpr⡎⡒⡣⡽r耻¯䂯Āet⡗⡙;時Ā;e⡞⡟朠se»⡟Ā;sျ⡨toȀ;dluျ⡳⡷⡻owîҌefôएðᏑker;斮Āoy⢇⢌mma;権;䐼ash;怔asuredangle»ᘦr;쀀𝔪o;愧ƀcdn⢯⢴⣉ro耻µ䂵Ȁ;acdᑤ⢽⣀⣄sôᚧir;櫰ot肻·Ƶusƀ;bd⣒ᤃ⣓戒Ā;uᴼ⣘;横ţ⣞⣡p;櫛ò−ðઁĀdp⣩⣮els;抧f;쀀𝕞Āct⣸⣽r;쀀𝓂pos»ᖝƀ;lm⤉⤊⤍䎼timap;抸ఀGLRVabcdefghijlmoprstuvw⥂⥓⥾⦉⦘⧚⧩⨕⨚⩘⩝⪃⪕⪤⪨⬄⬇⭄⭿⮮ⰴⱧⱼ⳩Āgt⥇⥋;쀀⋙̸Ā;v⥐௏쀀≫⃒ƀelt⥚⥲⥶ftĀar⥡⥧rrow;懍ightarrow;懎;쀀⋘̸Ā;v⥻ే쀀≪⃒ightarrow;懏ĀDd⦎⦓ash;抯ash;抮ʀbcnpt⦣⦧⦬⦱⧌la»˞ute;䅄g;쀀∠⃒ʀ;Eiop඄⦼⧀⧅⧈;쀀⩰̸d;쀀≋̸s;䅉roø඄urĀ;a⧓⧔普lĀ;s⧓ସǳ⧟\0⧣p肻 ଷmpĀ;e௹ఀʀaeouy⧴⧾⨃⨐⨓ǰ⧹\0⧻;橃on;䅈dil;䅆ngĀ;dൾ⨊ot;쀀⩭̸p;橂;䐽ash;怓΀;Aadqsxஒ⨩⨭⨻⩁⩅⩐rr;懗rĀhr⨳⨶k;椤Ā;oᏲᏰot;쀀≐̸uiöୣĀei⩊⩎ar;椨í஘istĀ;s஠டr;쀀𝔫ȀEest௅⩦⩹⩼ƀ;qs஼⩭௡ƀ;qs஼௅⩴lanô௢ií௪Ā;rஶ⪁»ஷƀAap⪊⪍⪑rò⥱rr;憮ar;櫲ƀ;svྍ⪜ྌĀ;d⪡⪢拼;拺cy;䑚΀AEadest⪷⪺⪾⫂⫅⫶⫹rò⥦;쀀≦̸rr;憚r;急Ȁ;fqs఻⫎⫣⫯tĀar⫔⫙rro÷⫁ightarro÷⪐ƀ;qs఻⪺⫪lanôౕĀ;sౕ⫴»శiíౝĀ;rవ⫾iĀ;eచథiäඐĀpt⬌⬑f;쀀𝕟膀¬;in⬙⬚⬶䂬nȀ;Edvஉ⬤⬨⬮;쀀⋹̸ot;쀀⋵̸ǡஉ⬳⬵;拷;拶iĀ;vಸ⬼ǡಸ⭁⭃;拾;拽ƀaor⭋⭣⭩rȀ;ast୻⭕⭚⭟lleì୻l;쀀⫽⃥;쀀∂̸lint;樔ƀ;ceಒ⭰⭳uåಥĀ;cಘ⭸Ā;eಒ⭽ñಘȀAait⮈⮋⮝⮧rò⦈rrƀ;cw⮔⮕⮙憛;쀀⤳̸;쀀↝̸ghtarrow»⮕riĀ;eೋೖ΀chimpqu⮽⯍⯙⬄୸⯤⯯Ȁ;cerല⯆ഷ⯉uå൅;쀀𝓃ortɭ⬅\0\0⯖ará⭖mĀ;e൮⯟Ā;q൴൳suĀbp⯫⯭å೸åഋƀbcp⯶ⰑⰙȀ;Ees⯿ⰀഢⰄ抄;쀀⫅̸etĀ;eഛⰋqĀ;qണⰀcĀ;eലⰗñസȀ;EesⰢⰣൟⰧ抅;쀀⫆̸etĀ;e൘ⰮqĀ;qൠⰣȀgilrⰽⰿⱅⱇìௗlde耻ñ䃱çృiangleĀlrⱒⱜeftĀ;eచⱚñదightĀ;eೋⱥñ೗Ā;mⱬⱭ䎽ƀ;esⱴⱵⱹ䀣ro;愖p;怇ҀDHadgilrsⲏⲔⲙⲞⲣⲰⲶⳓⳣash;抭arr;椄p;쀀≍⃒ash;抬ĀetⲨⲬ;쀀≥⃒;쀀>⃒nfin;槞ƀAetⲽⳁⳅrr;椂;쀀≤⃒Ā;rⳊⳍ쀀<⃒ie;쀀⊴⃒ĀAtⳘⳜrr;椃rie;쀀⊵⃒im;쀀∼⃒ƀAan⳰⳴ⴂrr;懖rĀhr⳺⳽k;椣Ā;oᏧᏥear;椧ቓ᪕\0\0\0\0\0\0\0\0\0\0\0\0\0ⴭ\0ⴸⵈⵠⵥ⵲ⶄᬇ\0\0ⶍⶫ\0ⷈⷎ\0ⷜ⸙⸫⸾⹃Ācsⴱ᪗ute耻ó䃳ĀiyⴼⵅrĀ;c᪞ⵂ耻ô䃴;䐾ʀabios᪠ⵒⵗǈⵚlac;䅑v;樸old;榼lig;䅓Ācr⵩⵭ir;榿;쀀𝔬ͯ⵹\0\0⵼\0ⶂn;䋛ave耻ò䃲;槁Ābmⶈ෴ar;榵Ȁacitⶕ⶘ⶥⶨrò᪀Āir⶝ⶠr;榾oss;榻nå๒;槀ƀaeiⶱⶵⶹcr;䅍ga;䏉ƀcdnⷀⷅǍron;䎿;榶pf;쀀𝕠ƀaelⷔ⷗ǒr;榷rp;榹΀;adiosvⷪⷫⷮ⸈⸍⸐⸖戨rò᪆Ȁ;efmⷷⷸ⸂⸅橝rĀ;oⷾⷿ愴f»ⷿ耻ª䂪耻º䂺gof;抶r;橖lope;橗;橛ƀclo⸟⸡⸧ò⸁ash耻ø䃸l;折iŬⸯ⸴de耻õ䃵esĀ;aǛ⸺s;樶ml耻ö䃶bar;挽ૡ⹞\0⹽\0⺀⺝\0⺢⺹\0\0⻋ຜ\0⼓\0\0⼫⾼\0⿈rȀ;astЃ⹧⹲຅脀¶;l⹭⹮䂶leìЃɩ⹸\0\0⹻m;櫳;櫽y;䐿rʀcimpt⺋⺏⺓ᡥ⺗nt;䀥od;䀮il;怰enk;怱r;쀀𝔭ƀimo⺨⺰⺴Ā;v⺭⺮䏆;䏕maô੶ne;明ƀ;tv⺿⻀⻈䏀chfork»´;䏖Āau⻏⻟nĀck⻕⻝kĀ;h⇴⻛;愎ö⇴sҀ;abcdemst⻳⻴ᤈ⻹⻽⼄⼆⼊⼎䀫cir;樣ir;樢Āouᵀ⼂;樥;橲n肻±ຝim;樦wo;樧ƀipu⼙⼠⼥ntint;樕f;쀀𝕡nd耻£䂣Ԁ;Eaceinosu່⼿⽁⽄⽇⾁⾉⾒⽾⾶;檳p;檷uå໙Ā;c໎⽌̀;acens່⽙⽟⽦⽨⽾pproø⽃urlyeñ໙ñ໎ƀaes⽯⽶⽺pprox;檹qq;檵im;拨iíໟmeĀ;s⾈ຮ怲ƀEas⽸⾐⽺ð⽵ƀdfp໬⾙⾯ƀals⾠⾥⾪lar;挮ine;挒urf;挓Ā;t໻⾴ï໻rel;抰Āci⿀⿅r;쀀𝓅;䏈ncsp;怈̀fiopsu⿚⋢⿟⿥⿫⿱r;쀀𝔮pf;쀀𝕢rime;恗cr;쀀𝓆ƀaeo⿸〉〓tĀei⿾々rnionóڰnt;樖stĀ;e【】䀿ñἙô༔઀ABHabcdefhilmnoprstux぀けさすムㄎㄫㅇㅢㅲㆎ㈆㈕㈤㈩㉘㉮㉲㊐㊰㊷ƀartぇおがròႳòϝail;検aròᱥar;楤΀cdenqrtとふへみわゔヌĀeuねぱ;쀀∽̱te;䅕iãᅮmptyv;榳gȀ;del࿑らるろ;榒;榥å࿑uo耻»䂻rր;abcfhlpstw࿜ガクシスゼゾダッデナp;極Ā;f࿠ゴs;椠;椳s;椞ë≝ð✮l;楅im;楴l;憣;憝Āaiパフil;椚oĀ;nホボ戶aló༞ƀabrョリヮrò៥rk;杳ĀakンヽcĀekヹ・;䁽;䁝Āes㄂㄄;榌lĀduㄊㄌ;榎;榐Ȁaeuyㄗㄜㄧㄩron;䅙Ādiㄡㄥil;䅗ì࿲âヺ;䑀Ȁclqsㄴㄷㄽㅄa;椷dhar;楩uoĀ;rȎȍh;憳ƀacgㅎㅟངlȀ;ipsླྀㅘㅛႜnåႻarôྩt;断ƀilrㅩဣㅮsht;楽;쀀𝔯ĀaoㅷㆆrĀduㅽㅿ»ѻĀ;l႑ㆄ;楬Ā;vㆋㆌ䏁;䏱ƀgns㆕ㇹㇼht̀ahlrstㆤㆰ㇂㇘㇤㇮rrowĀ;t࿜ㆭaéトarpoonĀduㆻㆿowîㅾp»႒eftĀah㇊㇐rrowó࿪arpoonóՑightarrows;應quigarro÷ニhreetimes;拌g;䋚ingdotseñἲƀahm㈍㈐㈓rò࿪aòՑ;怏oustĀ;a㈞㈟掱che»㈟mid;櫮Ȁabpt㈲㈽㉀㉒Ānr㈷㈺g;柭r;懾rëဃƀafl㉇㉊㉎r;榆;쀀𝕣us;樮imes;樵Āap㉝㉧rĀ;g㉣㉤䀩t;榔olint;樒arò㇣Ȁachq㉻㊀Ⴜ㊅quo;怺r;쀀𝓇Ābu・㊊oĀ;rȔȓƀhir㊗㊛㊠reåㇸmes;拊iȀ;efl㊪ၙᠡ㊫方tri;槎luhar;楨;愞ൡ㋕㋛㋟㌬㌸㍱\0㍺㎤\0\0㏬㏰\0㐨㑈㑚㒭㒱㓊㓱\0㘖\0\0㘳cute;䅛quï➺Ԁ;Eaceinpsyᇭ㋳㋵㋿㌂㌋㌏㌟㌦㌩;檴ǰ㋺\0㋼;檸on;䅡uåᇾĀ;dᇳ㌇il;䅟rc;䅝ƀEas㌖㌘㌛;檶p;檺im;择olint;樓iíሄ;䑁otƀ;be㌴ᵇ㌵担;橦΀Aacmstx㍆㍊㍗㍛㍞㍣㍭rr;懘rĀhr㍐㍒ë∨Ā;oਸ਼਴t耻§䂧i;䀻war;椩mĀin㍩ðnuóñt;朶rĀ;o㍶⁕쀀𝔰Ȁacoy㎂㎆㎑㎠rp;景Āhy㎋㎏cy;䑉;䑈rtɭ㎙\0\0㎜iäᑤaraì⹯耻­䂭Āgm㎨㎴maƀ;fv㎱㎲㎲䏃;䏂Ѐ;deglnprካ㏅㏉㏎㏖㏞㏡㏦ot;橪Ā;q኱ኰĀ;E㏓㏔檞;檠Ā;E㏛㏜檝;檟e;扆lus;樤arr;楲aròᄽȀaeit㏸㐈㐏㐗Āls㏽㐄lsetmé㍪hp;樳parsl;槤Ādlᑣ㐔e;挣Ā;e㐜㐝檪Ā;s㐢㐣檬;쀀⪬︀ƀflp㐮㐳㑂tcy;䑌Ā;b㐸㐹䀯Ā;a㐾㐿槄r;挿f;쀀𝕤aĀdr㑍ЂesĀ;u㑔㑕晠it»㑕ƀcsu㑠㑹㒟Āau㑥㑯pĀ;sᆈ㑫;쀀⊓︀pĀ;sᆴ㑵;쀀⊔︀uĀbp㑿㒏ƀ;esᆗᆜ㒆etĀ;eᆗ㒍ñᆝƀ;esᆨᆭ㒖etĀ;eᆨ㒝ñᆮƀ;afᅻ㒦ְrť㒫ֱ»ᅼaròᅈȀcemt㒹㒾㓂㓅r;쀀𝓈tmîñiì㐕aræᆾĀar㓎㓕rĀ;f㓔ឿ昆Āan㓚㓭ightĀep㓣㓪psiloîỠhé⺯s»⡒ʀbcmnp㓻㕞ሉ㖋㖎Ҁ;Edemnprs㔎㔏㔑㔕㔞㔣㔬㔱㔶抂;櫅ot;檽Ā;dᇚ㔚ot;櫃ult;櫁ĀEe㔨㔪;櫋;把lus;檿arr;楹ƀeiu㔽㕒㕕tƀ;en㔎㕅㕋qĀ;qᇚ㔏eqĀ;q㔫㔨m;櫇Ābp㕚㕜;櫕;櫓c̀;acensᇭ㕬㕲㕹㕻㌦pproø㋺urlyeñᇾñᇳƀaes㖂㖈㌛pproø㌚qñ㌗g;晪ڀ123;Edehlmnps㖩㖬㖯ሜ㖲㖴㗀㗉㗕㗚㗟㗨㗭耻¹䂹耻²䂲耻³䂳;櫆Āos㖹㖼t;檾ub;櫘Ā;dሢ㗅ot;櫄sĀou㗏㗒l;柉b;櫗arr;楻ult;櫂ĀEe㗤㗦;櫌;抋lus;櫀ƀeiu㗴㘉㘌tƀ;enሜ㗼㘂qĀ;qሢ㖲eqĀ;q㗧㗤m;櫈Ābp㘑㘓;櫔;櫖ƀAan㘜㘠㘭rr;懙rĀhr㘦㘨ë∮Ā;oਫ਩war;椪lig耻ß䃟௡㙑㙝㙠ዎ㙳㙹\0㙾㛂\0\0\0\0\0㛛㜃\0㜉㝬\0\0\0㞇ɲ㙖\0\0㙛get;挖;䏄rë๟ƀaey㙦㙫㙰ron;䅥dil;䅣;䑂lrec;挕r;쀀𝔱Ȁeiko㚆㚝㚵㚼ǲ㚋\0㚑eĀ4fኄኁaƀ;sv㚘㚙㚛䎸ym;䏑Ācn㚢㚲kĀas㚨㚮pproø዁im»ኬsðኞĀas㚺㚮ð዁rn耻þ䃾Ǭ̟㛆⋧es膀×;bd㛏㛐㛘䃗Ā;aᤏ㛕r;樱;樰ƀeps㛡㛣㜀á⩍Ȁ;bcf҆㛬㛰㛴ot;挶ir;櫱Ā;o㛹㛼쀀𝕥rk;櫚á㍢rime;怴ƀaip㜏㜒㝤dåቈ΀adempst㜡㝍㝀㝑㝗㝜㝟ngleʀ;dlqr㜰㜱㜶㝀㝂斵own»ᶻeftĀ;e⠀㜾ñम;扜ightĀ;e㊪㝋ñၚot;旬inus;樺lus;樹b;槍ime;樻ezium;揢ƀcht㝲㝽㞁Āry㝷㝻;쀀𝓉;䑆cy;䑛rok;䅧Āio㞋㞎xô᝷headĀlr㞗㞠eftarro÷ࡏightarrow»ཝऀAHabcdfghlmoprstuw㟐㟓㟗㟤㟰㟼㠎㠜㠣㠴㡑㡝㡫㢩㣌㣒㣪㣶ròϭar;楣Ācr㟜㟢ute耻ú䃺òᅐrǣ㟪\0㟭y;䑞ve;䅭Āiy㟵㟺rc耻û䃻;䑃ƀabh㠃㠆㠋ròᎭlac;䅱aòᏃĀir㠓㠘sht;楾;쀀𝔲rave耻ù䃹š㠧㠱rĀlr㠬㠮»ॗ»ႃlk;斀Āct㠹㡍ɯ㠿\0\0㡊rnĀ;e㡅㡆挜r»㡆op;挏ri;旸Āal㡖㡚cr;䅫肻¨͉Āgp㡢㡦on;䅳f;쀀𝕦̀adhlsuᅋ㡸㡽፲㢑㢠ownáᎳarpoonĀlr㢈㢌efô㠭ighô㠯iƀ;hl㢙㢚㢜䏅»ᏺon»㢚parrows;懈ƀcit㢰㣄㣈ɯ㢶\0\0㣁rnĀ;e㢼㢽挝r»㢽op;挎ng;䅯ri;旹cr;쀀𝓊ƀdir㣙㣝㣢ot;拰lde;䅩iĀ;f㜰㣨»᠓Āam㣯㣲rò㢨l耻ü䃼angle;榧ހABDacdeflnoprsz㤜㤟㤩㤭㦵㦸㦽㧟㧤㧨㧳㧹㧽㨁㨠ròϷarĀ;v㤦㤧櫨;櫩asèϡĀnr㤲㤷grt;榜΀eknprst㓣㥆㥋㥒㥝㥤㦖appá␕othinçẖƀhir㓫⻈㥙opô⾵Ā;hᎷ㥢ïㆍĀiu㥩㥭gmá㎳Ābp㥲㦄setneqĀ;q㥽㦀쀀⊊︀;쀀⫋︀setneqĀ;q㦏㦒쀀⊋︀;쀀⫌︀Āhr㦛㦟etá㚜iangleĀlr㦪㦯eft»थight»ၑy;䐲ash»ံƀelr㧄㧒㧗ƀ;beⷪ㧋㧏ar;抻q;扚lip;拮Ābt㧜ᑨaòᑩr;쀀𝔳tré㦮suĀbp㧯㧱»ജ»൙pf;쀀𝕧roð໻tré㦴Ācu㨆㨋r;쀀𝓋Ābp㨐㨘nĀEe㦀㨖»㥾nĀEe㦒㨞»㦐igzag;榚΀cefoprs㨶㨻㩖㩛㩔㩡㩪irc;䅵Ādi㩀㩑Ābg㩅㩉ar;機eĀ;qᗺ㩏;扙erp;愘r;쀀𝔴pf;쀀𝕨Ā;eᑹ㩦atèᑹcr;쀀𝓌ૣណ㪇\0㪋\0㪐㪛\0\0㪝㪨㪫㪯\0\0㫃㫎\0㫘ៜ៟tré៑r;쀀𝔵ĀAa㪔㪗ròσrò৶;䎾ĀAa㪡㪤ròθrò৫að✓is;拻ƀdptឤ㪵㪾Āfl㪺ឩ;쀀𝕩imåឲĀAa㫇㫊ròώròਁĀcq㫒ីr;쀀𝓍Āpt៖㫜ré។Ѐacefiosu㫰㫽㬈㬌㬑㬕㬛㬡cĀuy㫶㫻te耻ý䃽;䑏Āiy㬂㬆rc;䅷;䑋n耻¥䂥r;쀀𝔶cy;䑗pf;쀀𝕪cr;쀀𝓎Ācm㬦㬩y;䑎l耻ÿ䃿Ԁacdefhiosw㭂㭈㭔㭘㭤㭩㭭㭴㭺㮀cute;䅺Āay㭍㭒ron;䅾;䐷ot;䅼Āet㭝㭡træᕟa;䎶r;쀀𝔷cy;䐶grarr;懝pf;쀀𝕫cr;쀀𝓏Ājn㮅㮇;怍j;怌'
            .split('')
            .map((e) => e.charCodeAt(0))
        ),
        Wa = new Uint16Array(
          'Ȁaglq\tɭ\0\0p;䀦os;䀧t;䀾t;䀼uot;䀢'
            .split('')
            .map((e) => e.charCodeAt(0))
        )
      var Xa
      const ja = new Map([
          [0, 65533],
          [128, 8364],
          [130, 8218],
          [131, 402],
          [132, 8222],
          [133, 8230],
          [134, 8224],
          [135, 8225],
          [136, 710],
          [137, 8240],
          [138, 352],
          [139, 8249],
          [140, 338],
          [142, 381],
          [145, 8216],
          [146, 8217],
          [147, 8220],
          [148, 8221],
          [149, 8226],
          [150, 8211],
          [151, 8212],
          [152, 732],
          [153, 8482],
          [154, 353],
          [155, 8250],
          [156, 339],
          [158, 382],
          [159, 376],
        ]),
        Ka =
          null !== (Xa = String.fromCodePoint) && void 0 !== Xa
            ? Xa
            : function (e) {
                let t = ''
                return (
                  e > 65535 &&
                    ((e -= 65536),
                    (t += String.fromCharCode(((e >>> 10) & 1023) | 55296)),
                    (e = 56320 | (1023 & e))),
                  (t += String.fromCharCode(e)),
                  t
                )
              }
      var za, $a, Za, Ja, ei, ti, ri, ni, si
      function ai(e) {
        return e >= za.ZERO && e <= za.NINE
      }
      !(function (e) {
        ;(e[(e.NUM = 35)] = 'NUM'),
          (e[(e.SEMI = 59)] = 'SEMI'),
          (e[(e.EQUALS = 61)] = 'EQUALS'),
          (e[(e.ZERO = 48)] = 'ZERO'),
          (e[(e.NINE = 57)] = 'NINE'),
          (e[(e.LOWER_A = 97)] = 'LOWER_A'),
          (e[(e.LOWER_F = 102)] = 'LOWER_F'),
          (e[(e.LOWER_X = 120)] = 'LOWER_X'),
          (e[(e.LOWER_Z = 122)] = 'LOWER_Z'),
          (e[(e.UPPER_A = 65)] = 'UPPER_A'),
          (e[(e.UPPER_F = 70)] = 'UPPER_F'),
          (e[(e.UPPER_Z = 90)] = 'UPPER_Z')
      })(za || (za = {})),
        (function (e) {
          ;(e[(e.VALUE_LENGTH = 49152)] = 'VALUE_LENGTH'),
            (e[(e.BRANCH_LENGTH = 16256)] = 'BRANCH_LENGTH'),
            (e[(e.JUMP_TABLE = 127)] = 'JUMP_TABLE')
        })($a || ($a = {})),
        (function (e) {
          ;(e[(e.EntityStart = 0)] = 'EntityStart'),
            (e[(e.NumericStart = 1)] = 'NumericStart'),
            (e[(e.NumericDecimal = 2)] = 'NumericDecimal'),
            (e[(e.NumericHex = 3)] = 'NumericHex'),
            (e[(e.NamedEntity = 4)] = 'NamedEntity')
        })(Za || (Za = {})),
        (function (e) {
          ;(e[(e.Legacy = 0)] = 'Legacy'),
            (e[(e.Strict = 1)] = 'Strict'),
            (e[(e.Attribute = 2)] = 'Attribute')
        })(Ja || (Ja = {}))
      class ii {
        constructor(e, t, r) {
          ;(this.decodeTree = e),
            (this.emitCodePoint = t),
            (this.errors = r),
            (this.state = Za.EntityStart),
            (this.consumed = 1),
            (this.result = 0),
            (this.treeIndex = 0),
            (this.excess = 1),
            (this.decodeMode = Ja.Strict)
        }
        startEntity(e) {
          ;(this.decodeMode = e),
            (this.state = Za.EntityStart),
            (this.result = 0),
            (this.treeIndex = 0),
            (this.excess = 1),
            (this.consumed = 1)
        }
        write(e, t) {
          switch (this.state) {
            case Za.EntityStart:
              return e.charCodeAt(t) === za.NUM
                ? ((this.state = Za.NumericStart),
                  (this.consumed += 1),
                  this.stateNumericStart(e, t + 1))
                : ((this.state = Za.NamedEntity), this.stateNamedEntity(e, t))
            case Za.NumericStart:
              return this.stateNumericStart(e, t)
            case Za.NumericDecimal:
              return this.stateNumericDecimal(e, t)
            case Za.NumericHex:
              return this.stateNumericHex(e, t)
            case Za.NamedEntity:
              return this.stateNamedEntity(e, t)
          }
        }
        stateNumericStart(e, t) {
          return t >= e.length
            ? -1
            : (32 | e.charCodeAt(t)) === za.LOWER_X
            ? ((this.state = Za.NumericHex),
              (this.consumed += 1),
              this.stateNumericHex(e, t + 1))
            : ((this.state = Za.NumericDecimal), this.stateNumericDecimal(e, t))
        }
        addToNumericResult(e, t, r, n) {
          if (t !== r) {
            const s = r - t
            ;(this.result =
              this.result * Math.pow(n, s) + parseInt(e.substr(t, s), n)),
              (this.consumed += s)
          }
        }
        stateNumericHex(e, t) {
          const r = t
          for (; t < e.length; ) {
            const s = e.charCodeAt(t)
            if (
              !(
                ai(s) ||
                ((n = s),
                (n >= za.UPPER_A && n <= za.UPPER_F) ||
                  (n >= za.LOWER_A && n <= za.LOWER_F))
              )
            )
              return (
                this.addToNumericResult(e, r, t, 16),
                this.emitNumericEntity(s, 3)
              )
            t += 1
          }
          var n
          return this.addToNumericResult(e, r, t, 16), -1
        }
        stateNumericDecimal(e, t) {
          const r = t
          for (; t < e.length; ) {
            const n = e.charCodeAt(t)
            if (!ai(n))
              return (
                this.addToNumericResult(e, r, t, 10),
                this.emitNumericEntity(n, 2)
              )
            t += 1
          }
          return this.addToNumericResult(e, r, t, 10), -1
        }
        emitNumericEntity(e, t) {
          var r
          if (this.consumed <= t)
            return (
              null === (r = this.errors) ||
                void 0 === r ||
                r.absenceOfDigitsInNumericCharacterReference(this.consumed),
              0
            )
          if (e === za.SEMI) this.consumed += 1
          else if (this.decodeMode === Ja.Strict) return 0
          return (
            this.emitCodePoint(
              (function (e) {
                var t
                return (e >= 55296 && e <= 57343) || e > 1114111
                  ? 65533
                  : null !== (t = ja.get(e)) && void 0 !== t
                  ? t
                  : e
              })(this.result),
              this.consumed
            ),
            this.errors &&
              (e !== za.SEMI &&
                this.errors.missingSemicolonAfterCharacterReference(),
              this.errors.validateNumericCharacterReference(this.result)),
            this.consumed
          )
        }
        stateNamedEntity(e, t) {
          const { decodeTree: r } = this
          let n = r[this.treeIndex],
            s = (n & $a.VALUE_LENGTH) >> 14
          for (; t < e.length; t++, this.excess++) {
            const i = e.charCodeAt(t)
            if (
              ((this.treeIndex = ci(r, n, this.treeIndex + Math.max(1, s), i)),
              this.treeIndex < 0)
            )
              return 0 === this.result ||
                (this.decodeMode === Ja.Attribute &&
                  (0 === s ||
                    (a = i) === za.EQUALS ||
                    (function (e) {
                      return (
                        (e >= za.UPPER_A && e <= za.UPPER_Z) ||
                        (e >= za.LOWER_A && e <= za.LOWER_Z) ||
                        ai(e)
                      )
                    })(a)))
                ? 0
                : this.emitNotTerminatedNamedEntity()
            if (
              ((n = r[this.treeIndex]),
              (s = (n & $a.VALUE_LENGTH) >> 14),
              0 !== s)
            ) {
              if (i === za.SEMI)
                return this.emitNamedEntityData(
                  this.treeIndex,
                  s,
                  this.consumed + this.excess
                )
              this.decodeMode !== Ja.Strict &&
                ((this.result = this.treeIndex),
                (this.consumed += this.excess),
                (this.excess = 0))
            }
          }
          var a
          return -1
        }
        emitNotTerminatedNamedEntity() {
          var e
          const { result: t, decodeTree: r } = this,
            n = (r[t] & $a.VALUE_LENGTH) >> 14
          return (
            this.emitNamedEntityData(t, n, this.consumed),
            null === (e = this.errors) ||
              void 0 === e ||
              e.missingSemicolonAfterCharacterReference(),
            this.consumed
          )
        }
        emitNamedEntityData(e, t, r) {
          const { decodeTree: n } = this
          return (
            this.emitCodePoint(1 === t ? n[e] & ~$a.VALUE_LENGTH : n[e + 1], r),
            3 === t && this.emitCodePoint(n[e + 2], r),
            r
          )
        }
        end() {
          var e
          switch (this.state) {
            case Za.NamedEntity:
              return 0 === this.result ||
                (this.decodeMode === Ja.Attribute &&
                  this.result !== this.treeIndex)
                ? 0
                : this.emitNotTerminatedNamedEntity()
            case Za.NumericDecimal:
              return this.emitNumericEntity(0, 2)
            case Za.NumericHex:
              return this.emitNumericEntity(0, 3)
            case Za.NumericStart:
              return (
                null === (e = this.errors) ||
                  void 0 === e ||
                  e.absenceOfDigitsInNumericCharacterReference(this.consumed),
                0
              )
            case Za.EntityStart:
              return 0
          }
        }
      }
      function oi(e) {
        let t = ''
        const r = new ii(e, (e) => (t += Ka(e)))
        return function (e, n) {
          let s = 0,
            a = 0
          for (; (a = e.indexOf('&', a)) >= 0; ) {
            ;(t += e.slice(s, a)), r.startEntity(n)
            const i = r.write(e, a + 1)
            if (i < 0) {
              s = a + r.end()
              break
            }
            ;(s = a + i), (a = 0 === i ? s + 1 : s)
          }
          const i = t + e.slice(s)
          return (t = ''), i
        }
      }
      function ci(e, t, r, n) {
        const s = (t & $a.BRANCH_LENGTH) >> 7,
          a = t & $a.JUMP_TABLE
        if (0 === s) return 0 !== a && n === a ? r : -1
        if (a) {
          const t = n - a
          return t < 0 || t >= s ? -1 : e[r + t] - 1
        }
        let i = r,
          o = i + s - 1
        for (; i <= o; ) {
          const t = (i + o) >>> 1,
            r = e[t]
          if (r < n) i = t + 1
          else {
            if (!(r > n)) return e[t + s]
            o = t - 1
          }
        }
        return -1
      }
      oi(Qa),
        oi(Wa),
        (function (e) {
          ;(e.HTML = 'http://www.w3.org/1999/xhtml'),
            (e.MATHML = 'http://www.w3.org/1998/Math/MathML'),
            (e.SVG = 'http://www.w3.org/2000/svg'),
            (e.XLINK = 'http://www.w3.org/1999/xlink'),
            (e.XML = 'http://www.w3.org/XML/1998/namespace'),
            (e.XMLNS = 'http://www.w3.org/2000/xmlns/')
        })((ei = ei || (ei = {}))),
        (function (e) {
          ;(e.TYPE = 'type'),
            (e.ACTION = 'action'),
            (e.ENCODING = 'encoding'),
            (e.PROMPT = 'prompt'),
            (e.NAME = 'name'),
            (e.COLOR = 'color'),
            (e.FACE = 'face'),
            (e.SIZE = 'size')
        })((ti = ti || (ti = {}))),
        (function (e) {
          ;(e.NO_QUIRKS = 'no-quirks'),
            (e.QUIRKS = 'quirks'),
            (e.LIMITED_QUIRKS = 'limited-quirks')
        })((ri = ri || (ri = {}))),
        (function (e) {
          ;(e.A = 'a'),
            (e.ADDRESS = 'address'),
            (e.ANNOTATION_XML = 'annotation-xml'),
            (e.APPLET = 'applet'),
            (e.AREA = 'area'),
            (e.ARTICLE = 'article'),
            (e.ASIDE = 'aside'),
            (e.B = 'b'),
            (e.BASE = 'base'),
            (e.BASEFONT = 'basefont'),
            (e.BGSOUND = 'bgsound'),
            (e.BIG = 'big'),
            (e.BLOCKQUOTE = 'blockquote'),
            (e.BODY = 'body'),
            (e.BR = 'br'),
            (e.BUTTON = 'button'),
            (e.CAPTION = 'caption'),
            (e.CENTER = 'center'),
            (e.CODE = 'code'),
            (e.COL = 'col'),
            (e.COLGROUP = 'colgroup'),
            (e.DD = 'dd'),
            (e.DESC = 'desc'),
            (e.DETAILS = 'details'),
            (e.DIALOG = 'dialog'),
            (e.DIR = 'dir'),
            (e.DIV = 'div'),
            (e.DL = 'dl'),
            (e.DT = 'dt'),
            (e.EM = 'em'),
            (e.EMBED = 'embed'),
            (e.FIELDSET = 'fieldset'),
            (e.FIGCAPTION = 'figcaption'),
            (e.FIGURE = 'figure'),
            (e.FONT = 'font'),
            (e.FOOTER = 'footer'),
            (e.FOREIGN_OBJECT = 'foreignObject'),
            (e.FORM = 'form'),
            (e.FRAME = 'frame'),
            (e.FRAMESET = 'frameset'),
            (e.H1 = 'h1'),
            (e.H2 = 'h2'),
            (e.H3 = 'h3'),
            (e.H4 = 'h4'),
            (e.H5 = 'h5'),
            (e.H6 = 'h6'),
            (e.HEAD = 'head'),
            (e.HEADER = 'header'),
            (e.HGROUP = 'hgroup'),
            (e.HR = 'hr'),
            (e.HTML = 'html'),
            (e.I = 'i'),
            (e.IMG = 'img'),
            (e.IMAGE = 'image'),
            (e.INPUT = 'input'),
            (e.IFRAME = 'iframe'),
            (e.KEYGEN = 'keygen'),
            (e.LABEL = 'label'),
            (e.LI = 'li'),
            (e.LINK = 'link'),
            (e.LISTING = 'listing'),
            (e.MAIN = 'main'),
            (e.MALIGNMARK = 'malignmark'),
            (e.MARQUEE = 'marquee'),
            (e.MATH = 'math'),
            (e.MENU = 'menu'),
            (e.META = 'meta'),
            (e.MGLYPH = 'mglyph'),
            (e.MI = 'mi'),
            (e.MO = 'mo'),
            (e.MN = 'mn'),
            (e.MS = 'ms'),
            (e.MTEXT = 'mtext'),
            (e.NAV = 'nav'),
            (e.NOBR = 'nobr'),
            (e.NOFRAMES = 'noframes'),
            (e.NOEMBED = 'noembed'),
            (e.NOSCRIPT = 'noscript'),
            (e.OBJECT = 'object'),
            (e.OL = 'ol'),
            (e.OPTGROUP = 'optgroup'),
            (e.OPTION = 'option'),
            (e.P = 'p'),
            (e.PARAM = 'param'),
            (e.PLAINTEXT = 'plaintext'),
            (e.PRE = 'pre'),
            (e.RB = 'rb'),
            (e.RP = 'rp'),
            (e.RT = 'rt'),
            (e.RTC = 'rtc'),
            (e.RUBY = 'ruby'),
            (e.S = 's'),
            (e.SCRIPT = 'script'),
            (e.SECTION = 'section'),
            (e.SELECT = 'select'),
            (e.SOURCE = 'source'),
            (e.SMALL = 'small'),
            (e.SPAN = 'span'),
            (e.STRIKE = 'strike'),
            (e.STRONG = 'strong'),
            (e.STYLE = 'style'),
            (e.SUB = 'sub'),
            (e.SUMMARY = 'summary'),
            (e.SUP = 'sup'),
            (e.TABLE = 'table'),
            (e.TBODY = 'tbody'),
            (e.TEMPLATE = 'template'),
            (e.TEXTAREA = 'textarea'),
            (e.TFOOT = 'tfoot'),
            (e.TD = 'td'),
            (e.TH = 'th'),
            (e.THEAD = 'thead'),
            (e.TITLE = 'title'),
            (e.TR = 'tr'),
            (e.TRACK = 'track'),
            (e.TT = 'tt'),
            (e.U = 'u'),
            (e.UL = 'ul'),
            (e.SVG = 'svg'),
            (e.VAR = 'var'),
            (e.WBR = 'wbr'),
            (e.XMP = 'xmp')
        })((ni = ni || (ni = {}))),
        (function (e) {
          ;(e[(e.UNKNOWN = 0)] = 'UNKNOWN'),
            (e[(e.A = 1)] = 'A'),
            (e[(e.ADDRESS = 2)] = 'ADDRESS'),
            (e[(e.ANNOTATION_XML = 3)] = 'ANNOTATION_XML'),
            (e[(e.APPLET = 4)] = 'APPLET'),
            (e[(e.AREA = 5)] = 'AREA'),
            (e[(e.ARTICLE = 6)] = 'ARTICLE'),
            (e[(e.ASIDE = 7)] = 'ASIDE'),
            (e[(e.B = 8)] = 'B'),
            (e[(e.BASE = 9)] = 'BASE'),
            (e[(e.BASEFONT = 10)] = 'BASEFONT'),
            (e[(e.BGSOUND = 11)] = 'BGSOUND'),
            (e[(e.BIG = 12)] = 'BIG'),
            (e[(e.BLOCKQUOTE = 13)] = 'BLOCKQUOTE'),
            (e[(e.BODY = 14)] = 'BODY'),
            (e[(e.BR = 15)] = 'BR'),
            (e[(e.BUTTON = 16)] = 'BUTTON'),
            (e[(e.CAPTION = 17)] = 'CAPTION'),
            (e[(e.CENTER = 18)] = 'CENTER'),
            (e[(e.CODE = 19)] = 'CODE'),
            (e[(e.COL = 20)] = 'COL'),
            (e[(e.COLGROUP = 21)] = 'COLGROUP'),
            (e[(e.DD = 22)] = 'DD'),
            (e[(e.DESC = 23)] = 'DESC'),
            (e[(e.DETAILS = 24)] = 'DETAILS'),
            (e[(e.DIALOG = 25)] = 'DIALOG'),
            (e[(e.DIR = 26)] = 'DIR'),
            (e[(e.DIV = 27)] = 'DIV'),
            (e[(e.DL = 28)] = 'DL'),
            (e[(e.DT = 29)] = 'DT'),
            (e[(e.EM = 30)] = 'EM'),
            (e[(e.EMBED = 31)] = 'EMBED'),
            (e[(e.FIELDSET = 32)] = 'FIELDSET'),
            (e[(e.FIGCAPTION = 33)] = 'FIGCAPTION'),
            (e[(e.FIGURE = 34)] = 'FIGURE'),
            (e[(e.FONT = 35)] = 'FONT'),
            (e[(e.FOOTER = 36)] = 'FOOTER'),
            (e[(e.FOREIGN_OBJECT = 37)] = 'FOREIGN_OBJECT'),
            (e[(e.FORM = 38)] = 'FORM'),
            (e[(e.FRAME = 39)] = 'FRAME'),
            (e[(e.FRAMESET = 40)] = 'FRAMESET'),
            (e[(e.H1 = 41)] = 'H1'),
            (e[(e.H2 = 42)] = 'H2'),
            (e[(e.H3 = 43)] = 'H3'),
            (e[(e.H4 = 44)] = 'H4'),
            (e[(e.H5 = 45)] = 'H5'),
            (e[(e.H6 = 46)] = 'H6'),
            (e[(e.HEAD = 47)] = 'HEAD'),
            (e[(e.HEADER = 48)] = 'HEADER'),
            (e[(e.HGROUP = 49)] = 'HGROUP'),
            (e[(e.HR = 50)] = 'HR'),
            (e[(e.HTML = 51)] = 'HTML'),
            (e[(e.I = 52)] = 'I'),
            (e[(e.IMG = 53)] = 'IMG'),
            (e[(e.IMAGE = 54)] = 'IMAGE'),
            (e[(e.INPUT = 55)] = 'INPUT'),
            (e[(e.IFRAME = 56)] = 'IFRAME'),
            (e[(e.KEYGEN = 57)] = 'KEYGEN'),
            (e[(e.LABEL = 58)] = 'LABEL'),
            (e[(e.LI = 59)] = 'LI'),
            (e[(e.LINK = 60)] = 'LINK'),
            (e[(e.LISTING = 61)] = 'LISTING'),
            (e[(e.MAIN = 62)] = 'MAIN'),
            (e[(e.MALIGNMARK = 63)] = 'MALIGNMARK'),
            (e[(e.MARQUEE = 64)] = 'MARQUEE'),
            (e[(e.MATH = 65)] = 'MATH'),
            (e[(e.MENU = 66)] = 'MENU'),
            (e[(e.META = 67)] = 'META'),
            (e[(e.MGLYPH = 68)] = 'MGLYPH'),
            (e[(e.MI = 69)] = 'MI'),
            (e[(e.MO = 70)] = 'MO'),
            (e[(e.MN = 71)] = 'MN'),
            (e[(e.MS = 72)] = 'MS'),
            (e[(e.MTEXT = 73)] = 'MTEXT'),
            (e[(e.NAV = 74)] = 'NAV'),
            (e[(e.NOBR = 75)] = 'NOBR'),
            (e[(e.NOFRAMES = 76)] = 'NOFRAMES'),
            (e[(e.NOEMBED = 77)] = 'NOEMBED'),
            (e[(e.NOSCRIPT = 78)] = 'NOSCRIPT'),
            (e[(e.OBJECT = 79)] = 'OBJECT'),
            (e[(e.OL = 80)] = 'OL'),
            (e[(e.OPTGROUP = 81)] = 'OPTGROUP'),
            (e[(e.OPTION = 82)] = 'OPTION'),
            (e[(e.P = 83)] = 'P'),
            (e[(e.PARAM = 84)] = 'PARAM'),
            (e[(e.PLAINTEXT = 85)] = 'PLAINTEXT'),
            (e[(e.PRE = 86)] = 'PRE'),
            (e[(e.RB = 87)] = 'RB'),
            (e[(e.RP = 88)] = 'RP'),
            (e[(e.RT = 89)] = 'RT'),
            (e[(e.RTC = 90)] = 'RTC'),
            (e[(e.RUBY = 91)] = 'RUBY'),
            (e[(e.S = 92)] = 'S'),
            (e[(e.SCRIPT = 93)] = 'SCRIPT'),
            (e[(e.SECTION = 94)] = 'SECTION'),
            (e[(e.SELECT = 95)] = 'SELECT'),
            (e[(e.SOURCE = 96)] = 'SOURCE'),
            (e[(e.SMALL = 97)] = 'SMALL'),
            (e[(e.SPAN = 98)] = 'SPAN'),
            (e[(e.STRIKE = 99)] = 'STRIKE'),
            (e[(e.STRONG = 100)] = 'STRONG'),
            (e[(e.STYLE = 101)] = 'STYLE'),
            (e[(e.SUB = 102)] = 'SUB'),
            (e[(e.SUMMARY = 103)] = 'SUMMARY'),
            (e[(e.SUP = 104)] = 'SUP'),
            (e[(e.TABLE = 105)] = 'TABLE'),
            (e[(e.TBODY = 106)] = 'TBODY'),
            (e[(e.TEMPLATE = 107)] = 'TEMPLATE'),
            (e[(e.TEXTAREA = 108)] = 'TEXTAREA'),
            (e[(e.TFOOT = 109)] = 'TFOOT'),
            (e[(e.TD = 110)] = 'TD'),
            (e[(e.TH = 111)] = 'TH'),
            (e[(e.THEAD = 112)] = 'THEAD'),
            (e[(e.TITLE = 113)] = 'TITLE'),
            (e[(e.TR = 114)] = 'TR'),
            (e[(e.TRACK = 115)] = 'TRACK'),
            (e[(e.TT = 116)] = 'TT'),
            (e[(e.U = 117)] = 'U'),
            (e[(e.UL = 118)] = 'UL'),
            (e[(e.SVG = 119)] = 'SVG'),
            (e[(e.VAR = 120)] = 'VAR'),
            (e[(e.WBR = 121)] = 'WBR'),
            (e[(e.XMP = 122)] = 'XMP')
        })((si = si || (si = {})))
      const li = new Map([
        [ni.A, si.A],
        [ni.ADDRESS, si.ADDRESS],
        [ni.ANNOTATION_XML, si.ANNOTATION_XML],
        [ni.APPLET, si.APPLET],
        [ni.AREA, si.AREA],
        [ni.ARTICLE, si.ARTICLE],
        [ni.ASIDE, si.ASIDE],
        [ni.B, si.B],
        [ni.BASE, si.BASE],
        [ni.BASEFONT, si.BASEFONT],
        [ni.BGSOUND, si.BGSOUND],
        [ni.BIG, si.BIG],
        [ni.BLOCKQUOTE, si.BLOCKQUOTE],
        [ni.BODY, si.BODY],
        [ni.BR, si.BR],
        [ni.BUTTON, si.BUTTON],
        [ni.CAPTION, si.CAPTION],
        [ni.CENTER, si.CENTER],
        [ni.CODE, si.CODE],
        [ni.COL, si.COL],
        [ni.COLGROUP, si.COLGROUP],
        [ni.DD, si.DD],
        [ni.DESC, si.DESC],
        [ni.DETAILS, si.DETAILS],
        [ni.DIALOG, si.DIALOG],
        [ni.DIR, si.DIR],
        [ni.DIV, si.DIV],
        [ni.DL, si.DL],
        [ni.DT, si.DT],
        [ni.EM, si.EM],
        [ni.EMBED, si.EMBED],
        [ni.FIELDSET, si.FIELDSET],
        [ni.FIGCAPTION, si.FIGCAPTION],
        [ni.FIGURE, si.FIGURE],
        [ni.FONT, si.FONT],
        [ni.FOOTER, si.FOOTER],
        [ni.FOREIGN_OBJECT, si.FOREIGN_OBJECT],
        [ni.FORM, si.FORM],
        [ni.FRAME, si.FRAME],
        [ni.FRAMESET, si.FRAMESET],
        [ni.H1, si.H1],
        [ni.H2, si.H2],
        [ni.H3, si.H3],
        [ni.H4, si.H4],
        [ni.H5, si.H5],
        [ni.H6, si.H6],
        [ni.HEAD, si.HEAD],
        [ni.HEADER, si.HEADER],
        [ni.HGROUP, si.HGROUP],
        [ni.HR, si.HR],
        [ni.HTML, si.HTML],
        [ni.I, si.I],
        [ni.IMG, si.IMG],
        [ni.IMAGE, si.IMAGE],
        [ni.INPUT, si.INPUT],
        [ni.IFRAME, si.IFRAME],
        [ni.KEYGEN, si.KEYGEN],
        [ni.LABEL, si.LABEL],
        [ni.LI, si.LI],
        [ni.LINK, si.LINK],
        [ni.LISTING, si.LISTING],
        [ni.MAIN, si.MAIN],
        [ni.MALIGNMARK, si.MALIGNMARK],
        [ni.MARQUEE, si.MARQUEE],
        [ni.MATH, si.MATH],
        [ni.MENU, si.MENU],
        [ni.META, si.META],
        [ni.MGLYPH, si.MGLYPH],
        [ni.MI, si.MI],
        [ni.MO, si.MO],
        [ni.MN, si.MN],
        [ni.MS, si.MS],
        [ni.MTEXT, si.MTEXT],
        [ni.NAV, si.NAV],
        [ni.NOBR, si.NOBR],
        [ni.NOFRAMES, si.NOFRAMES],
        [ni.NOEMBED, si.NOEMBED],
        [ni.NOSCRIPT, si.NOSCRIPT],
        [ni.OBJECT, si.OBJECT],
        [ni.OL, si.OL],
        [ni.OPTGROUP, si.OPTGROUP],
        [ni.OPTION, si.OPTION],
        [ni.P, si.P],
        [ni.PARAM, si.PARAM],
        [ni.PLAINTEXT, si.PLAINTEXT],
        [ni.PRE, si.PRE],
        [ni.RB, si.RB],
        [ni.RP, si.RP],
        [ni.RT, si.RT],
        [ni.RTC, si.RTC],
        [ni.RUBY, si.RUBY],
        [ni.S, si.S],
        [ni.SCRIPT, si.SCRIPT],
        [ni.SECTION, si.SECTION],
        [ni.SELECT, si.SELECT],
        [ni.SOURCE, si.SOURCE],
        [ni.SMALL, si.SMALL],
        [ni.SPAN, si.SPAN],
        [ni.STRIKE, si.STRIKE],
        [ni.STRONG, si.STRONG],
        [ni.STYLE, si.STYLE],
        [ni.SUB, si.SUB],
        [ni.SUMMARY, si.SUMMARY],
        [ni.SUP, si.SUP],
        [ni.TABLE, si.TABLE],
        [ni.TBODY, si.TBODY],
        [ni.TEMPLATE, si.TEMPLATE],
        [ni.TEXTAREA, si.TEXTAREA],
        [ni.TFOOT, si.TFOOT],
        [ni.TD, si.TD],
        [ni.TH, si.TH],
        [ni.THEAD, si.THEAD],
        [ni.TITLE, si.TITLE],
        [ni.TR, si.TR],
        [ni.TRACK, si.TRACK],
        [ni.TT, si.TT],
        [ni.U, si.U],
        [ni.UL, si.UL],
        [ni.SVG, si.SVG],
        [ni.VAR, si.VAR],
        [ni.WBR, si.WBR],
        [ni.XMP, si.XMP],
      ])
      function hi(e) {
        var t
        return null !== (t = li.get(e)) && void 0 !== t ? t : si.UNKNOWN
      }
      const ui = si,
        di = {
          [ei.HTML]: new Set([
            ui.ADDRESS,
            ui.APPLET,
            ui.AREA,
            ui.ARTICLE,
            ui.ASIDE,
            ui.BASE,
            ui.BASEFONT,
            ui.BGSOUND,
            ui.BLOCKQUOTE,
            ui.BODY,
            ui.BR,
            ui.BUTTON,
            ui.CAPTION,
            ui.CENTER,
            ui.COL,
            ui.COLGROUP,
            ui.DD,
            ui.DETAILS,
            ui.DIR,
            ui.DIV,
            ui.DL,
            ui.DT,
            ui.EMBED,
            ui.FIELDSET,
            ui.FIGCAPTION,
            ui.FIGURE,
            ui.FOOTER,
            ui.FORM,
            ui.FRAME,
            ui.FRAMESET,
            ui.H1,
            ui.H2,
            ui.H3,
            ui.H4,
            ui.H5,
            ui.H6,
            ui.HEAD,
            ui.HEADER,
            ui.HGROUP,
            ui.HR,
            ui.HTML,
            ui.IFRAME,
            ui.IMG,
            ui.INPUT,
            ui.LI,
            ui.LINK,
            ui.LISTING,
            ui.MAIN,
            ui.MARQUEE,
            ui.MENU,
            ui.META,
            ui.NAV,
            ui.NOEMBED,
            ui.NOFRAMES,
            ui.NOSCRIPT,
            ui.OBJECT,
            ui.OL,
            ui.P,
            ui.PARAM,
            ui.PLAINTEXT,
            ui.PRE,
            ui.SCRIPT,
            ui.SECTION,
            ui.SELECT,
            ui.SOURCE,
            ui.STYLE,
            ui.SUMMARY,
            ui.TABLE,
            ui.TBODY,
            ui.TD,
            ui.TEMPLATE,
            ui.TEXTAREA,
            ui.TFOOT,
            ui.TH,
            ui.THEAD,
            ui.TITLE,
            ui.TR,
            ui.TRACK,
            ui.UL,
            ui.WBR,
            ui.XMP,
          ]),
          [ei.MATHML]: new Set([
            ui.MI,
            ui.MO,
            ui.MN,
            ui.MS,
            ui.MTEXT,
            ui.ANNOTATION_XML,
          ]),
          [ei.SVG]: new Set([ui.TITLE, ui.FOREIGN_OBJECT, ui.DESC]),
          [ei.XLINK]: new Set(),
          [ei.XML]: new Set(),
          [ei.XMLNS]: new Set(),
        }
      function pi(e) {
        return (
          e === ui.H1 ||
          e === ui.H2 ||
          e === ui.H3 ||
          e === ui.H4 ||
          e === ui.H5 ||
          e === ui.H6
        )
      }
      const Ei = new Set([
          ni.STYLE,
          ni.SCRIPT,
          ni.XMP,
          ni.IFRAME,
          ni.NOEMBED,
          ni.NOFRAMES,
          ni.PLAINTEXT,
        ]),
        mi = new Map([
          [128, 8364],
          [130, 8218],
          [131, 402],
          [132, 8222],
          [133, 8230],
          [134, 8224],
          [135, 8225],
          [136, 710],
          [137, 8240],
          [138, 352],
          [139, 8249],
          [140, 338],
          [142, 381],
          [145, 8216],
          [146, 8217],
          [147, 8220],
          [148, 8221],
          [149, 8226],
          [150, 8211],
          [151, 8212],
          [152, 732],
          [153, 8482],
          [154, 353],
          [155, 8250],
          [156, 339],
          [158, 382],
          [159, 376],
        ])
      var Ti
      !(function (e) {
        ;(e[(e.DATA = 0)] = 'DATA'),
          (e[(e.RCDATA = 1)] = 'RCDATA'),
          (e[(e.RAWTEXT = 2)] = 'RAWTEXT'),
          (e[(e.SCRIPT_DATA = 3)] = 'SCRIPT_DATA'),
          (e[(e.PLAINTEXT = 4)] = 'PLAINTEXT'),
          (e[(e.TAG_OPEN = 5)] = 'TAG_OPEN'),
          (e[(e.END_TAG_OPEN = 6)] = 'END_TAG_OPEN'),
          (e[(e.TAG_NAME = 7)] = 'TAG_NAME'),
          (e[(e.RCDATA_LESS_THAN_SIGN = 8)] = 'RCDATA_LESS_THAN_SIGN'),
          (e[(e.RCDATA_END_TAG_OPEN = 9)] = 'RCDATA_END_TAG_OPEN'),
          (e[(e.RCDATA_END_TAG_NAME = 10)] = 'RCDATA_END_TAG_NAME'),
          (e[(e.RAWTEXT_LESS_THAN_SIGN = 11)] = 'RAWTEXT_LESS_THAN_SIGN'),
          (e[(e.RAWTEXT_END_TAG_OPEN = 12)] = 'RAWTEXT_END_TAG_OPEN'),
          (e[(e.RAWTEXT_END_TAG_NAME = 13)] = 'RAWTEXT_END_TAG_NAME'),
          (e[(e.SCRIPT_DATA_LESS_THAN_SIGN = 14)] =
            'SCRIPT_DATA_LESS_THAN_SIGN'),
          (e[(e.SCRIPT_DATA_END_TAG_OPEN = 15)] = 'SCRIPT_DATA_END_TAG_OPEN'),
          (e[(e.SCRIPT_DATA_END_TAG_NAME = 16)] = 'SCRIPT_DATA_END_TAG_NAME'),
          (e[(e.SCRIPT_DATA_ESCAPE_START = 17)] = 'SCRIPT_DATA_ESCAPE_START'),
          (e[(e.SCRIPT_DATA_ESCAPE_START_DASH = 18)] =
            'SCRIPT_DATA_ESCAPE_START_DASH'),
          (e[(e.SCRIPT_DATA_ESCAPED = 19)] = 'SCRIPT_DATA_ESCAPED'),
          (e[(e.SCRIPT_DATA_ESCAPED_DASH = 20)] = 'SCRIPT_DATA_ESCAPED_DASH'),
          (e[(e.SCRIPT_DATA_ESCAPED_DASH_DASH = 21)] =
            'SCRIPT_DATA_ESCAPED_DASH_DASH'),
          (e[(e.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN = 22)] =
            'SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN'),
          (e[(e.SCRIPT_DATA_ESCAPED_END_TAG_OPEN = 23)] =
            'SCRIPT_DATA_ESCAPED_END_TAG_OPEN'),
          (e[(e.SCRIPT_DATA_ESCAPED_END_TAG_NAME = 24)] =
            'SCRIPT_DATA_ESCAPED_END_TAG_NAME'),
          (e[(e.SCRIPT_DATA_DOUBLE_ESCAPE_START = 25)] =
            'SCRIPT_DATA_DOUBLE_ESCAPE_START'),
          (e[(e.SCRIPT_DATA_DOUBLE_ESCAPED = 26)] =
            'SCRIPT_DATA_DOUBLE_ESCAPED'),
          (e[(e.SCRIPT_DATA_DOUBLE_ESCAPED_DASH = 27)] =
            'SCRIPT_DATA_DOUBLE_ESCAPED_DASH'),
          (e[(e.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH = 28)] =
            'SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH'),
          (e[(e.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN = 29)] =
            'SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN'),
          (e[(e.SCRIPT_DATA_DOUBLE_ESCAPE_END = 30)] =
            'SCRIPT_DATA_DOUBLE_ESCAPE_END'),
          (e[(e.BEFORE_ATTRIBUTE_NAME = 31)] = 'BEFORE_ATTRIBUTE_NAME'),
          (e[(e.ATTRIBUTE_NAME = 32)] = 'ATTRIBUTE_NAME'),
          (e[(e.AFTER_ATTRIBUTE_NAME = 33)] = 'AFTER_ATTRIBUTE_NAME'),
          (e[(e.BEFORE_ATTRIBUTE_VALUE = 34)] = 'BEFORE_ATTRIBUTE_VALUE'),
          (e[(e.ATTRIBUTE_VALUE_DOUBLE_QUOTED = 35)] =
            'ATTRIBUTE_VALUE_DOUBLE_QUOTED'),
          (e[(e.ATTRIBUTE_VALUE_SINGLE_QUOTED = 36)] =
            'ATTRIBUTE_VALUE_SINGLE_QUOTED'),
          (e[(e.ATTRIBUTE_VALUE_UNQUOTED = 37)] = 'ATTRIBUTE_VALUE_UNQUOTED'),
          (e[(e.AFTER_ATTRIBUTE_VALUE_QUOTED = 38)] =
            'AFTER_ATTRIBUTE_VALUE_QUOTED'),
          (e[(e.SELF_CLOSING_START_TAG = 39)] = 'SELF_CLOSING_START_TAG'),
          (e[(e.BOGUS_COMMENT = 40)] = 'BOGUS_COMMENT'),
          (e[(e.MARKUP_DECLARATION_OPEN = 41)] = 'MARKUP_DECLARATION_OPEN'),
          (e[(e.COMMENT_START = 42)] = 'COMMENT_START'),
          (e[(e.COMMENT_START_DASH = 43)] = 'COMMENT_START_DASH'),
          (e[(e.COMMENT = 44)] = 'COMMENT'),
          (e[(e.COMMENT_LESS_THAN_SIGN = 45)] = 'COMMENT_LESS_THAN_SIGN'),
          (e[(e.COMMENT_LESS_THAN_SIGN_BANG = 46)] =
            'COMMENT_LESS_THAN_SIGN_BANG'),
          (e[(e.COMMENT_LESS_THAN_SIGN_BANG_DASH = 47)] =
            'COMMENT_LESS_THAN_SIGN_BANG_DASH'),
          (e[(e.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH = 48)] =
            'COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH'),
          (e[(e.COMMENT_END_DASH = 49)] = 'COMMENT_END_DASH'),
          (e[(e.COMMENT_END = 50)] = 'COMMENT_END'),
          (e[(e.COMMENT_END_BANG = 51)] = 'COMMENT_END_BANG'),
          (e[(e.DOCTYPE = 52)] = 'DOCTYPE'),
          (e[(e.BEFORE_DOCTYPE_NAME = 53)] = 'BEFORE_DOCTYPE_NAME'),
          (e[(e.DOCTYPE_NAME = 54)] = 'DOCTYPE_NAME'),
          (e[(e.AFTER_DOCTYPE_NAME = 55)] = 'AFTER_DOCTYPE_NAME'),
          (e[(e.AFTER_DOCTYPE_PUBLIC_KEYWORD = 56)] =
            'AFTER_DOCTYPE_PUBLIC_KEYWORD'),
          (e[(e.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER = 57)] =
            'BEFORE_DOCTYPE_PUBLIC_IDENTIFIER'),
          (e[(e.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED = 58)] =
            'DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED'),
          (e[(e.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED = 59)] =
            'DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED'),
          (e[(e.AFTER_DOCTYPE_PUBLIC_IDENTIFIER = 60)] =
            'AFTER_DOCTYPE_PUBLIC_IDENTIFIER'),
          (e[(e.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS = 61)] =
            'BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS'),
          (e[(e.AFTER_DOCTYPE_SYSTEM_KEYWORD = 62)] =
            'AFTER_DOCTYPE_SYSTEM_KEYWORD'),
          (e[(e.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER = 63)] =
            'BEFORE_DOCTYPE_SYSTEM_IDENTIFIER'),
          (e[(e.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED = 64)] =
            'DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED'),
          (e[(e.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED = 65)] =
            'DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED'),
          (e[(e.AFTER_DOCTYPE_SYSTEM_IDENTIFIER = 66)] =
            'AFTER_DOCTYPE_SYSTEM_IDENTIFIER'),
          (e[(e.BOGUS_DOCTYPE = 67)] = 'BOGUS_DOCTYPE'),
          (e[(e.CDATA_SECTION = 68)] = 'CDATA_SECTION'),
          (e[(e.CDATA_SECTION_BRACKET = 69)] = 'CDATA_SECTION_BRACKET'),
          (e[(e.CDATA_SECTION_END = 70)] = 'CDATA_SECTION_END'),
          (e[(e.CHARACTER_REFERENCE = 71)] = 'CHARACTER_REFERENCE'),
          (e[(e.NAMED_CHARACTER_REFERENCE = 72)] = 'NAMED_CHARACTER_REFERENCE'),
          (e[(e.AMBIGUOUS_AMPERSAND = 73)] = 'AMBIGUOUS_AMPERSAND'),
          (e[(e.NUMERIC_CHARACTER_REFERENCE = 74)] =
            'NUMERIC_CHARACTER_REFERENCE'),
          (e[(e.HEXADEMICAL_CHARACTER_REFERENCE_START = 75)] =
            'HEXADEMICAL_CHARACTER_REFERENCE_START'),
          (e[(e.HEXADEMICAL_CHARACTER_REFERENCE = 76)] =
            'HEXADEMICAL_CHARACTER_REFERENCE'),
          (e[(e.DECIMAL_CHARACTER_REFERENCE = 77)] =
            'DECIMAL_CHARACTER_REFERENCE'),
          (e[(e.NUMERIC_CHARACTER_REFERENCE_END = 78)] =
            'NUMERIC_CHARACTER_REFERENCE_END')
      })(Ti || (Ti = {}))
      const fi = {
        DATA: Ti.DATA,
        RCDATA: Ti.RCDATA,
        RAWTEXT: Ti.RAWTEXT,
        SCRIPT_DATA: Ti.SCRIPT_DATA,
        PLAINTEXT: Ti.PLAINTEXT,
        CDATA_SECTION: Ti.CDATA_SECTION,
      }
      function Ai(e) {
        return e >= va.DIGIT_0 && e <= va.DIGIT_9
      }
      function gi(e) {
        return e >= va.LATIN_CAPITAL_A && e <= va.LATIN_CAPITAL_Z
      }
      function _i(e) {
        return (
          (function (e) {
            return e >= va.LATIN_SMALL_A && e <= va.LATIN_SMALL_Z
          })(e) || gi(e)
        )
      }
      function Ni(e) {
        return _i(e) || Ai(e)
      }
      function Ci(e) {
        return e >= va.LATIN_CAPITAL_A && e <= va.LATIN_CAPITAL_F
      }
      function Ii(e) {
        return e >= va.LATIN_SMALL_A && e <= va.LATIN_SMALL_F
      }
      function bi(e) {
        return e + 32
      }
      function Si(e) {
        return (
          e === va.SPACE ||
          e === va.LINE_FEED ||
          e === va.TABULATION ||
          e === va.FORM_FEED
        )
      }
      function Di(e) {
        return Si(e) || e === va.SOLIDUS || e === va.GREATER_THAN_SIGN
      }
      class Ri {
        constructor(e, t) {
          ;(this.options = e),
            (this.handler = t),
            (this.paused = !1),
            (this.inLoop = !1),
            (this.inForeignNode = !1),
            (this.lastStartTagName = ''),
            (this.active = !1),
            (this.state = Ti.DATA),
            (this.returnState = Ti.DATA),
            (this.charRefCode = -1),
            (this.consumedAfterSnapshot = -1),
            (this.currentCharacterToken = null),
            (this.currentToken = null),
            (this.currentAttr = { name: '', value: '' }),
            (this.preprocessor = new Va(t)),
            (this.currentLocation = this.getCurrentLocation(-1))
        }
        _err(e) {
          var t, r
          null === (r = (t = this.handler).onParseError) ||
            void 0 === r ||
            r.call(t, this.preprocessor.getError(e))
        }
        getCurrentLocation(e) {
          return this.options.sourceCodeLocationInfo
            ? {
                startLine: this.preprocessor.line,
                startCol: this.preprocessor.col - e,
                startOffset: this.preprocessor.offset - e,
                endLine: -1,
                endCol: -1,
                endOffset: -1,
              }
            : null
        }
        _runParsingLoop() {
          if (!this.inLoop) {
            for (this.inLoop = !0; this.active && !this.paused; ) {
              this.consumedAfterSnapshot = 0
              const e = this._consume()
              this._ensureHibernation() || this._callState(e)
            }
            this.inLoop = !1
          }
        }
        pause() {
          this.paused = !0
        }
        resume(e) {
          if (!this.paused) throw new Error('Parser was already resumed')
          ;(this.paused = !1),
            this.inLoop ||
              (this._runParsingLoop(), this.paused || null == e || e())
        }
        write(e, t, r) {
          ;(this.active = !0),
            this.preprocessor.write(e, t),
            this._runParsingLoop(),
            this.paused || null == r || r()
        }
        insertHtmlAtCurrentPos(e) {
          ;(this.active = !0),
            this.preprocessor.insertHtmlAtCurrentPos(e),
            this._runParsingLoop()
        }
        _ensureHibernation() {
          return (
            !!this.preprocessor.endOfChunkHit &&
            (this._unconsume(this.consumedAfterSnapshot),
            (this.active = !1),
            !0)
          )
        }
        _consume() {
          return this.consumedAfterSnapshot++, this.preprocessor.advance()
        }
        _unconsume(e) {
          ;(this.consumedAfterSnapshot -= e), this.preprocessor.retreat(e)
        }
        _reconsumeInState(e, t) {
          ;(this.state = e), this._callState(t)
        }
        _advanceBy(e) {
          this.consumedAfterSnapshot += e
          for (let t = 0; t < e; t++) this.preprocessor.advance()
        }
        _consumeSequenceIfMatch(e, t) {
          return (
            !!this.preprocessor.startsWith(e, t) &&
            (this._advanceBy(e.length - 1), !0)
          )
        }
        _createStartTagToken() {
          this.currentToken = {
            type: Ga.START_TAG,
            tagName: '',
            tagID: si.UNKNOWN,
            selfClosing: !1,
            ackSelfClosing: !1,
            attrs: [],
            location: this.getCurrentLocation(1),
          }
        }
        _createEndTagToken() {
          this.currentToken = {
            type: Ga.END_TAG,
            tagName: '',
            tagID: si.UNKNOWN,
            selfClosing: !1,
            ackSelfClosing: !1,
            attrs: [],
            location: this.getCurrentLocation(2),
          }
        }
        _createCommentToken(e) {
          this.currentToken = {
            type: Ga.COMMENT,
            data: '',
            location: this.getCurrentLocation(e),
          }
        }
        _createDoctypeToken(e) {
          this.currentToken = {
            type: Ga.DOCTYPE,
            name: e,
            forceQuirks: !1,
            publicId: null,
            systemId: null,
            location: this.currentLocation,
          }
        }
        _createCharacterToken(e, t) {
          this.currentCharacterToken = {
            type: e,
            chars: t,
            location: this.currentLocation,
          }
        }
        _createAttr(e) {
          ;(this.currentAttr = { name: e, value: '' }),
            (this.currentLocation = this.getCurrentLocation(0))
        }
        _leaveAttrName() {
          var e, t
          const r = this.currentToken
          null === Ya(r, this.currentAttr.name)
            ? (r.attrs.push(this.currentAttr),
              r.location &&
                this.currentLocation &&
                (((null !== (e = (t = r.location).attrs) && void 0 !== e
                  ? e
                  : (t.attrs = Object.create(null)))[this.currentAttr.name] =
                  this.currentLocation),
                this._leaveAttrValue()))
            : this._err(qa.duplicateAttribute)
        }
        _leaveAttrValue() {
          this.currentLocation &&
            ((this.currentLocation.endLine = this.preprocessor.line),
            (this.currentLocation.endCol = this.preprocessor.col),
            (this.currentLocation.endOffset = this.preprocessor.offset))
        }
        prepareToken(e) {
          this._emitCurrentCharacterToken(e.location),
            (this.currentToken = null),
            e.location &&
              ((e.location.endLine = this.preprocessor.line),
              (e.location.endCol = this.preprocessor.col + 1),
              (e.location.endOffset = this.preprocessor.offset + 1)),
            (this.currentLocation = this.getCurrentLocation(-1))
        }
        emitCurrentTagToken() {
          const e = this.currentToken
          this.prepareToken(e),
            (e.tagID = hi(e.tagName)),
            e.type === Ga.START_TAG
              ? ((this.lastStartTagName = e.tagName),
                this.handler.onStartTag(e))
              : (e.attrs.length > 0 && this._err(qa.endTagWithAttributes),
                e.selfClosing && this._err(qa.endTagWithTrailingSolidus),
                this.handler.onEndTag(e)),
            this.preprocessor.dropParsedChunk()
        }
        emitCurrentComment(e) {
          this.prepareToken(e),
            this.handler.onComment(e),
            this.preprocessor.dropParsedChunk()
        }
        emitCurrentDoctype(e) {
          this.prepareToken(e),
            this.handler.onDoctype(e),
            this.preprocessor.dropParsedChunk()
        }
        _emitCurrentCharacterToken(e) {
          if (this.currentCharacterToken) {
            switch (
              (e &&
                this.currentCharacterToken.location &&
                ((this.currentCharacterToken.location.endLine = e.startLine),
                (this.currentCharacterToken.location.endCol = e.startCol),
                (this.currentCharacterToken.location.endOffset =
                  e.startOffset)),
              this.currentCharacterToken.type)
            ) {
              case Ga.CHARACTER:
                this.handler.onCharacter(this.currentCharacterToken)
                break
              case Ga.NULL_CHARACTER:
                this.handler.onNullCharacter(this.currentCharacterToken)
                break
              case Ga.WHITESPACE_CHARACTER:
                this.handler.onWhitespaceCharacter(this.currentCharacterToken)
            }
            this.currentCharacterToken = null
          }
        }
        _emitEOFToken() {
          const e = this.getCurrentLocation(0)
          e &&
            ((e.endLine = e.startLine),
            (e.endCol = e.startCol),
            (e.endOffset = e.startOffset)),
            this._emitCurrentCharacterToken(e),
            this.handler.onEof({ type: Ga.EOF, location: e }),
            (this.active = !1)
        }
        _appendCharToCurrentCharacterToken(e, t) {
          if (this.currentCharacterToken) {
            if (this.currentCharacterToken.type === e)
              return void (this.currentCharacterToken.chars += t)
            ;(this.currentLocation = this.getCurrentLocation(0)),
              this._emitCurrentCharacterToken(this.currentLocation),
              this.preprocessor.dropParsedChunk()
          }
          this._createCharacterToken(e, t)
        }
        _emitCodePoint(e) {
          const t = Si(e)
            ? Ga.WHITESPACE_CHARACTER
            : e === va.NULL
            ? Ga.NULL_CHARACTER
            : Ga.CHARACTER
          this._appendCharToCurrentCharacterToken(t, String.fromCodePoint(e))
        }
        _emitChars(e) {
          this._appendCharToCurrentCharacterToken(Ga.CHARACTER, e)
        }
        _matchNamedCharacterReference(e) {
          let t = null,
            r = 0,
            n = !1
          for (
            let a = 0, i = Qa[0];
            a >= 0 && ((a = ci(Qa, i, a + 1, e)), !(a < 0));
            e = this._consume()
          ) {
            ;(r += 1), (i = Qa[a])
            const o = i & $a.VALUE_LENGTH
            if (o) {
              const i = (o >> 14) - 1
              if (
                (e !== va.SEMICOLON &&
                this._isCharacterReferenceInAttribute() &&
                ((s = this.preprocessor.peek(1)) === va.EQUALS_SIGN || Ni(s))
                  ? ((t = [va.AMPERSAND]), (a += i))
                  : ((t =
                      0 === i
                        ? [Qa[a] & ~$a.VALUE_LENGTH]
                        : 1 === i
                        ? [Qa[++a]]
                        : [Qa[++a], Qa[++a]]),
                    (r = 0),
                    (n = e !== va.SEMICOLON)),
                0 === i)
              ) {
                this._consume()
                break
              }
            }
          }
          var s
          return (
            this._unconsume(r),
            n &&
              !this.preprocessor.endOfChunkHit &&
              this._err(qa.missingSemicolonAfterCharacterReference),
            this._unconsume(1),
            t
          )
        }
        _isCharacterReferenceInAttribute() {
          return (
            this.returnState === Ti.ATTRIBUTE_VALUE_DOUBLE_QUOTED ||
            this.returnState === Ti.ATTRIBUTE_VALUE_SINGLE_QUOTED ||
            this.returnState === Ti.ATTRIBUTE_VALUE_UNQUOTED
          )
        }
        _flushCodePointConsumedAsCharacterReference(e) {
          this._isCharacterReferenceInAttribute()
            ? (this.currentAttr.value += String.fromCodePoint(e))
            : this._emitCodePoint(e)
        }
        _callState(e) {
          switch (this.state) {
            case Ti.DATA:
              this._stateData(e)
              break
            case Ti.RCDATA:
              this._stateRcdata(e)
              break
            case Ti.RAWTEXT:
              this._stateRawtext(e)
              break
            case Ti.SCRIPT_DATA:
              this._stateScriptData(e)
              break
            case Ti.PLAINTEXT:
              this._statePlaintext(e)
              break
            case Ti.TAG_OPEN:
              this._stateTagOpen(e)
              break
            case Ti.END_TAG_OPEN:
              this._stateEndTagOpen(e)
              break
            case Ti.TAG_NAME:
              this._stateTagName(e)
              break
            case Ti.RCDATA_LESS_THAN_SIGN:
              this._stateRcdataLessThanSign(e)
              break
            case Ti.RCDATA_END_TAG_OPEN:
              this._stateRcdataEndTagOpen(e)
              break
            case Ti.RCDATA_END_TAG_NAME:
              this._stateRcdataEndTagName(e)
              break
            case Ti.RAWTEXT_LESS_THAN_SIGN:
              this._stateRawtextLessThanSign(e)
              break
            case Ti.RAWTEXT_END_TAG_OPEN:
              this._stateRawtextEndTagOpen(e)
              break
            case Ti.RAWTEXT_END_TAG_NAME:
              this._stateRawtextEndTagName(e)
              break
            case Ti.SCRIPT_DATA_LESS_THAN_SIGN:
              this._stateScriptDataLessThanSign(e)
              break
            case Ti.SCRIPT_DATA_END_TAG_OPEN:
              this._stateScriptDataEndTagOpen(e)
              break
            case Ti.SCRIPT_DATA_END_TAG_NAME:
              this._stateScriptDataEndTagName(e)
              break
            case Ti.SCRIPT_DATA_ESCAPE_START:
              this._stateScriptDataEscapeStart(e)
              break
            case Ti.SCRIPT_DATA_ESCAPE_START_DASH:
              this._stateScriptDataEscapeStartDash(e)
              break
            case Ti.SCRIPT_DATA_ESCAPED:
              this._stateScriptDataEscaped(e)
              break
            case Ti.SCRIPT_DATA_ESCAPED_DASH:
              this._stateScriptDataEscapedDash(e)
              break
            case Ti.SCRIPT_DATA_ESCAPED_DASH_DASH:
              this._stateScriptDataEscapedDashDash(e)
              break
            case Ti.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN:
              this._stateScriptDataEscapedLessThanSign(e)
              break
            case Ti.SCRIPT_DATA_ESCAPED_END_TAG_OPEN:
              this._stateScriptDataEscapedEndTagOpen(e)
              break
            case Ti.SCRIPT_DATA_ESCAPED_END_TAG_NAME:
              this._stateScriptDataEscapedEndTagName(e)
              break
            case Ti.SCRIPT_DATA_DOUBLE_ESCAPE_START:
              this._stateScriptDataDoubleEscapeStart(e)
              break
            case Ti.SCRIPT_DATA_DOUBLE_ESCAPED:
              this._stateScriptDataDoubleEscaped(e)
              break
            case Ti.SCRIPT_DATA_DOUBLE_ESCAPED_DASH:
              this._stateScriptDataDoubleEscapedDash(e)
              break
            case Ti.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH:
              this._stateScriptDataDoubleEscapedDashDash(e)
              break
            case Ti.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN:
              this._stateScriptDataDoubleEscapedLessThanSign(e)
              break
            case Ti.SCRIPT_DATA_DOUBLE_ESCAPE_END:
              this._stateScriptDataDoubleEscapeEnd(e)
              break
            case Ti.BEFORE_ATTRIBUTE_NAME:
              this._stateBeforeAttributeName(e)
              break
            case Ti.ATTRIBUTE_NAME:
              this._stateAttributeName(e)
              break
            case Ti.AFTER_ATTRIBUTE_NAME:
              this._stateAfterAttributeName(e)
              break
            case Ti.BEFORE_ATTRIBUTE_VALUE:
              this._stateBeforeAttributeValue(e)
              break
            case Ti.ATTRIBUTE_VALUE_DOUBLE_QUOTED:
              this._stateAttributeValueDoubleQuoted(e)
              break
            case Ti.ATTRIBUTE_VALUE_SINGLE_QUOTED:
              this._stateAttributeValueSingleQuoted(e)
              break
            case Ti.ATTRIBUTE_VALUE_UNQUOTED:
              this._stateAttributeValueUnquoted(e)
              break
            case Ti.AFTER_ATTRIBUTE_VALUE_QUOTED:
              this._stateAfterAttributeValueQuoted(e)
              break
            case Ti.SELF_CLOSING_START_TAG:
              this._stateSelfClosingStartTag(e)
              break
            case Ti.BOGUS_COMMENT:
              this._stateBogusComment(e)
              break
            case Ti.MARKUP_DECLARATION_OPEN:
              this._stateMarkupDeclarationOpen(e)
              break
            case Ti.COMMENT_START:
              this._stateCommentStart(e)
              break
            case Ti.COMMENT_START_DASH:
              this._stateCommentStartDash(e)
              break
            case Ti.COMMENT:
              this._stateComment(e)
              break
            case Ti.COMMENT_LESS_THAN_SIGN:
              this._stateCommentLessThanSign(e)
              break
            case Ti.COMMENT_LESS_THAN_SIGN_BANG:
              this._stateCommentLessThanSignBang(e)
              break
            case Ti.COMMENT_LESS_THAN_SIGN_BANG_DASH:
              this._stateCommentLessThanSignBangDash(e)
              break
            case Ti.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH:
              this._stateCommentLessThanSignBangDashDash(e)
              break
            case Ti.COMMENT_END_DASH:
              this._stateCommentEndDash(e)
              break
            case Ti.COMMENT_END:
              this._stateCommentEnd(e)
              break
            case Ti.COMMENT_END_BANG:
              this._stateCommentEndBang(e)
              break
            case Ti.DOCTYPE:
              this._stateDoctype(e)
              break
            case Ti.BEFORE_DOCTYPE_NAME:
              this._stateBeforeDoctypeName(e)
              break
            case Ti.DOCTYPE_NAME:
              this._stateDoctypeName(e)
              break
            case Ti.AFTER_DOCTYPE_NAME:
              this._stateAfterDoctypeName(e)
              break
            case Ti.AFTER_DOCTYPE_PUBLIC_KEYWORD:
              this._stateAfterDoctypePublicKeyword(e)
              break
            case Ti.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER:
              this._stateBeforeDoctypePublicIdentifier(e)
              break
            case Ti.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED:
              this._stateDoctypePublicIdentifierDoubleQuoted(e)
              break
            case Ti.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED:
              this._stateDoctypePublicIdentifierSingleQuoted(e)
              break
            case Ti.AFTER_DOCTYPE_PUBLIC_IDENTIFIER:
              this._stateAfterDoctypePublicIdentifier(e)
              break
            case Ti.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS:
              this._stateBetweenDoctypePublicAndSystemIdentifiers(e)
              break
            case Ti.AFTER_DOCTYPE_SYSTEM_KEYWORD:
              this._stateAfterDoctypeSystemKeyword(e)
              break
            case Ti.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER:
              this._stateBeforeDoctypeSystemIdentifier(e)
              break
            case Ti.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED:
              this._stateDoctypeSystemIdentifierDoubleQuoted(e)
              break
            case Ti.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED:
              this._stateDoctypeSystemIdentifierSingleQuoted(e)
              break
            case Ti.AFTER_DOCTYPE_SYSTEM_IDENTIFIER:
              this._stateAfterDoctypeSystemIdentifier(e)
              break
            case Ti.BOGUS_DOCTYPE:
              this._stateBogusDoctype(e)
              break
            case Ti.CDATA_SECTION:
              this._stateCdataSection(e)
              break
            case Ti.CDATA_SECTION_BRACKET:
              this._stateCdataSectionBracket(e)
              break
            case Ti.CDATA_SECTION_END:
              this._stateCdataSectionEnd(e)
              break
            case Ti.CHARACTER_REFERENCE:
              this._stateCharacterReference(e)
              break
            case Ti.NAMED_CHARACTER_REFERENCE:
              this._stateNamedCharacterReference(e)
              break
            case Ti.AMBIGUOUS_AMPERSAND:
              this._stateAmbiguousAmpersand(e)
              break
            case Ti.NUMERIC_CHARACTER_REFERENCE:
              this._stateNumericCharacterReference(e)
              break
            case Ti.HEXADEMICAL_CHARACTER_REFERENCE_START:
              this._stateHexademicalCharacterReferenceStart(e)
              break
            case Ti.HEXADEMICAL_CHARACTER_REFERENCE:
              this._stateHexademicalCharacterReference(e)
              break
            case Ti.DECIMAL_CHARACTER_REFERENCE:
              this._stateDecimalCharacterReference(e)
              break
            case Ti.NUMERIC_CHARACTER_REFERENCE_END:
              this._stateNumericCharacterReferenceEnd(e)
              break
            default:
              throw new Error('Unknown state')
          }
        }
        _stateData(e) {
          switch (e) {
            case va.LESS_THAN_SIGN:
              this.state = Ti.TAG_OPEN
              break
            case va.AMPERSAND:
              ;(this.returnState = Ti.DATA),
                (this.state = Ti.CHARACTER_REFERENCE)
              break
            case va.NULL:
              this._err(qa.unexpectedNullCharacter), this._emitCodePoint(e)
              break
            case va.EOF:
              this._emitEOFToken()
              break
            default:
              this._emitCodePoint(e)
          }
        }
        _stateRcdata(e) {
          switch (e) {
            case va.AMPERSAND:
              ;(this.returnState = Ti.RCDATA),
                (this.state = Ti.CHARACTER_REFERENCE)
              break
            case va.LESS_THAN_SIGN:
              this.state = Ti.RCDATA_LESS_THAN_SIGN
              break
            case va.NULL:
              this._err(qa.unexpectedNullCharacter), this._emitChars(Pa)
              break
            case va.EOF:
              this._emitEOFToken()
              break
            default:
              this._emitCodePoint(e)
          }
        }
        _stateRawtext(e) {
          switch (e) {
            case va.LESS_THAN_SIGN:
              this.state = Ti.RAWTEXT_LESS_THAN_SIGN
              break
            case va.NULL:
              this._err(qa.unexpectedNullCharacter), this._emitChars(Pa)
              break
            case va.EOF:
              this._emitEOFToken()
              break
            default:
              this._emitCodePoint(e)
          }
        }
        _stateScriptData(e) {
          switch (e) {
            case va.LESS_THAN_SIGN:
              this.state = Ti.SCRIPT_DATA_LESS_THAN_SIGN
              break
            case va.NULL:
              this._err(qa.unexpectedNullCharacter), this._emitChars(Pa)
              break
            case va.EOF:
              this._emitEOFToken()
              break
            default:
              this._emitCodePoint(e)
          }
        }
        _statePlaintext(e) {
          switch (e) {
            case va.NULL:
              this._err(qa.unexpectedNullCharacter), this._emitChars(Pa)
              break
            case va.EOF:
              this._emitEOFToken()
              break
            default:
              this._emitCodePoint(e)
          }
        }
        _stateTagOpen(e) {
          if (_i(e))
            this._createStartTagToken(),
              (this.state = Ti.TAG_NAME),
              this._stateTagName(e)
          else
            switch (e) {
              case va.EXCLAMATION_MARK:
                this.state = Ti.MARKUP_DECLARATION_OPEN
                break
              case va.SOLIDUS:
                this.state = Ti.END_TAG_OPEN
                break
              case va.QUESTION_MARK:
                this._err(qa.unexpectedQuestionMarkInsteadOfTagName),
                  this._createCommentToken(1),
                  (this.state = Ti.BOGUS_COMMENT),
                  this._stateBogusComment(e)
                break
              case va.EOF:
                this._err(qa.eofBeforeTagName),
                  this._emitChars('<'),
                  this._emitEOFToken()
                break
              default:
                this._err(qa.invalidFirstCharacterOfTagName),
                  this._emitChars('<'),
                  (this.state = Ti.DATA),
                  this._stateData(e)
            }
        }
        _stateEndTagOpen(e) {
          if (_i(e))
            this._createEndTagToken(),
              (this.state = Ti.TAG_NAME),
              this._stateTagName(e)
          else
            switch (e) {
              case va.GREATER_THAN_SIGN:
                this._err(qa.missingEndTagName), (this.state = Ti.DATA)
                break
              case va.EOF:
                this._err(qa.eofBeforeTagName),
                  this._emitChars('</'),
                  this._emitEOFToken()
                break
              default:
                this._err(qa.invalidFirstCharacterOfTagName),
                  this._createCommentToken(2),
                  (this.state = Ti.BOGUS_COMMENT),
                  this._stateBogusComment(e)
            }
        }
        _stateTagName(e) {
          const t = this.currentToken
          switch (e) {
            case va.SPACE:
            case va.LINE_FEED:
            case va.TABULATION:
            case va.FORM_FEED:
              this.state = Ti.BEFORE_ATTRIBUTE_NAME
              break
            case va.SOLIDUS:
              this.state = Ti.SELF_CLOSING_START_TAG
              break
            case va.GREATER_THAN_SIGN:
              ;(this.state = Ti.DATA), this.emitCurrentTagToken()
              break
            case va.NULL:
              this._err(qa.unexpectedNullCharacter), (t.tagName += Pa)
              break
            case va.EOF:
              this._err(qa.eofInTag), this._emitEOFToken()
              break
            default:
              t.tagName += String.fromCodePoint(gi(e) ? bi(e) : e)
          }
        }
        _stateRcdataLessThanSign(e) {
          e === va.SOLIDUS
            ? (this.state = Ti.RCDATA_END_TAG_OPEN)
            : (this._emitChars('<'),
              (this.state = Ti.RCDATA),
              this._stateRcdata(e))
        }
        _stateRcdataEndTagOpen(e) {
          _i(e)
            ? ((this.state = Ti.RCDATA_END_TAG_NAME),
              this._stateRcdataEndTagName(e))
            : (this._emitChars('</'),
              (this.state = Ti.RCDATA),
              this._stateRcdata(e))
        }
        handleSpecialEndTag(e) {
          if (!this.preprocessor.startsWith(this.lastStartTagName, !1))
            return !this._ensureHibernation()
          switch (
            (this._createEndTagToken(),
            (this.currentToken.tagName = this.lastStartTagName),
            this.preprocessor.peek(this.lastStartTagName.length))
          ) {
            case va.SPACE:
            case va.LINE_FEED:
            case va.TABULATION:
            case va.FORM_FEED:
              return (
                this._advanceBy(this.lastStartTagName.length),
                (this.state = Ti.BEFORE_ATTRIBUTE_NAME),
                !1
              )
            case va.SOLIDUS:
              return (
                this._advanceBy(this.lastStartTagName.length),
                (this.state = Ti.SELF_CLOSING_START_TAG),
                !1
              )
            case va.GREATER_THAN_SIGN:
              return (
                this._advanceBy(this.lastStartTagName.length),
                this.emitCurrentTagToken(),
                (this.state = Ti.DATA),
                !1
              )
            default:
              return !this._ensureHibernation()
          }
        }
        _stateRcdataEndTagName(e) {
          this.handleSpecialEndTag(e) &&
            (this._emitChars('</'),
            (this.state = Ti.RCDATA),
            this._stateRcdata(e))
        }
        _stateRawtextLessThanSign(e) {
          e === va.SOLIDUS
            ? (this.state = Ti.RAWTEXT_END_TAG_OPEN)
            : (this._emitChars('<'),
              (this.state = Ti.RAWTEXT),
              this._stateRawtext(e))
        }
        _stateRawtextEndTagOpen(e) {
          _i(e)
            ? ((this.state = Ti.RAWTEXT_END_TAG_NAME),
              this._stateRawtextEndTagName(e))
            : (this._emitChars('</'),
              (this.state = Ti.RAWTEXT),
              this._stateRawtext(e))
        }
        _stateRawtextEndTagName(e) {
          this.handleSpecialEndTag(e) &&
            (this._emitChars('</'),
            (this.state = Ti.RAWTEXT),
            this._stateRawtext(e))
        }
        _stateScriptDataLessThanSign(e) {
          switch (e) {
            case va.SOLIDUS:
              this.state = Ti.SCRIPT_DATA_END_TAG_OPEN
              break
            case va.EXCLAMATION_MARK:
              ;(this.state = Ti.SCRIPT_DATA_ESCAPE_START), this._emitChars('<!')
              break
            default:
              this._emitChars('<'),
                (this.state = Ti.SCRIPT_DATA),
                this._stateScriptData(e)
          }
        }
        _stateScriptDataEndTagOpen(e) {
          _i(e)
            ? ((this.state = Ti.SCRIPT_DATA_END_TAG_NAME),
              this._stateScriptDataEndTagName(e))
            : (this._emitChars('</'),
              (this.state = Ti.SCRIPT_DATA),
              this._stateScriptData(e))
        }
        _stateScriptDataEndTagName(e) {
          this.handleSpecialEndTag(e) &&
            (this._emitChars('</'),
            (this.state = Ti.SCRIPT_DATA),
            this._stateScriptData(e))
        }
        _stateScriptDataEscapeStart(e) {
          e === va.HYPHEN_MINUS
            ? ((this.state = Ti.SCRIPT_DATA_ESCAPE_START_DASH),
              this._emitChars('-'))
            : ((this.state = Ti.SCRIPT_DATA), this._stateScriptData(e))
        }
        _stateScriptDataEscapeStartDash(e) {
          e === va.HYPHEN_MINUS
            ? ((this.state = Ti.SCRIPT_DATA_ESCAPED_DASH_DASH),
              this._emitChars('-'))
            : ((this.state = Ti.SCRIPT_DATA), this._stateScriptData(e))
        }
        _stateScriptDataEscaped(e) {
          switch (e) {
            case va.HYPHEN_MINUS:
              ;(this.state = Ti.SCRIPT_DATA_ESCAPED_DASH), this._emitChars('-')
              break
            case va.LESS_THAN_SIGN:
              this.state = Ti.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN
              break
            case va.NULL:
              this._err(qa.unexpectedNullCharacter), this._emitChars(Pa)
              break
            case va.EOF:
              this._err(qa.eofInScriptHtmlCommentLikeText), this._emitEOFToken()
              break
            default:
              this._emitCodePoint(e)
          }
        }
        _stateScriptDataEscapedDash(e) {
          switch (e) {
            case va.HYPHEN_MINUS:
              ;(this.state = Ti.SCRIPT_DATA_ESCAPED_DASH_DASH),
                this._emitChars('-')
              break
            case va.LESS_THAN_SIGN:
              this.state = Ti.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN
              break
            case va.NULL:
              this._err(qa.unexpectedNullCharacter),
                (this.state = Ti.SCRIPT_DATA_ESCAPED),
                this._emitChars(Pa)
              break
            case va.EOF:
              this._err(qa.eofInScriptHtmlCommentLikeText), this._emitEOFToken()
              break
            default:
              ;(this.state = Ti.SCRIPT_DATA_ESCAPED), this._emitCodePoint(e)
          }
        }
        _stateScriptDataEscapedDashDash(e) {
          switch (e) {
            case va.HYPHEN_MINUS:
              this._emitChars('-')
              break
            case va.LESS_THAN_SIGN:
              this.state = Ti.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN
              break
            case va.GREATER_THAN_SIGN:
              ;(this.state = Ti.SCRIPT_DATA), this._emitChars('>')
              break
            case va.NULL:
              this._err(qa.unexpectedNullCharacter),
                (this.state = Ti.SCRIPT_DATA_ESCAPED),
                this._emitChars(Pa)
              break
            case va.EOF:
              this._err(qa.eofInScriptHtmlCommentLikeText), this._emitEOFToken()
              break
            default:
              ;(this.state = Ti.SCRIPT_DATA_ESCAPED), this._emitCodePoint(e)
          }
        }
        _stateScriptDataEscapedLessThanSign(e) {
          e === va.SOLIDUS
            ? (this.state = Ti.SCRIPT_DATA_ESCAPED_END_TAG_OPEN)
            : _i(e)
            ? (this._emitChars('<'),
              (this.state = Ti.SCRIPT_DATA_DOUBLE_ESCAPE_START),
              this._stateScriptDataDoubleEscapeStart(e))
            : (this._emitChars('<'),
              (this.state = Ti.SCRIPT_DATA_ESCAPED),
              this._stateScriptDataEscaped(e))
        }
        _stateScriptDataEscapedEndTagOpen(e) {
          _i(e)
            ? ((this.state = Ti.SCRIPT_DATA_ESCAPED_END_TAG_NAME),
              this._stateScriptDataEscapedEndTagName(e))
            : (this._emitChars('</'),
              (this.state = Ti.SCRIPT_DATA_ESCAPED),
              this._stateScriptDataEscaped(e))
        }
        _stateScriptDataEscapedEndTagName(e) {
          this.handleSpecialEndTag(e) &&
            (this._emitChars('</'),
            (this.state = Ti.SCRIPT_DATA_ESCAPED),
            this._stateScriptDataEscaped(e))
        }
        _stateScriptDataDoubleEscapeStart(e) {
          if (
            this.preprocessor.startsWith(Ba, !1) &&
            Di(this.preprocessor.peek(6))
          ) {
            this._emitCodePoint(e)
            for (let e = 0; e < 6; e++) this._emitCodePoint(this._consume())
            this.state = Ti.SCRIPT_DATA_DOUBLE_ESCAPED
          } else
            this._ensureHibernation() ||
              ((this.state = Ti.SCRIPT_DATA_ESCAPED),
              this._stateScriptDataEscaped(e))
        }
        _stateScriptDataDoubleEscaped(e) {
          switch (e) {
            case va.HYPHEN_MINUS:
              ;(this.state = Ti.SCRIPT_DATA_DOUBLE_ESCAPED_DASH),
                this._emitChars('-')
              break
            case va.LESS_THAN_SIGN:
              ;(this.state = Ti.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN),
                this._emitChars('<')
              break
            case va.NULL:
              this._err(qa.unexpectedNullCharacter), this._emitChars(Pa)
              break
            case va.EOF:
              this._err(qa.eofInScriptHtmlCommentLikeText), this._emitEOFToken()
              break
            default:
              this._emitCodePoint(e)
          }
        }
        _stateScriptDataDoubleEscapedDash(e) {
          switch (e) {
            case va.HYPHEN_MINUS:
              ;(this.state = Ti.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH),
                this._emitChars('-')
              break
            case va.LESS_THAN_SIGN:
              ;(this.state = Ti.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN),
                this._emitChars('<')
              break
            case va.NULL:
              this._err(qa.unexpectedNullCharacter),
                (this.state = Ti.SCRIPT_DATA_DOUBLE_ESCAPED),
                this._emitChars(Pa)
              break
            case va.EOF:
              this._err(qa.eofInScriptHtmlCommentLikeText), this._emitEOFToken()
              break
            default:
              ;(this.state = Ti.SCRIPT_DATA_DOUBLE_ESCAPED),
                this._emitCodePoint(e)
          }
        }
        _stateScriptDataDoubleEscapedDashDash(e) {
          switch (e) {
            case va.HYPHEN_MINUS:
              this._emitChars('-')
              break
            case va.LESS_THAN_SIGN:
              ;(this.state = Ti.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN),
                this._emitChars('<')
              break
            case va.GREATER_THAN_SIGN:
              ;(this.state = Ti.SCRIPT_DATA), this._emitChars('>')
              break
            case va.NULL:
              this._err(qa.unexpectedNullCharacter),
                (this.state = Ti.SCRIPT_DATA_DOUBLE_ESCAPED),
                this._emitChars(Pa)
              break
            case va.EOF:
              this._err(qa.eofInScriptHtmlCommentLikeText), this._emitEOFToken()
              break
            default:
              ;(this.state = Ti.SCRIPT_DATA_DOUBLE_ESCAPED),
                this._emitCodePoint(e)
          }
        }
        _stateScriptDataDoubleEscapedLessThanSign(e) {
          e === va.SOLIDUS
            ? ((this.state = Ti.SCRIPT_DATA_DOUBLE_ESCAPE_END),
              this._emitChars('/'))
            : ((this.state = Ti.SCRIPT_DATA_DOUBLE_ESCAPED),
              this._stateScriptDataDoubleEscaped(e))
        }
        _stateScriptDataDoubleEscapeEnd(e) {
          if (
            this.preprocessor.startsWith(Ba, !1) &&
            Di(this.preprocessor.peek(6))
          ) {
            this._emitCodePoint(e)
            for (let e = 0; e < 6; e++) this._emitCodePoint(this._consume())
            this.state = Ti.SCRIPT_DATA_ESCAPED
          } else
            this._ensureHibernation() ||
              ((this.state = Ti.SCRIPT_DATA_DOUBLE_ESCAPED),
              this._stateScriptDataDoubleEscaped(e))
        }
        _stateBeforeAttributeName(e) {
          switch (e) {
            case va.SPACE:
            case va.LINE_FEED:
            case va.TABULATION:
            case va.FORM_FEED:
              break
            case va.SOLIDUS:
            case va.GREATER_THAN_SIGN:
            case va.EOF:
              ;(this.state = Ti.AFTER_ATTRIBUTE_NAME),
                this._stateAfterAttributeName(e)
              break
            case va.EQUALS_SIGN:
              this._err(qa.unexpectedEqualsSignBeforeAttributeName),
                this._createAttr('='),
                (this.state = Ti.ATTRIBUTE_NAME)
              break
            default:
              this._createAttr(''),
                (this.state = Ti.ATTRIBUTE_NAME),
                this._stateAttributeName(e)
          }
        }
        _stateAttributeName(e) {
          switch (e) {
            case va.SPACE:
            case va.LINE_FEED:
            case va.TABULATION:
            case va.FORM_FEED:
            case va.SOLIDUS:
            case va.GREATER_THAN_SIGN:
            case va.EOF:
              this._leaveAttrName(),
                (this.state = Ti.AFTER_ATTRIBUTE_NAME),
                this._stateAfterAttributeName(e)
              break
            case va.EQUALS_SIGN:
              this._leaveAttrName(), (this.state = Ti.BEFORE_ATTRIBUTE_VALUE)
              break
            case va.QUOTATION_MARK:
            case va.APOSTROPHE:
            case va.LESS_THAN_SIGN:
              this._err(qa.unexpectedCharacterInAttributeName),
                (this.currentAttr.name += String.fromCodePoint(e))
              break
            case va.NULL:
              this._err(qa.unexpectedNullCharacter),
                (this.currentAttr.name += Pa)
              break
            default:
              this.currentAttr.name += String.fromCodePoint(gi(e) ? bi(e) : e)
          }
        }
        _stateAfterAttributeName(e) {
          switch (e) {
            case va.SPACE:
            case va.LINE_FEED:
            case va.TABULATION:
            case va.FORM_FEED:
              break
            case va.SOLIDUS:
              this.state = Ti.SELF_CLOSING_START_TAG
              break
            case va.EQUALS_SIGN:
              this.state = Ti.BEFORE_ATTRIBUTE_VALUE
              break
            case va.GREATER_THAN_SIGN:
              ;(this.state = Ti.DATA), this.emitCurrentTagToken()
              break
            case va.EOF:
              this._err(qa.eofInTag), this._emitEOFToken()
              break
            default:
              this._createAttr(''),
                (this.state = Ti.ATTRIBUTE_NAME),
                this._stateAttributeName(e)
          }
        }
        _stateBeforeAttributeValue(e) {
          switch (e) {
            case va.SPACE:
            case va.LINE_FEED:
            case va.TABULATION:
            case va.FORM_FEED:
              break
            case va.QUOTATION_MARK:
              this.state = Ti.ATTRIBUTE_VALUE_DOUBLE_QUOTED
              break
            case va.APOSTROPHE:
              this.state = Ti.ATTRIBUTE_VALUE_SINGLE_QUOTED
              break
            case va.GREATER_THAN_SIGN:
              this._err(qa.missingAttributeValue),
                (this.state = Ti.DATA),
                this.emitCurrentTagToken()
              break
            default:
              ;(this.state = Ti.ATTRIBUTE_VALUE_UNQUOTED),
                this._stateAttributeValueUnquoted(e)
          }
        }
        _stateAttributeValueDoubleQuoted(e) {
          switch (e) {
            case va.QUOTATION_MARK:
              this.state = Ti.AFTER_ATTRIBUTE_VALUE_QUOTED
              break
            case va.AMPERSAND:
              ;(this.returnState = Ti.ATTRIBUTE_VALUE_DOUBLE_QUOTED),
                (this.state = Ti.CHARACTER_REFERENCE)
              break
            case va.NULL:
              this._err(qa.unexpectedNullCharacter),
                (this.currentAttr.value += Pa)
              break
            case va.EOF:
              this._err(qa.eofInTag), this._emitEOFToken()
              break
            default:
              this.currentAttr.value += String.fromCodePoint(e)
          }
        }
        _stateAttributeValueSingleQuoted(e) {
          switch (e) {
            case va.APOSTROPHE:
              this.state = Ti.AFTER_ATTRIBUTE_VALUE_QUOTED
              break
            case va.AMPERSAND:
              ;(this.returnState = Ti.ATTRIBUTE_VALUE_SINGLE_QUOTED),
                (this.state = Ti.CHARACTER_REFERENCE)
              break
            case va.NULL:
              this._err(qa.unexpectedNullCharacter),
                (this.currentAttr.value += Pa)
              break
            case va.EOF:
              this._err(qa.eofInTag), this._emitEOFToken()
              break
            default:
              this.currentAttr.value += String.fromCodePoint(e)
          }
        }
        _stateAttributeValueUnquoted(e) {
          switch (e) {
            case va.SPACE:
            case va.LINE_FEED:
            case va.TABULATION:
            case va.FORM_FEED:
              this._leaveAttrValue(), (this.state = Ti.BEFORE_ATTRIBUTE_NAME)
              break
            case va.AMPERSAND:
              ;(this.returnState = Ti.ATTRIBUTE_VALUE_UNQUOTED),
                (this.state = Ti.CHARACTER_REFERENCE)
              break
            case va.GREATER_THAN_SIGN:
              this._leaveAttrValue(),
                (this.state = Ti.DATA),
                this.emitCurrentTagToken()
              break
            case va.NULL:
              this._err(qa.unexpectedNullCharacter),
                (this.currentAttr.value += Pa)
              break
            case va.QUOTATION_MARK:
            case va.APOSTROPHE:
            case va.LESS_THAN_SIGN:
            case va.EQUALS_SIGN:
            case va.GRAVE_ACCENT:
              this._err(qa.unexpectedCharacterInUnquotedAttributeValue),
                (this.currentAttr.value += String.fromCodePoint(e))
              break
            case va.EOF:
              this._err(qa.eofInTag), this._emitEOFToken()
              break
            default:
              this.currentAttr.value += String.fromCodePoint(e)
          }
        }
        _stateAfterAttributeValueQuoted(e) {
          switch (e) {
            case va.SPACE:
            case va.LINE_FEED:
            case va.TABULATION:
            case va.FORM_FEED:
              this._leaveAttrValue(), (this.state = Ti.BEFORE_ATTRIBUTE_NAME)
              break
            case va.SOLIDUS:
              this._leaveAttrValue(), (this.state = Ti.SELF_CLOSING_START_TAG)
              break
            case va.GREATER_THAN_SIGN:
              this._leaveAttrValue(),
                (this.state = Ti.DATA),
                this.emitCurrentTagToken()
              break
            case va.EOF:
              this._err(qa.eofInTag), this._emitEOFToken()
              break
            default:
              this._err(qa.missingWhitespaceBetweenAttributes),
                (this.state = Ti.BEFORE_ATTRIBUTE_NAME),
                this._stateBeforeAttributeName(e)
          }
        }
        _stateSelfClosingStartTag(e) {
          switch (e) {
            case va.GREATER_THAN_SIGN:
              ;(this.currentToken.selfClosing = !0),
                (this.state = Ti.DATA),
                this.emitCurrentTagToken()
              break
            case va.EOF:
              this._err(qa.eofInTag), this._emitEOFToken()
              break
            default:
              this._err(qa.unexpectedSolidusInTag),
                (this.state = Ti.BEFORE_ATTRIBUTE_NAME),
                this._stateBeforeAttributeName(e)
          }
        }
        _stateBogusComment(e) {
          const t = this.currentToken
          switch (e) {
            case va.GREATER_THAN_SIGN:
              ;(this.state = Ti.DATA), this.emitCurrentComment(t)
              break
            case va.EOF:
              this.emitCurrentComment(t), this._emitEOFToken()
              break
            case va.NULL:
              this._err(qa.unexpectedNullCharacter), (t.data += Pa)
              break
            default:
              t.data += String.fromCodePoint(e)
          }
        }
        _stateMarkupDeclarationOpen(e) {
          this._consumeSequenceIfMatch('--', !0)
            ? (this._createCommentToken(3), (this.state = Ti.COMMENT_START))
            : this._consumeSequenceIfMatch(xa, !1)
            ? ((this.currentLocation = this.getCurrentLocation(8)),
              (this.state = Ti.DOCTYPE))
            : this._consumeSequenceIfMatch(wa, !0)
            ? this.inForeignNode
              ? (this.state = Ti.CDATA_SECTION)
              : (this._err(qa.cdataInHtmlContent),
                this._createCommentToken(8),
                (this.currentToken.data = '[CDATA['),
                (this.state = Ti.BOGUS_COMMENT))
            : this._ensureHibernation() ||
              (this._err(qa.incorrectlyOpenedComment),
              this._createCommentToken(2),
              (this.state = Ti.BOGUS_COMMENT),
              this._stateBogusComment(e))
        }
        _stateCommentStart(e) {
          switch (e) {
            case va.HYPHEN_MINUS:
              this.state = Ti.COMMENT_START_DASH
              break
            case va.GREATER_THAN_SIGN: {
              this._err(qa.abruptClosingOfEmptyComment), (this.state = Ti.DATA)
              const e = this.currentToken
              this.emitCurrentComment(e)
              break
            }
            default:
              ;(this.state = Ti.COMMENT), this._stateComment(e)
          }
        }
        _stateCommentStartDash(e) {
          const t = this.currentToken
          switch (e) {
            case va.HYPHEN_MINUS:
              this.state = Ti.COMMENT_END
              break
            case va.GREATER_THAN_SIGN:
              this._err(qa.abruptClosingOfEmptyComment),
                (this.state = Ti.DATA),
                this.emitCurrentComment(t)
              break
            case va.EOF:
              this._err(qa.eofInComment),
                this.emitCurrentComment(t),
                this._emitEOFToken()
              break
            default:
              ;(t.data += '-'), (this.state = Ti.COMMENT), this._stateComment(e)
          }
        }
        _stateComment(e) {
          const t = this.currentToken
          switch (e) {
            case va.HYPHEN_MINUS:
              this.state = Ti.COMMENT_END_DASH
              break
            case va.LESS_THAN_SIGN:
              ;(t.data += '<'), (this.state = Ti.COMMENT_LESS_THAN_SIGN)
              break
            case va.NULL:
              this._err(qa.unexpectedNullCharacter), (t.data += Pa)
              break
            case va.EOF:
              this._err(qa.eofInComment),
                this.emitCurrentComment(t),
                this._emitEOFToken()
              break
            default:
              t.data += String.fromCodePoint(e)
          }
        }
        _stateCommentLessThanSign(e) {
          const t = this.currentToken
          switch (e) {
            case va.EXCLAMATION_MARK:
              ;(t.data += '!'), (this.state = Ti.COMMENT_LESS_THAN_SIGN_BANG)
              break
            case va.LESS_THAN_SIGN:
              t.data += '<'
              break
            default:
              ;(this.state = Ti.COMMENT), this._stateComment(e)
          }
        }
        _stateCommentLessThanSignBang(e) {
          e === va.HYPHEN_MINUS
            ? (this.state = Ti.COMMENT_LESS_THAN_SIGN_BANG_DASH)
            : ((this.state = Ti.COMMENT), this._stateComment(e))
        }
        _stateCommentLessThanSignBangDash(e) {
          e === va.HYPHEN_MINUS
            ? (this.state = Ti.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH)
            : ((this.state = Ti.COMMENT_END_DASH), this._stateCommentEndDash(e))
        }
        _stateCommentLessThanSignBangDashDash(e) {
          e !== va.GREATER_THAN_SIGN &&
            e !== va.EOF &&
            this._err(qa.nestedComment),
            (this.state = Ti.COMMENT_END),
            this._stateCommentEnd(e)
        }
        _stateCommentEndDash(e) {
          const t = this.currentToken
          switch (e) {
            case va.HYPHEN_MINUS:
              this.state = Ti.COMMENT_END
              break
            case va.EOF:
              this._err(qa.eofInComment),
                this.emitCurrentComment(t),
                this._emitEOFToken()
              break
            default:
              ;(t.data += '-'), (this.state = Ti.COMMENT), this._stateComment(e)
          }
        }
        _stateCommentEnd(e) {
          const t = this.currentToken
          switch (e) {
            case va.GREATER_THAN_SIGN:
              ;(this.state = Ti.DATA), this.emitCurrentComment(t)
              break
            case va.EXCLAMATION_MARK:
              this.state = Ti.COMMENT_END_BANG
              break
            case va.HYPHEN_MINUS:
              t.data += '-'
              break
            case va.EOF:
              this._err(qa.eofInComment),
                this.emitCurrentComment(t),
                this._emitEOFToken()
              break
            default:
              ;(t.data += '--'),
                (this.state = Ti.COMMENT),
                this._stateComment(e)
          }
        }
        _stateCommentEndBang(e) {
          const t = this.currentToken
          switch (e) {
            case va.HYPHEN_MINUS:
              ;(t.data += '--!'), (this.state = Ti.COMMENT_END_DASH)
              break
            case va.GREATER_THAN_SIGN:
              this._err(qa.incorrectlyClosedComment),
                (this.state = Ti.DATA),
                this.emitCurrentComment(t)
              break
            case va.EOF:
              this._err(qa.eofInComment),
                this.emitCurrentComment(t),
                this._emitEOFToken()
              break
            default:
              ;(t.data += '--!'),
                (this.state = Ti.COMMENT),
                this._stateComment(e)
          }
        }
        _stateDoctype(e) {
          switch (e) {
            case va.SPACE:
            case va.LINE_FEED:
            case va.TABULATION:
            case va.FORM_FEED:
              this.state = Ti.BEFORE_DOCTYPE_NAME
              break
            case va.GREATER_THAN_SIGN:
              ;(this.state = Ti.BEFORE_DOCTYPE_NAME),
                this._stateBeforeDoctypeName(e)
              break
            case va.EOF: {
              this._err(qa.eofInDoctype), this._createDoctypeToken(null)
              const e = this.currentToken
              ;(e.forceQuirks = !0),
                this.emitCurrentDoctype(e),
                this._emitEOFToken()
              break
            }
            default:
              this._err(qa.missingWhitespaceBeforeDoctypeName),
                (this.state = Ti.BEFORE_DOCTYPE_NAME),
                this._stateBeforeDoctypeName(e)
          }
        }
        _stateBeforeDoctypeName(e) {
          if (gi(e))
            this._createDoctypeToken(String.fromCharCode(bi(e))),
              (this.state = Ti.DOCTYPE_NAME)
          else
            switch (e) {
              case va.SPACE:
              case va.LINE_FEED:
              case va.TABULATION:
              case va.FORM_FEED:
                break
              case va.NULL:
                this._err(qa.unexpectedNullCharacter),
                  this._createDoctypeToken(Pa),
                  (this.state = Ti.DOCTYPE_NAME)
                break
              case va.GREATER_THAN_SIGN: {
                this._err(qa.missingDoctypeName), this._createDoctypeToken(null)
                const e = this.currentToken
                ;(e.forceQuirks = !0),
                  this.emitCurrentDoctype(e),
                  (this.state = Ti.DATA)
                break
              }
              case va.EOF: {
                this._err(qa.eofInDoctype), this._createDoctypeToken(null)
                const e = this.currentToken
                ;(e.forceQuirks = !0),
                  this.emitCurrentDoctype(e),
                  this._emitEOFToken()
                break
              }
              default:
                this._createDoctypeToken(String.fromCodePoint(e)),
                  (this.state = Ti.DOCTYPE_NAME)
            }
        }
        _stateDoctypeName(e) {
          const t = this.currentToken
          switch (e) {
            case va.SPACE:
            case va.LINE_FEED:
            case va.TABULATION:
            case va.FORM_FEED:
              this.state = Ti.AFTER_DOCTYPE_NAME
              break
            case va.GREATER_THAN_SIGN:
              ;(this.state = Ti.DATA), this.emitCurrentDoctype(t)
              break
            case va.NULL:
              this._err(qa.unexpectedNullCharacter), (t.name += Pa)
              break
            case va.EOF:
              this._err(qa.eofInDoctype),
                (t.forceQuirks = !0),
                this.emitCurrentDoctype(t),
                this._emitEOFToken()
              break
            default:
              t.name += String.fromCodePoint(gi(e) ? bi(e) : e)
          }
        }
        _stateAfterDoctypeName(e) {
          const t = this.currentToken
          switch (e) {
            case va.SPACE:
            case va.LINE_FEED:
            case va.TABULATION:
            case va.FORM_FEED:
              break
            case va.GREATER_THAN_SIGN:
              ;(this.state = Ti.DATA), this.emitCurrentDoctype(t)
              break
            case va.EOF:
              this._err(qa.eofInDoctype),
                (t.forceQuirks = !0),
                this.emitCurrentDoctype(t),
                this._emitEOFToken()
              break
            default:
              this._consumeSequenceIfMatch('public', !1)
                ? (this.state = Ti.AFTER_DOCTYPE_PUBLIC_KEYWORD)
                : this._consumeSequenceIfMatch('system', !1)
                ? (this.state = Ti.AFTER_DOCTYPE_SYSTEM_KEYWORD)
                : this._ensureHibernation() ||
                  (this._err(qa.invalidCharacterSequenceAfterDoctypeName),
                  (t.forceQuirks = !0),
                  (this.state = Ti.BOGUS_DOCTYPE),
                  this._stateBogusDoctype(e))
          }
        }
        _stateAfterDoctypePublicKeyword(e) {
          const t = this.currentToken
          switch (e) {
            case va.SPACE:
            case va.LINE_FEED:
            case va.TABULATION:
            case va.FORM_FEED:
              this.state = Ti.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER
              break
            case va.QUOTATION_MARK:
              this._err(qa.missingWhitespaceAfterDoctypePublicKeyword),
                (t.publicId = ''),
                (this.state = Ti.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED)
              break
            case va.APOSTROPHE:
              this._err(qa.missingWhitespaceAfterDoctypePublicKeyword),
                (t.publicId = ''),
                (this.state = Ti.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED)
              break
            case va.GREATER_THAN_SIGN:
              this._err(qa.missingDoctypePublicIdentifier),
                (t.forceQuirks = !0),
                (this.state = Ti.DATA),
                this.emitCurrentDoctype(t)
              break
            case va.EOF:
              this._err(qa.eofInDoctype),
                (t.forceQuirks = !0),
                this.emitCurrentDoctype(t),
                this._emitEOFToken()
              break
            default:
              this._err(qa.missingQuoteBeforeDoctypePublicIdentifier),
                (t.forceQuirks = !0),
                (this.state = Ti.BOGUS_DOCTYPE),
                this._stateBogusDoctype(e)
          }
        }
        _stateBeforeDoctypePublicIdentifier(e) {
          const t = this.currentToken
          switch (e) {
            case va.SPACE:
            case va.LINE_FEED:
            case va.TABULATION:
            case va.FORM_FEED:
              break
            case va.QUOTATION_MARK:
              ;(t.publicId = ''),
                (this.state = Ti.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED)
              break
            case va.APOSTROPHE:
              ;(t.publicId = ''),
                (this.state = Ti.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED)
              break
            case va.GREATER_THAN_SIGN:
              this._err(qa.missingDoctypePublicIdentifier),
                (t.forceQuirks = !0),
                (this.state = Ti.DATA),
                this.emitCurrentDoctype(t)
              break
            case va.EOF:
              this._err(qa.eofInDoctype),
                (t.forceQuirks = !0),
                this.emitCurrentDoctype(t),
                this._emitEOFToken()
              break
            default:
              this._err(qa.missingQuoteBeforeDoctypePublicIdentifier),
                (t.forceQuirks = !0),
                (this.state = Ti.BOGUS_DOCTYPE),
                this._stateBogusDoctype(e)
          }
        }
        _stateDoctypePublicIdentifierDoubleQuoted(e) {
          const t = this.currentToken
          switch (e) {
            case va.QUOTATION_MARK:
              this.state = Ti.AFTER_DOCTYPE_PUBLIC_IDENTIFIER
              break
            case va.NULL:
              this._err(qa.unexpectedNullCharacter), (t.publicId += Pa)
              break
            case va.GREATER_THAN_SIGN:
              this._err(qa.abruptDoctypePublicIdentifier),
                (t.forceQuirks = !0),
                this.emitCurrentDoctype(t),
                (this.state = Ti.DATA)
              break
            case va.EOF:
              this._err(qa.eofInDoctype),
                (t.forceQuirks = !0),
                this.emitCurrentDoctype(t),
                this._emitEOFToken()
              break
            default:
              t.publicId += String.fromCodePoint(e)
          }
        }
        _stateDoctypePublicIdentifierSingleQuoted(e) {
          const t = this.currentToken
          switch (e) {
            case va.APOSTROPHE:
              this.state = Ti.AFTER_DOCTYPE_PUBLIC_IDENTIFIER
              break
            case va.NULL:
              this._err(qa.unexpectedNullCharacter), (t.publicId += Pa)
              break
            case va.GREATER_THAN_SIGN:
              this._err(qa.abruptDoctypePublicIdentifier),
                (t.forceQuirks = !0),
                this.emitCurrentDoctype(t),
                (this.state = Ti.DATA)
              break
            case va.EOF:
              this._err(qa.eofInDoctype),
                (t.forceQuirks = !0),
                this.emitCurrentDoctype(t),
                this._emitEOFToken()
              break
            default:
              t.publicId += String.fromCodePoint(e)
          }
        }
        _stateAfterDoctypePublicIdentifier(e) {
          const t = this.currentToken
          switch (e) {
            case va.SPACE:
            case va.LINE_FEED:
            case va.TABULATION:
            case va.FORM_FEED:
              this.state = Ti.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS
              break
            case va.GREATER_THAN_SIGN:
              ;(this.state = Ti.DATA), this.emitCurrentDoctype(t)
              break
            case va.QUOTATION_MARK:
              this._err(
                qa.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers
              ),
                (t.systemId = ''),
                (this.state = Ti.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED)
              break
            case va.APOSTROPHE:
              this._err(
                qa.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers
              ),
                (t.systemId = ''),
                (this.state = Ti.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED)
              break
            case va.EOF:
              this._err(qa.eofInDoctype),
                (t.forceQuirks = !0),
                this.emitCurrentDoctype(t),
                this._emitEOFToken()
              break
            default:
              this._err(qa.missingQuoteBeforeDoctypeSystemIdentifier),
                (t.forceQuirks = !0),
                (this.state = Ti.BOGUS_DOCTYPE),
                this._stateBogusDoctype(e)
          }
        }
        _stateBetweenDoctypePublicAndSystemIdentifiers(e) {
          const t = this.currentToken
          switch (e) {
            case va.SPACE:
            case va.LINE_FEED:
            case va.TABULATION:
            case va.FORM_FEED:
              break
            case va.GREATER_THAN_SIGN:
              this.emitCurrentDoctype(t), (this.state = Ti.DATA)
              break
            case va.QUOTATION_MARK:
              ;(t.systemId = ''),
                (this.state = Ti.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED)
              break
            case va.APOSTROPHE:
              ;(t.systemId = ''),
                (this.state = Ti.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED)
              break
            case va.EOF:
              this._err(qa.eofInDoctype),
                (t.forceQuirks = !0),
                this.emitCurrentDoctype(t),
                this._emitEOFToken()
              break
            default:
              this._err(qa.missingQuoteBeforeDoctypeSystemIdentifier),
                (t.forceQuirks = !0),
                (this.state = Ti.BOGUS_DOCTYPE),
                this._stateBogusDoctype(e)
          }
        }
        _stateAfterDoctypeSystemKeyword(e) {
          const t = this.currentToken
          switch (e) {
            case va.SPACE:
            case va.LINE_FEED:
            case va.TABULATION:
            case va.FORM_FEED:
              this.state = Ti.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER
              break
            case va.QUOTATION_MARK:
              this._err(qa.missingWhitespaceAfterDoctypeSystemKeyword),
                (t.systemId = ''),
                (this.state = Ti.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED)
              break
            case va.APOSTROPHE:
              this._err(qa.missingWhitespaceAfterDoctypeSystemKeyword),
                (t.systemId = ''),
                (this.state = Ti.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED)
              break
            case va.GREATER_THAN_SIGN:
              this._err(qa.missingDoctypeSystemIdentifier),
                (t.forceQuirks = !0),
                (this.state = Ti.DATA),
                this.emitCurrentDoctype(t)
              break
            case va.EOF:
              this._err(qa.eofInDoctype),
                (t.forceQuirks = !0),
                this.emitCurrentDoctype(t),
                this._emitEOFToken()
              break
            default:
              this._err(qa.missingQuoteBeforeDoctypeSystemIdentifier),
                (t.forceQuirks = !0),
                (this.state = Ti.BOGUS_DOCTYPE),
                this._stateBogusDoctype(e)
          }
        }
        _stateBeforeDoctypeSystemIdentifier(e) {
          const t = this.currentToken
          switch (e) {
            case va.SPACE:
            case va.LINE_FEED:
            case va.TABULATION:
            case va.FORM_FEED:
              break
            case va.QUOTATION_MARK:
              ;(t.systemId = ''),
                (this.state = Ti.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED)
              break
            case va.APOSTROPHE:
              ;(t.systemId = ''),
                (this.state = Ti.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED)
              break
            case va.GREATER_THAN_SIGN:
              this._err(qa.missingDoctypeSystemIdentifier),
                (t.forceQuirks = !0),
                (this.state = Ti.DATA),
                this.emitCurrentDoctype(t)
              break
            case va.EOF:
              this._err(qa.eofInDoctype),
                (t.forceQuirks = !0),
                this.emitCurrentDoctype(t),
                this._emitEOFToken()
              break
            default:
              this._err(qa.missingQuoteBeforeDoctypeSystemIdentifier),
                (t.forceQuirks = !0),
                (this.state = Ti.BOGUS_DOCTYPE),
                this._stateBogusDoctype(e)
          }
        }
        _stateDoctypeSystemIdentifierDoubleQuoted(e) {
          const t = this.currentToken
          switch (e) {
            case va.QUOTATION_MARK:
              this.state = Ti.AFTER_DOCTYPE_SYSTEM_IDENTIFIER
              break
            case va.NULL:
              this._err(qa.unexpectedNullCharacter), (t.systemId += Pa)
              break
            case va.GREATER_THAN_SIGN:
              this._err(qa.abruptDoctypeSystemIdentifier),
                (t.forceQuirks = !0),
                this.emitCurrentDoctype(t),
                (this.state = Ti.DATA)
              break
            case va.EOF:
              this._err(qa.eofInDoctype),
                (t.forceQuirks = !0),
                this.emitCurrentDoctype(t),
                this._emitEOFToken()
              break
            default:
              t.systemId += String.fromCodePoint(e)
          }
        }
        _stateDoctypeSystemIdentifierSingleQuoted(e) {
          const t = this.currentToken
          switch (e) {
            case va.APOSTROPHE:
              this.state = Ti.AFTER_DOCTYPE_SYSTEM_IDENTIFIER
              break
            case va.NULL:
              this._err(qa.unexpectedNullCharacter), (t.systemId += Pa)
              break
            case va.GREATER_THAN_SIGN:
              this._err(qa.abruptDoctypeSystemIdentifier),
                (t.forceQuirks = !0),
                this.emitCurrentDoctype(t),
                (this.state = Ti.DATA)
              break
            case va.EOF:
              this._err(qa.eofInDoctype),
                (t.forceQuirks = !0),
                this.emitCurrentDoctype(t),
                this._emitEOFToken()
              break
            default:
              t.systemId += String.fromCodePoint(e)
          }
        }
        _stateAfterDoctypeSystemIdentifier(e) {
          const t = this.currentToken
          switch (e) {
            case va.SPACE:
            case va.LINE_FEED:
            case va.TABULATION:
            case va.FORM_FEED:
              break
            case va.GREATER_THAN_SIGN:
              this.emitCurrentDoctype(t), (this.state = Ti.DATA)
              break
            case va.EOF:
              this._err(qa.eofInDoctype),
                (t.forceQuirks = !0),
                this.emitCurrentDoctype(t),
                this._emitEOFToken()
              break
            default:
              this._err(qa.unexpectedCharacterAfterDoctypeSystemIdentifier),
                (this.state = Ti.BOGUS_DOCTYPE),
                this._stateBogusDoctype(e)
          }
        }
        _stateBogusDoctype(e) {
          const t = this.currentToken
          switch (e) {
            case va.GREATER_THAN_SIGN:
              this.emitCurrentDoctype(t), (this.state = Ti.DATA)
              break
            case va.NULL:
              this._err(qa.unexpectedNullCharacter)
              break
            case va.EOF:
              this.emitCurrentDoctype(t), this._emitEOFToken()
          }
        }
        _stateCdataSection(e) {
          switch (e) {
            case va.RIGHT_SQUARE_BRACKET:
              this.state = Ti.CDATA_SECTION_BRACKET
              break
            case va.EOF:
              this._err(qa.eofInCdata), this._emitEOFToken()
              break
            default:
              this._emitCodePoint(e)
          }
        }
        _stateCdataSectionBracket(e) {
          e === va.RIGHT_SQUARE_BRACKET
            ? (this.state = Ti.CDATA_SECTION_END)
            : (this._emitChars(']'),
              (this.state = Ti.CDATA_SECTION),
              this._stateCdataSection(e))
        }
        _stateCdataSectionEnd(e) {
          switch (e) {
            case va.GREATER_THAN_SIGN:
              this.state = Ti.DATA
              break
            case va.RIGHT_SQUARE_BRACKET:
              this._emitChars(']')
              break
            default:
              this._emitChars(']]'),
                (this.state = Ti.CDATA_SECTION),
                this._stateCdataSection(e)
          }
        }
        _stateCharacterReference(e) {
          e === va.NUMBER_SIGN
            ? (this.state = Ti.NUMERIC_CHARACTER_REFERENCE)
            : Ni(e)
            ? ((this.state = Ti.NAMED_CHARACTER_REFERENCE),
              this._stateNamedCharacterReference(e))
            : (this._flushCodePointConsumedAsCharacterReference(va.AMPERSAND),
              this._reconsumeInState(this.returnState, e))
        }
        _stateNamedCharacterReference(e) {
          const t = this._matchNamedCharacterReference(e)
          if (this._ensureHibernation());
          else if (t) {
            for (let e = 0; e < t.length; e++)
              this._flushCodePointConsumedAsCharacterReference(t[e])
            this.state = this.returnState
          } else
            this._flushCodePointConsumedAsCharacterReference(va.AMPERSAND),
              (this.state = Ti.AMBIGUOUS_AMPERSAND)
        }
        _stateAmbiguousAmpersand(e) {
          Ni(e)
            ? this._flushCodePointConsumedAsCharacterReference(e)
            : (e === va.SEMICOLON &&
                this._err(qa.unknownNamedCharacterReference),
              this._reconsumeInState(this.returnState, e))
        }
        _stateNumericCharacterReference(e) {
          ;(this.charRefCode = 0),
            e === va.LATIN_SMALL_X || e === va.LATIN_CAPITAL_X
              ? (this.state = Ti.HEXADEMICAL_CHARACTER_REFERENCE_START)
              : Ai(e)
              ? ((this.state = Ti.DECIMAL_CHARACTER_REFERENCE),
                this._stateDecimalCharacterReference(e))
              : (this._err(qa.absenceOfDigitsInNumericCharacterReference),
                this._flushCodePointConsumedAsCharacterReference(va.AMPERSAND),
                this._flushCodePointConsumedAsCharacterReference(
                  va.NUMBER_SIGN
                ),
                this._reconsumeInState(this.returnState, e))
        }
        _stateHexademicalCharacterReferenceStart(e) {
          !(function (e) {
            return Ai(e) || Ci(e) || Ii(e)
          })(e)
            ? (this._err(qa.absenceOfDigitsInNumericCharacterReference),
              this._flushCodePointConsumedAsCharacterReference(va.AMPERSAND),
              this._flushCodePointConsumedAsCharacterReference(va.NUMBER_SIGN),
              this._unconsume(2),
              (this.state = this.returnState))
            : ((this.state = Ti.HEXADEMICAL_CHARACTER_REFERENCE),
              this._stateHexademicalCharacterReference(e))
        }
        _stateHexademicalCharacterReference(e) {
          Ci(e)
            ? (this.charRefCode = 16 * this.charRefCode + e - 55)
            : Ii(e)
            ? (this.charRefCode = 16 * this.charRefCode + e - 87)
            : Ai(e)
            ? (this.charRefCode = 16 * this.charRefCode + e - 48)
            : e === va.SEMICOLON
            ? (this.state = Ti.NUMERIC_CHARACTER_REFERENCE_END)
            : (this._err(qa.missingSemicolonAfterCharacterReference),
              (this.state = Ti.NUMERIC_CHARACTER_REFERENCE_END),
              this._stateNumericCharacterReferenceEnd(e))
        }
        _stateDecimalCharacterReference(e) {
          Ai(e)
            ? (this.charRefCode = 10 * this.charRefCode + e - 48)
            : e === va.SEMICOLON
            ? (this.state = Ti.NUMERIC_CHARACTER_REFERENCE_END)
            : (this._err(qa.missingSemicolonAfterCharacterReference),
              (this.state = Ti.NUMERIC_CHARACTER_REFERENCE_END),
              this._stateNumericCharacterReferenceEnd(e))
        }
        _stateNumericCharacterReferenceEnd(e) {
          if (this.charRefCode === va.NULL)
            this._err(qa.nullCharacterReference),
              (this.charRefCode = va.REPLACEMENT_CHARACTER)
          else if (this.charRefCode > 1114111)
            this._err(qa.characterReferenceOutsideUnicodeRange),
              (this.charRefCode = va.REPLACEMENT_CHARACTER)
          else if (Ua(this.charRefCode))
            this._err(qa.surrogateCharacterReference),
              (this.charRefCode = va.REPLACEMENT_CHARACTER)
          else if (Fa(this.charRefCode))
            this._err(qa.noncharacterCharacterReference)
          else if (
            Ha(this.charRefCode) ||
            this.charRefCode === va.CARRIAGE_RETURN
          ) {
            this._err(qa.controlCharacterReference)
            const e = mi.get(this.charRefCode)
            void 0 !== e && (this.charRefCode = e)
          }
          this._flushCodePointConsumedAsCharacterReference(this.charRefCode),
            this._reconsumeInState(this.returnState, e)
        }
      }
      const Li = new Set([
          si.DD,
          si.DT,
          si.LI,
          si.OPTGROUP,
          si.OPTION,
          si.P,
          si.RB,
          si.RP,
          si.RT,
          si.RTC,
        ]),
        Oi = new Set([
          ...Li,
          si.CAPTION,
          si.COLGROUP,
          si.TBODY,
          si.TD,
          si.TFOOT,
          si.TH,
          si.THEAD,
          si.TR,
        ]),
        yi = new Map([
          [si.APPLET, ei.HTML],
          [si.CAPTION, ei.HTML],
          [si.HTML, ei.HTML],
          [si.MARQUEE, ei.HTML],
          [si.OBJECT, ei.HTML],
          [si.TABLE, ei.HTML],
          [si.TD, ei.HTML],
          [si.TEMPLATE, ei.HTML],
          [si.TH, ei.HTML],
          [si.ANNOTATION_XML, ei.MATHML],
          [si.MI, ei.MATHML],
          [si.MN, ei.MATHML],
          [si.MO, ei.MATHML],
          [si.MS, ei.MATHML],
          [si.MTEXT, ei.MATHML],
          [si.DESC, ei.SVG],
          [si.FOREIGN_OBJECT, ei.SVG],
          [si.TITLE, ei.SVG],
        ]),
        ki = [si.H1, si.H2, si.H3, si.H4, si.H5, si.H6],
        Mi = [si.TR, si.TEMPLATE, si.HTML],
        Pi = [si.TBODY, si.TFOOT, si.THEAD, si.TEMPLATE, si.HTML],
        vi = [si.TABLE, si.TEMPLATE, si.HTML],
        wi = [si.TD, si.TH]
      class xi {
        get currentTmplContentOrNode() {
          return this._isInTemplate()
            ? this.treeAdapter.getTemplateContent(this.current)
            : this.current
        }
        constructor(e, t, r) {
          ;(this.treeAdapter = t),
            (this.handler = r),
            (this.items = []),
            (this.tagIDs = []),
            (this.stackTop = -1),
            (this.tmplCount = 0),
            (this.currentTagId = si.UNKNOWN),
            (this.current = e)
        }
        _indexOf(e) {
          return this.items.lastIndexOf(e, this.stackTop)
        }
        _isInTemplate() {
          return (
            this.currentTagId === si.TEMPLATE &&
            this.treeAdapter.getNamespaceURI(this.current) === ei.HTML
          )
        }
        _updateCurrentElement() {
          ;(this.current = this.items[this.stackTop]),
            (this.currentTagId = this.tagIDs[this.stackTop])
        }
        push(e, t) {
          this.stackTop++,
            (this.items[this.stackTop] = e),
            (this.current = e),
            (this.tagIDs[this.stackTop] = t),
            (this.currentTagId = t),
            this._isInTemplate() && this.tmplCount++,
            this.handler.onItemPush(e, t, !0)
        }
        pop() {
          const e = this.current
          this.tmplCount > 0 && this._isInTemplate() && this.tmplCount--,
            this.stackTop--,
            this._updateCurrentElement(),
            this.handler.onItemPop(e, !0)
        }
        replace(e, t) {
          const r = this._indexOf(e)
          ;(this.items[r] = t), r === this.stackTop && (this.current = t)
        }
        insertAfter(e, t, r) {
          const n = this._indexOf(e) + 1
          this.items.splice(n, 0, t),
            this.tagIDs.splice(n, 0, r),
            this.stackTop++,
            n === this.stackTop && this._updateCurrentElement(),
            this.handler.onItemPush(
              this.current,
              this.currentTagId,
              n === this.stackTop
            )
        }
        popUntilTagNamePopped(e) {
          let t = this.stackTop + 1
          do {
            t = this.tagIDs.lastIndexOf(e, t - 1)
          } while (
            t > 0 &&
            this.treeAdapter.getNamespaceURI(this.items[t]) !== ei.HTML
          )
          this.shortenToLength(t < 0 ? 0 : t)
        }
        shortenToLength(e) {
          for (; this.stackTop >= e; ) {
            const t = this.current
            this.tmplCount > 0 && this._isInTemplate() && (this.tmplCount -= 1),
              this.stackTop--,
              this._updateCurrentElement(),
              this.handler.onItemPop(t, this.stackTop < e)
          }
        }
        popUntilElementPopped(e) {
          const t = this._indexOf(e)
          this.shortenToLength(t < 0 ? 0 : t)
        }
        popUntilPopped(e, t) {
          const r = this._indexOfTagNames(e, t)
          this.shortenToLength(r < 0 ? 0 : r)
        }
        popUntilNumberedHeaderPopped() {
          this.popUntilPopped(ki, ei.HTML)
        }
        popUntilTableCellPopped() {
          this.popUntilPopped(wi, ei.HTML)
        }
        popAllUpToHtmlElement() {
          ;(this.tmplCount = 0), this.shortenToLength(1)
        }
        _indexOfTagNames(e, t) {
          for (let r = this.stackTop; r >= 0; r--)
            if (
              e.includes(this.tagIDs[r]) &&
              this.treeAdapter.getNamespaceURI(this.items[r]) === t
            )
              return r
          return -1
        }
        clearBackTo(e, t) {
          const r = this._indexOfTagNames(e, t)
          this.shortenToLength(r + 1)
        }
        clearBackToTableContext() {
          this.clearBackTo(vi, ei.HTML)
        }
        clearBackToTableBodyContext() {
          this.clearBackTo(Pi, ei.HTML)
        }
        clearBackToTableRowContext() {
          this.clearBackTo(Mi, ei.HTML)
        }
        remove(e) {
          const t = this._indexOf(e)
          t >= 0 &&
            (t === this.stackTop
              ? this.pop()
              : (this.items.splice(t, 1),
                this.tagIDs.splice(t, 1),
                this.stackTop--,
                this._updateCurrentElement(),
                this.handler.onItemPop(e, !1)))
        }
        tryPeekProperlyNestedBodyElement() {
          return this.stackTop >= 1 && this.tagIDs[1] === si.BODY
            ? this.items[1]
            : null
        }
        contains(e) {
          return this._indexOf(e) > -1
        }
        getCommonAncestor(e) {
          const t = this._indexOf(e) - 1
          return t >= 0 ? this.items[t] : null
        }
        isRootHtmlElementCurrent() {
          return 0 === this.stackTop && this.tagIDs[0] === si.HTML
        }
        hasInScope(e) {
          for (let t = this.stackTop; t >= 0; t--) {
            const r = this.tagIDs[t],
              n = this.treeAdapter.getNamespaceURI(this.items[t])
            if (r === e && n === ei.HTML) return !0
            if (yi.get(r) === n) return !1
          }
          return !0
        }
        hasNumberedHeaderInScope() {
          for (let e = this.stackTop; e >= 0; e--) {
            const t = this.tagIDs[e],
              r = this.treeAdapter.getNamespaceURI(this.items[e])
            if (pi(t) && r === ei.HTML) return !0
            if (yi.get(t) === r) return !1
          }
          return !0
        }
        hasInListItemScope(e) {
          for (let t = this.stackTop; t >= 0; t--) {
            const r = this.tagIDs[t],
              n = this.treeAdapter.getNamespaceURI(this.items[t])
            if (r === e && n === ei.HTML) return !0
            if (
              ((r === si.UL || r === si.OL) && n === ei.HTML) ||
              yi.get(r) === n
            )
              return !1
          }
          return !0
        }
        hasInButtonScope(e) {
          for (let t = this.stackTop; t >= 0; t--) {
            const r = this.tagIDs[t],
              n = this.treeAdapter.getNamespaceURI(this.items[t])
            if (r === e && n === ei.HTML) return !0
            if ((r === si.BUTTON && n === ei.HTML) || yi.get(r) === n) return !1
          }
          return !0
        }
        hasInTableScope(e) {
          for (let t = this.stackTop; t >= 0; t--) {
            const r = this.tagIDs[t]
            if (this.treeAdapter.getNamespaceURI(this.items[t]) === ei.HTML) {
              if (r === e) return !0
              if (r === si.TABLE || r === si.TEMPLATE || r === si.HTML)
                return !1
            }
          }
          return !0
        }
        hasTableBodyContextInTableScope() {
          for (let e = this.stackTop; e >= 0; e--) {
            const t = this.tagIDs[e]
            if (this.treeAdapter.getNamespaceURI(this.items[e]) === ei.HTML) {
              if (t === si.TBODY || t === si.THEAD || t === si.TFOOT) return !0
              if (t === si.TABLE || t === si.HTML) return !1
            }
          }
          return !0
        }
        hasInSelectScope(e) {
          for (let t = this.stackTop; t >= 0; t--) {
            const r = this.tagIDs[t]
            if (this.treeAdapter.getNamespaceURI(this.items[t]) === ei.HTML) {
              if (r === e) return !0
              if (r !== si.OPTION && r !== si.OPTGROUP) return !1
            }
          }
          return !0
        }
        generateImpliedEndTags() {
          for (; Li.has(this.currentTagId); ) this.pop()
        }
        generateImpliedEndTagsThoroughly() {
          for (; Oi.has(this.currentTagId); ) this.pop()
        }
        generateImpliedEndTagsWithExclusion(e) {
          for (; this.currentTagId !== e && Oi.has(this.currentTagId); )
            this.pop()
        }
      }
      var Bi
      !(function (e) {
        ;(e[(e.Marker = 0)] = 'Marker'), (e[(e.Element = 1)] = 'Element')
      })((Bi = Bi || (Bi = {})))
      const Ui = { type: Bi.Marker }
      class Hi {
        constructor(e) {
          ;(this.treeAdapter = e), (this.entries = []), (this.bookmark = null)
        }
        _getNoahArkConditionCandidates(e, t) {
          const r = [],
            n = t.length,
            s = this.treeAdapter.getTagName(e),
            a = this.treeAdapter.getNamespaceURI(e)
          for (let e = 0; e < this.entries.length; e++) {
            const t = this.entries[e]
            if (t.type === Bi.Marker) break
            const { element: i } = t
            if (
              this.treeAdapter.getTagName(i) === s &&
              this.treeAdapter.getNamespaceURI(i) === a
            ) {
              const t = this.treeAdapter.getAttrList(i)
              t.length === n && r.push({ idx: e, attrs: t })
            }
          }
          return r
        }
        _ensureNoahArkCondition(e) {
          if (this.entries.length < 3) return
          const t = this.treeAdapter.getAttrList(e),
            r = this._getNoahArkConditionCandidates(e, t)
          if (r.length < 3) return
          const n = new Map(t.map((e) => [e.name, e.value]))
          let s = 0
          for (let e = 0; e < r.length; e++) {
            const t = r[e]
            t.attrs.every((e) => n.get(e.name) === e.value) &&
              ((s += 1), s >= 3 && this.entries.splice(t.idx, 1))
          }
        }
        insertMarker() {
          this.entries.unshift(Ui)
        }
        pushElement(e, t) {
          this._ensureNoahArkCondition(e),
            this.entries.unshift({ type: Bi.Element, element: e, token: t })
        }
        insertElementAfterBookmark(e, t) {
          const r = this.entries.indexOf(this.bookmark)
          this.entries.splice(r, 0, { type: Bi.Element, element: e, token: t })
        }
        removeEntry(e) {
          const t = this.entries.indexOf(e)
          t >= 0 && this.entries.splice(t, 1)
        }
        clearToLastMarker() {
          const e = this.entries.indexOf(Ui)
          e >= 0 ? this.entries.splice(0, e + 1) : (this.entries.length = 0)
        }
        getElementEntryInScopeWithTagName(e) {
          const t = this.entries.find(
            (t) =>
              t.type === Bi.Marker ||
              this.treeAdapter.getTagName(t.element) === e
          )
          return t && t.type === Bi.Element ? t : null
        }
        getElementEntry(e) {
          return this.entries.find(
            (t) => t.type === Bi.Element && t.element === e
          )
        }
      }
      function Fi(e) {
        return { nodeName: '#text', value: e, parentNode: null }
      }
      const qi = {
          createDocument: () => ({
            nodeName: '#document',
            mode: ri.NO_QUIRKS,
            childNodes: [],
          }),
          createDocumentFragment: () => ({
            nodeName: '#document-fragment',
            childNodes: [],
          }),
          createElement: (e, t, r) => ({
            nodeName: e,
            tagName: e,
            attrs: r,
            namespaceURI: t,
            childNodes: [],
            parentNode: null,
          }),
          createCommentNode: (e) => ({
            nodeName: '#comment',
            data: e,
            parentNode: null,
          }),
          appendChild(e, t) {
            e.childNodes.push(t), (t.parentNode = e)
          },
          insertBefore(e, t, r) {
            const n = e.childNodes.indexOf(r)
            e.childNodes.splice(n, 0, t), (t.parentNode = e)
          },
          setTemplateContent(e, t) {
            e.content = t
          },
          getTemplateContent: (e) => e.content,
          setDocumentType(e, t, r, n) {
            const s = e.childNodes.find((e) => '#documentType' === e.nodeName)
            if (s) (s.name = t), (s.publicId = r), (s.systemId = n)
            else {
              const s = {
                nodeName: '#documentType',
                name: t,
                publicId: r,
                systemId: n,
                parentNode: null,
              }
              qi.appendChild(e, s)
            }
          },
          setDocumentMode(e, t) {
            e.mode = t
          },
          getDocumentMode: (e) => e.mode,
          detachNode(e) {
            if (e.parentNode) {
              const t = e.parentNode.childNodes.indexOf(e)
              e.parentNode.childNodes.splice(t, 1), (e.parentNode = null)
            }
          },
          insertText(e, t) {
            if (e.childNodes.length > 0) {
              const r = e.childNodes[e.childNodes.length - 1]
              if (qi.isTextNode(r)) return void (r.value += t)
            }
            qi.appendChild(e, Fi(t))
          },
          insertTextBefore(e, t, r) {
            const n = e.childNodes[e.childNodes.indexOf(r) - 1]
            n && qi.isTextNode(n)
              ? (n.value += t)
              : qi.insertBefore(e, Fi(t), r)
          },
          adoptAttributes(e, t) {
            const r = new Set(e.attrs.map((e) => e.name))
            for (let n = 0; n < t.length; n++)
              r.has(t[n].name) || e.attrs.push(t[n])
          },
          getFirstChild: (e) => e.childNodes[0],
          getChildNodes: (e) => e.childNodes,
          getParentNode: (e) => e.parentNode,
          getAttrList: (e) => e.attrs,
          getTagName: (e) => e.tagName,
          getNamespaceURI: (e) => e.namespaceURI,
          getTextNodeContent: (e) => e.value,
          getCommentNodeContent: (e) => e.data,
          getDocumentTypeNodeName: (e) => e.name,
          getDocumentTypeNodePublicId: (e) => e.publicId,
          getDocumentTypeNodeSystemId: (e) => e.systemId,
          isTextNode: (e) => '#text' === e.nodeName,
          isCommentNode: (e) => '#comment' === e.nodeName,
          isDocumentTypeNode: (e) => '#documentType' === e.nodeName,
          isElementNode: (e) =>
            Object.prototype.hasOwnProperty.call(e, 'tagName'),
          setNodeSourceCodeLocation(e, t) {
            e.sourceCodeLocation = t
          },
          getNodeSourceCodeLocation: (e) => e.sourceCodeLocation,
          updateNodeSourceCodeLocation(e, t) {
            e.sourceCodeLocation = { ...e.sourceCodeLocation, ...t }
          },
        },
        Gi = 'html',
        Vi = [
          '+//silmaril//dtd html pro v0r11 19970101//',
          '-//as//dtd html 3.0 aswedit + extensions//',
          '-//advasoft ltd//dtd html 3.0 aswedit + extensions//',
          '-//ietf//dtd html 2.0 level 1//',
          '-//ietf//dtd html 2.0 level 2//',
          '-//ietf//dtd html 2.0 strict level 1//',
          '-//ietf//dtd html 2.0 strict level 2//',
          '-//ietf//dtd html 2.0 strict//',
          '-//ietf//dtd html 2.0//',
          '-//ietf//dtd html 2.1e//',
          '-//ietf//dtd html 3.0//',
          '-//ietf//dtd html 3.2 final//',
          '-//ietf//dtd html 3.2//',
          '-//ietf//dtd html 3//',
          '-//ietf//dtd html level 0//',
          '-//ietf//dtd html level 1//',
          '-//ietf//dtd html level 2//',
          '-//ietf//dtd html level 3//',
          '-//ietf//dtd html strict level 0//',
          '-//ietf//dtd html strict level 1//',
          '-//ietf//dtd html strict level 2//',
          '-//ietf//dtd html strict level 3//',
          '-//ietf//dtd html strict//',
          '-//ietf//dtd html//',
          '-//metrius//dtd metrius presentational//',
          '-//microsoft//dtd internet explorer 2.0 html strict//',
          '-//microsoft//dtd internet explorer 2.0 html//',
          '-//microsoft//dtd internet explorer 2.0 tables//',
          '-//microsoft//dtd internet explorer 3.0 html strict//',
          '-//microsoft//dtd internet explorer 3.0 html//',
          '-//microsoft//dtd internet explorer 3.0 tables//',
          '-//netscape comm. corp.//dtd html//',
          '-//netscape comm. corp.//dtd strict html//',
          "-//o'reilly and associates//dtd html 2.0//",
          "-//o'reilly and associates//dtd html extended 1.0//",
          "-//o'reilly and associates//dtd html extended relaxed 1.0//",
          '-//sq//dtd html 2.0 hotmetal + extensions//',
          '-//softquad software//dtd hotmetal pro 6.0::19990601::extensions to html 4.0//',
          '-//softquad//dtd hotmetal pro 4.0::19971010::extensions to html 4.0//',
          '-//spyglass//dtd html 2.0 extended//',
          '-//sun microsystems corp.//dtd hotjava html//',
          '-//sun microsystems corp.//dtd hotjava strict html//',
          '-//w3c//dtd html 3 1995-03-24//',
          '-//w3c//dtd html 3.2 draft//',
          '-//w3c//dtd html 3.2 final//',
          '-//w3c//dtd html 3.2//',
          '-//w3c//dtd html 3.2s draft//',
          '-//w3c//dtd html 4.0 frameset//',
          '-//w3c//dtd html 4.0 transitional//',
          '-//w3c//dtd html experimental 19960712//',
          '-//w3c//dtd html experimental 970421//',
          '-//w3c//dtd w3 html//',
          '-//w3o//dtd w3 html 3.0//',
          '-//webtechs//dtd mozilla html 2.0//',
          '-//webtechs//dtd mozilla html//',
        ],
        Yi = [
          ...Vi,
          '-//w3c//dtd html 4.01 frameset//',
          '-//w3c//dtd html 4.01 transitional//',
        ],
        Qi = new Set([
          '-//w3o//dtd w3 html strict 3.0//en//',
          '-/w3c/dtd html 4.0 transitional/en',
          'html',
        ]),
        Wi = [
          '-//w3c//dtd xhtml 1.0 frameset//',
          '-//w3c//dtd xhtml 1.0 transitional//',
        ],
        Xi = [
          ...Wi,
          '-//w3c//dtd html 4.01 frameset//',
          '-//w3c//dtd html 4.01 transitional//',
        ]
      function ji(e, t) {
        return t.some((t) => e.startsWith(t))
      }
      const Ki = 'text/html',
        zi = 'application/xhtml+xml',
        $i = 'definitionurl',
        Zi = 'definitionURL',
        Ji = new Map(
          [
            'attributeName',
            'attributeType',
            'baseFrequency',
            'baseProfile',
            'calcMode',
            'clipPathUnits',
            'diffuseConstant',
            'edgeMode',
            'filterUnits',
            'glyphRef',
            'gradientTransform',
            'gradientUnits',
            'kernelMatrix',
            'kernelUnitLength',
            'keyPoints',
            'keySplines',
            'keyTimes',
            'lengthAdjust',
            'limitingConeAngle',
            'markerHeight',
            'markerUnits',
            'markerWidth',
            'maskContentUnits',
            'maskUnits',
            'numOctaves',
            'pathLength',
            'patternContentUnits',
            'patternTransform',
            'patternUnits',
            'pointsAtX',
            'pointsAtY',
            'pointsAtZ',
            'preserveAlpha',
            'preserveAspectRatio',
            'primitiveUnits',
            'refX',
            'refY',
            'repeatCount',
            'repeatDur',
            'requiredExtensions',
            'requiredFeatures',
            'specularConstant',
            'specularExponent',
            'spreadMethod',
            'startOffset',
            'stdDeviation',
            'stitchTiles',
            'surfaceScale',
            'systemLanguage',
            'tableValues',
            'targetX',
            'targetY',
            'textLength',
            'viewBox',
            'viewTarget',
            'xChannelSelector',
            'yChannelSelector',
            'zoomAndPan',
          ].map((e) => [e.toLowerCase(), e])
        ),
        eo = new Map([
          [
            'xlink:actuate',
            { prefix: 'xlink', name: 'actuate', namespace: ei.XLINK },
          ],
          [
            'xlink:arcrole',
            { prefix: 'xlink', name: 'arcrole', namespace: ei.XLINK },
          ],
          [
            'xlink:href',
            { prefix: 'xlink', name: 'href', namespace: ei.XLINK },
          ],
          [
            'xlink:role',
            { prefix: 'xlink', name: 'role', namespace: ei.XLINK },
          ],
          [
            'xlink:show',
            { prefix: 'xlink', name: 'show', namespace: ei.XLINK },
          ],
          [
            'xlink:title',
            { prefix: 'xlink', name: 'title', namespace: ei.XLINK },
          ],
          [
            'xlink:type',
            { prefix: 'xlink', name: 'type', namespace: ei.XLINK },
          ],
          ['xml:base', { prefix: 'xml', name: 'base', namespace: ei.XML }],
          ['xml:lang', { prefix: 'xml', name: 'lang', namespace: ei.XML }],
          ['xml:space', { prefix: 'xml', name: 'space', namespace: ei.XML }],
          ['xmlns', { prefix: '', name: 'xmlns', namespace: ei.XMLNS }],
          [
            'xmlns:xlink',
            { prefix: 'xmlns', name: 'xlink', namespace: ei.XMLNS },
          ],
        ]),
        to = new Map(
          [
            'altGlyph',
            'altGlyphDef',
            'altGlyphItem',
            'animateColor',
            'animateMotion',
            'animateTransform',
            'clipPath',
            'feBlend',
            'feColorMatrix',
            'feComponentTransfer',
            'feComposite',
            'feConvolveMatrix',
            'feDiffuseLighting',
            'feDisplacementMap',
            'feDistantLight',
            'feFlood',
            'feFuncA',
            'feFuncB',
            'feFuncG',
            'feFuncR',
            'feGaussianBlur',
            'feImage',
            'feMerge',
            'feMergeNode',
            'feMorphology',
            'feOffset',
            'fePointLight',
            'feSpecularLighting',
            'feSpotLight',
            'feTile',
            'feTurbulence',
            'foreignObject',
            'glyphRef',
            'linearGradient',
            'radialGradient',
            'textPath',
          ].map((e) => [e.toLowerCase(), e])
        ),
        ro = new Set([
          si.B,
          si.BIG,
          si.BLOCKQUOTE,
          si.BODY,
          si.BR,
          si.CENTER,
          si.CODE,
          si.DD,
          si.DIV,
          si.DL,
          si.DT,
          si.EM,
          si.EMBED,
          si.H1,
          si.H2,
          si.H3,
          si.H4,
          si.H5,
          si.H6,
          si.HEAD,
          si.HR,
          si.I,
          si.IMG,
          si.LI,
          si.LISTING,
          si.MENU,
          si.META,
          si.NOBR,
          si.OL,
          si.P,
          si.PRE,
          si.RUBY,
          si.S,
          si.SMALL,
          si.SPAN,
          si.STRONG,
          si.STRIKE,
          si.SUB,
          si.SUP,
          si.TABLE,
          si.TT,
          si.U,
          si.UL,
          si.VAR,
        ])
      function no(e) {
        for (let t = 0; t < e.attrs.length; t++)
          if (e.attrs[t].name === $i) {
            e.attrs[t].name = Zi
            break
          }
      }
      function so(e) {
        for (let t = 0; t < e.attrs.length; t++) {
          const r = Ji.get(e.attrs[t].name)
          null != r && (e.attrs[t].name = r)
        }
      }
      function ao(e) {
        for (let t = 0; t < e.attrs.length; t++) {
          const r = eo.get(e.attrs[t].name)
          r &&
            ((e.attrs[t].prefix = r.prefix),
            (e.attrs[t].name = r.name),
            (e.attrs[t].namespace = r.namespace))
        }
      }
      const io = 'hidden',
        oo = 8,
        co = 3
      var lo
      !(function (e) {
        ;(e[(e.INITIAL = 0)] = 'INITIAL'),
          (e[(e.BEFORE_HTML = 1)] = 'BEFORE_HTML'),
          (e[(e.BEFORE_HEAD = 2)] = 'BEFORE_HEAD'),
          (e[(e.IN_HEAD = 3)] = 'IN_HEAD'),
          (e[(e.IN_HEAD_NO_SCRIPT = 4)] = 'IN_HEAD_NO_SCRIPT'),
          (e[(e.AFTER_HEAD = 5)] = 'AFTER_HEAD'),
          (e[(e.IN_BODY = 6)] = 'IN_BODY'),
          (e[(e.TEXT = 7)] = 'TEXT'),
          (e[(e.IN_TABLE = 8)] = 'IN_TABLE'),
          (e[(e.IN_TABLE_TEXT = 9)] = 'IN_TABLE_TEXT'),
          (e[(e.IN_CAPTION = 10)] = 'IN_CAPTION'),
          (e[(e.IN_COLUMN_GROUP = 11)] = 'IN_COLUMN_GROUP'),
          (e[(e.IN_TABLE_BODY = 12)] = 'IN_TABLE_BODY'),
          (e[(e.IN_ROW = 13)] = 'IN_ROW'),
          (e[(e.IN_CELL = 14)] = 'IN_CELL'),
          (e[(e.IN_SELECT = 15)] = 'IN_SELECT'),
          (e[(e.IN_SELECT_IN_TABLE = 16)] = 'IN_SELECT_IN_TABLE'),
          (e[(e.IN_TEMPLATE = 17)] = 'IN_TEMPLATE'),
          (e[(e.AFTER_BODY = 18)] = 'AFTER_BODY'),
          (e[(e.IN_FRAMESET = 19)] = 'IN_FRAMESET'),
          (e[(e.AFTER_FRAMESET = 20)] = 'AFTER_FRAMESET'),
          (e[(e.AFTER_AFTER_BODY = 21)] = 'AFTER_AFTER_BODY'),
          (e[(e.AFTER_AFTER_FRAMESET = 22)] = 'AFTER_AFTER_FRAMESET')
      })(lo || (lo = {}))
      const ho = {
          startLine: -1,
          startCol: -1,
          startOffset: -1,
          endLine: -1,
          endCol: -1,
          endOffset: -1,
        },
        uo = new Set([si.TABLE, si.TBODY, si.TFOOT, si.THEAD, si.TR]),
        po = {
          scriptingEnabled: !0,
          sourceCodeLocationInfo: !1,
          treeAdapter: qi,
          onParseError: null,
        }
      class Eo {
        constructor(e, t, r = null, n = null) {
          ;(this.fragmentContext = r),
            (this.scriptHandler = n),
            (this.currentToken = null),
            (this.stopped = !1),
            (this.insertionMode = lo.INITIAL),
            (this.originalInsertionMode = lo.INITIAL),
            (this.headElement = null),
            (this.formElement = null),
            (this.currentNotInHTML = !1),
            (this.tmplInsertionModeStack = []),
            (this.pendingCharacterTokens = []),
            (this.hasNonWhitespacePendingCharacterToken = !1),
            (this.framesetOk = !0),
            (this.skipNextNewLine = !1),
            (this.fosterParentingEnabled = !1),
            (this.options = { ...po, ...e }),
            (this.treeAdapter = this.options.treeAdapter),
            (this.onParseError = this.options.onParseError),
            this.onParseError && (this.options.sourceCodeLocationInfo = !0),
            (this.document = null != t ? t : this.treeAdapter.createDocument()),
            (this.tokenizer = new Ri(this.options, this)),
            (this.activeFormattingElements = new Hi(this.treeAdapter)),
            (this.fragmentContextID = r
              ? hi(this.treeAdapter.getTagName(r))
              : si.UNKNOWN),
            this._setContextModes(
              null != r ? r : this.document,
              this.fragmentContextID
            ),
            (this.openElements = new xi(this.document, this.treeAdapter, this))
        }
        static parse(e, t) {
          const r = new this(t)
          return r.tokenizer.write(e, !0), r.document
        }
        static getFragmentParser(e, t) {
          const r = { ...po, ...t }
          null != e ||
            (e = r.treeAdapter.createElement(ni.TEMPLATE, ei.HTML, []))
          const n = r.treeAdapter.createElement('documentmock', ei.HTML, []),
            s = new this(r, n, e)
          return (
            s.fragmentContextID === si.TEMPLATE &&
              s.tmplInsertionModeStack.unshift(lo.IN_TEMPLATE),
            s._initTokenizerForFragmentParsing(),
            s._insertFakeRootElement(),
            s._resetInsertionMode(),
            s._findFormInFragmentContext(),
            s
          )
        }
        getFragment() {
          const e = this.treeAdapter.getFirstChild(this.document),
            t = this.treeAdapter.createDocumentFragment()
          return this._adoptNodes(e, t), t
        }
        _err(e, t, r) {
          var n
          if (!this.onParseError) return
          const s = null !== (n = e.location) && void 0 !== n ? n : ho,
            a = {
              code: t,
              startLine: s.startLine,
              startCol: s.startCol,
              startOffset: s.startOffset,
              endLine: r ? s.startLine : s.endLine,
              endCol: r ? s.startCol : s.endCol,
              endOffset: r ? s.startOffset : s.endOffset,
            }
          this.onParseError(a)
        }
        onItemPush(e, t, r) {
          var n, s
          null === (s = (n = this.treeAdapter).onItemPush) ||
            void 0 === s ||
            s.call(n, e),
            r && this.openElements.stackTop > 0 && this._setContextModes(e, t)
        }
        onItemPop(e, t) {
          var r, n
          if (
            (this.options.sourceCodeLocationInfo &&
              this._setEndLocation(e, this.currentToken),
            null === (n = (r = this.treeAdapter).onItemPop) ||
              void 0 === n ||
              n.call(r, e, this.openElements.current),
            t)
          ) {
            let e, t
            0 === this.openElements.stackTop && this.fragmentContext
              ? ((e = this.fragmentContext), (t = this.fragmentContextID))
              : ({ current: e, currentTagId: t } = this.openElements),
              this._setContextModes(e, t)
          }
        }
        _setContextModes(e, t) {
          const r =
            e === this.document ||
            this.treeAdapter.getNamespaceURI(e) === ei.HTML
          ;(this.currentNotInHTML = !r),
            (this.tokenizer.inForeignNode =
              !r && !this._isIntegrationPoint(t, e))
        }
        _switchToTextParsing(e, t) {
          this._insertElement(e, ei.HTML),
            (this.tokenizer.state = t),
            (this.originalInsertionMode = this.insertionMode),
            (this.insertionMode = lo.TEXT)
        }
        switchToPlaintextParsing() {
          ;(this.insertionMode = lo.TEXT),
            (this.originalInsertionMode = lo.IN_BODY),
            (this.tokenizer.state = fi.PLAINTEXT)
        }
        _getAdjustedCurrentElement() {
          return 0 === this.openElements.stackTop && this.fragmentContext
            ? this.fragmentContext
            : this.openElements.current
        }
        _findFormInFragmentContext() {
          let e = this.fragmentContext
          for (; e; ) {
            if (this.treeAdapter.getTagName(e) === ni.FORM) {
              this.formElement = e
              break
            }
            e = this.treeAdapter.getParentNode(e)
          }
        }
        _initTokenizerForFragmentParsing() {
          if (
            this.fragmentContext &&
            this.treeAdapter.getNamespaceURI(this.fragmentContext) === ei.HTML
          )
            switch (this.fragmentContextID) {
              case si.TITLE:
              case si.TEXTAREA:
                this.tokenizer.state = fi.RCDATA
                break
              case si.STYLE:
              case si.XMP:
              case si.IFRAME:
              case si.NOEMBED:
              case si.NOFRAMES:
              case si.NOSCRIPT:
                this.tokenizer.state = fi.RAWTEXT
                break
              case si.SCRIPT:
                this.tokenizer.state = fi.SCRIPT_DATA
                break
              case si.PLAINTEXT:
                this.tokenizer.state = fi.PLAINTEXT
            }
        }
        _setDocumentType(e) {
          const t = e.name || '',
            r = e.publicId || '',
            n = e.systemId || ''
          if (
            (this.treeAdapter.setDocumentType(this.document, t, r, n),
            e.location)
          ) {
            const t = this.treeAdapter
              .getChildNodes(this.document)
              .find((e) => this.treeAdapter.isDocumentTypeNode(e))
            t && this.treeAdapter.setNodeSourceCodeLocation(t, e.location)
          }
        }
        _attachElementToTree(e, t) {
          if (this.options.sourceCodeLocationInfo) {
            const r = t && { ...t, startTag: t }
            this.treeAdapter.setNodeSourceCodeLocation(e, r)
          }
          if (this._shouldFosterParentOnInsertion())
            this._fosterParentElement(e)
          else {
            const t = this.openElements.currentTmplContentOrNode
            this.treeAdapter.appendChild(t, e)
          }
        }
        _appendElement(e, t) {
          const r = this.treeAdapter.createElement(e.tagName, t, e.attrs)
          this._attachElementToTree(r, e.location)
        }
        _insertElement(e, t) {
          const r = this.treeAdapter.createElement(e.tagName, t, e.attrs)
          this._attachElementToTree(r, e.location),
            this.openElements.push(r, e.tagID)
        }
        _insertFakeElement(e, t) {
          const r = this.treeAdapter.createElement(e, ei.HTML, [])
          this._attachElementToTree(r, null), this.openElements.push(r, t)
        }
        _insertTemplate(e) {
          const t = this.treeAdapter.createElement(e.tagName, ei.HTML, e.attrs),
            r = this.treeAdapter.createDocumentFragment()
          this.treeAdapter.setTemplateContent(t, r),
            this._attachElementToTree(t, e.location),
            this.openElements.push(t, e.tagID),
            this.options.sourceCodeLocationInfo &&
              this.treeAdapter.setNodeSourceCodeLocation(r, null)
        }
        _insertFakeRootElement() {
          const e = this.treeAdapter.createElement(ni.HTML, ei.HTML, [])
          this.options.sourceCodeLocationInfo &&
            this.treeAdapter.setNodeSourceCodeLocation(e, null),
            this.treeAdapter.appendChild(this.openElements.current, e),
            this.openElements.push(e, si.HTML)
        }
        _appendCommentNode(e, t) {
          const r = this.treeAdapter.createCommentNode(e.data)
          this.treeAdapter.appendChild(t, r),
            this.options.sourceCodeLocationInfo &&
              this.treeAdapter.setNodeSourceCodeLocation(r, e.location)
        }
        _insertCharacters(e) {
          let t, r
          if (
            (this._shouldFosterParentOnInsertion()
              ? (({ parent: t, beforeElement: r } =
                  this._findFosterParentingLocation()),
                r
                  ? this.treeAdapter.insertTextBefore(t, e.chars, r)
                  : this.treeAdapter.insertText(t, e.chars))
              : ((t = this.openElements.currentTmplContentOrNode),
                this.treeAdapter.insertText(t, e.chars)),
            !e.location)
          )
            return
          const n = this.treeAdapter.getChildNodes(t),
            s = r ? n.lastIndexOf(r) : n.length,
            a = n[s - 1]
          if (this.treeAdapter.getNodeSourceCodeLocation(a)) {
            const { endLine: t, endCol: r, endOffset: n } = e.location
            this.treeAdapter.updateNodeSourceCodeLocation(a, {
              endLine: t,
              endCol: r,
              endOffset: n,
            })
          } else
            this.options.sourceCodeLocationInfo &&
              this.treeAdapter.setNodeSourceCodeLocation(a, e.location)
        }
        _adoptNodes(e, t) {
          for (
            let r = this.treeAdapter.getFirstChild(e);
            r;
            r = this.treeAdapter.getFirstChild(e)
          )
            this.treeAdapter.detachNode(r), this.treeAdapter.appendChild(t, r)
        }
        _setEndLocation(e, t) {
          if (this.treeAdapter.getNodeSourceCodeLocation(e) && t.location) {
            const r = t.location,
              n = this.treeAdapter.getTagName(e),
              s =
                t.type === Ga.END_TAG && n === t.tagName
                  ? {
                      endTag: { ...r },
                      endLine: r.endLine,
                      endCol: r.endCol,
                      endOffset: r.endOffset,
                    }
                  : {
                      endLine: r.startLine,
                      endCol: r.startCol,
                      endOffset: r.startOffset,
                    }
            this.treeAdapter.updateNodeSourceCodeLocation(e, s)
          }
        }
        shouldProcessStartTagTokenInForeignContent(e) {
          if (!this.currentNotInHTML) return !1
          let t, r
          return (
            0 === this.openElements.stackTop && this.fragmentContext
              ? ((t = this.fragmentContext), (r = this.fragmentContextID))
              : ({ current: t, currentTagId: r } = this.openElements),
            (e.tagID !== si.SVG ||
              this.treeAdapter.getTagName(t) !== ni.ANNOTATION_XML ||
              this.treeAdapter.getNamespaceURI(t) !== ei.MATHML) &&
              (this.tokenizer.inForeignNode ||
                ((e.tagID === si.MGLYPH || e.tagID === si.MALIGNMARK) &&
                  !this._isIntegrationPoint(r, t, ei.HTML)))
          )
        }
        _processToken(e) {
          switch (e.type) {
            case Ga.CHARACTER:
              this.onCharacter(e)
              break
            case Ga.NULL_CHARACTER:
              this.onNullCharacter(e)
              break
            case Ga.COMMENT:
              this.onComment(e)
              break
            case Ga.DOCTYPE:
              this.onDoctype(e)
              break
            case Ga.START_TAG:
              this._processStartTag(e)
              break
            case Ga.END_TAG:
              this.onEndTag(e)
              break
            case Ga.EOF:
              this.onEof(e)
              break
            case Ga.WHITESPACE_CHARACTER:
              this.onWhitespaceCharacter(e)
          }
        }
        _isIntegrationPoint(e, t, r) {
          return (function (e, t, r, n) {
            return (
              ((!n || n === ei.HTML) &&
                (function (e, t, r) {
                  if (t === ei.MATHML && e === si.ANNOTATION_XML)
                    for (let e = 0; e < r.length; e++)
                      if (r[e].name === ti.ENCODING) {
                        const t = r[e].value.toLowerCase()
                        return t === Ki || t === zi
                      }
                  return (
                    t === ei.SVG &&
                    (e === si.FOREIGN_OBJECT || e === si.DESC || e === si.TITLE)
                  )
                })(e, t, r)) ||
              ((!n || n === ei.MATHML) &&
                (function (e, t) {
                  return (
                    t === ei.MATHML &&
                    (e === si.MI ||
                      e === si.MO ||
                      e === si.MN ||
                      e === si.MS ||
                      e === si.MTEXT)
                  )
                })(e, t))
            )
          })(
            e,
            this.treeAdapter.getNamespaceURI(t),
            this.treeAdapter.getAttrList(t),
            r
          )
        }
        _reconstructActiveFormattingElements() {
          const e = this.activeFormattingElements.entries.length
          if (e) {
            const t = this.activeFormattingElements.entries.findIndex(
              (e) =>
                e.type === Bi.Marker || this.openElements.contains(e.element)
            )
            for (let r = t < 0 ? e - 1 : t - 1; r >= 0; r--) {
              const e = this.activeFormattingElements.entries[r]
              this._insertElement(
                e.token,
                this.treeAdapter.getNamespaceURI(e.element)
              ),
                (e.element = this.openElements.current)
            }
          }
        }
        _closeTableCell() {
          this.openElements.generateImpliedEndTags(),
            this.openElements.popUntilTableCellPopped(),
            this.activeFormattingElements.clearToLastMarker(),
            (this.insertionMode = lo.IN_ROW)
        }
        _closePElement() {
          this.openElements.generateImpliedEndTagsWithExclusion(si.P),
            this.openElements.popUntilTagNamePopped(si.P)
        }
        _resetInsertionMode() {
          for (let e = this.openElements.stackTop; e >= 0; e--)
            switch (
              0 === e && this.fragmentContext
                ? this.fragmentContextID
                : this.openElements.tagIDs[e]
            ) {
              case si.TR:
                return void (this.insertionMode = lo.IN_ROW)
              case si.TBODY:
              case si.THEAD:
              case si.TFOOT:
                return void (this.insertionMode = lo.IN_TABLE_BODY)
              case si.CAPTION:
                return void (this.insertionMode = lo.IN_CAPTION)
              case si.COLGROUP:
                return void (this.insertionMode = lo.IN_COLUMN_GROUP)
              case si.TABLE:
                return void (this.insertionMode = lo.IN_TABLE)
              case si.BODY:
                return void (this.insertionMode = lo.IN_BODY)
              case si.FRAMESET:
                return void (this.insertionMode = lo.IN_FRAMESET)
              case si.SELECT:
                return void this._resetInsertionModeForSelect(e)
              case si.TEMPLATE:
                return void (this.insertionMode =
                  this.tmplInsertionModeStack[0])
              case si.HTML:
                return void (this.insertionMode = this.headElement
                  ? lo.AFTER_HEAD
                  : lo.BEFORE_HEAD)
              case si.TD:
              case si.TH:
                if (e > 0) return void (this.insertionMode = lo.IN_CELL)
                break
              case si.HEAD:
                if (e > 0) return void (this.insertionMode = lo.IN_HEAD)
            }
          this.insertionMode = lo.IN_BODY
        }
        _resetInsertionModeForSelect(e) {
          if (e > 0)
            for (let t = e - 1; t > 0; t--) {
              const e = this.openElements.tagIDs[t]
              if (e === si.TEMPLATE) break
              if (e === si.TABLE)
                return void (this.insertionMode = lo.IN_SELECT_IN_TABLE)
            }
          this.insertionMode = lo.IN_SELECT
        }
        _isElementCausesFosterParenting(e) {
          return uo.has(e)
        }
        _shouldFosterParentOnInsertion() {
          return (
            this.fosterParentingEnabled &&
            this._isElementCausesFosterParenting(this.openElements.currentTagId)
          )
        }
        _findFosterParentingLocation() {
          for (let e = this.openElements.stackTop; e >= 0; e--) {
            const t = this.openElements.items[e]
            switch (this.openElements.tagIDs[e]) {
              case si.TEMPLATE:
                if (this.treeAdapter.getNamespaceURI(t) === ei.HTML)
                  return {
                    parent: this.treeAdapter.getTemplateContent(t),
                    beforeElement: null,
                  }
                break
              case si.TABLE: {
                const r = this.treeAdapter.getParentNode(t)
                return r
                  ? { parent: r, beforeElement: t }
                  : {
                      parent: this.openElements.items[e - 1],
                      beforeElement: null,
                    }
              }
            }
          }
          return { parent: this.openElements.items[0], beforeElement: null }
        }
        _fosterParentElement(e) {
          const t = this._findFosterParentingLocation()
          t.beforeElement
            ? this.treeAdapter.insertBefore(t.parent, e, t.beforeElement)
            : this.treeAdapter.appendChild(t.parent, e)
        }
        _isSpecialElement(e, t) {
          const r = this.treeAdapter.getNamespaceURI(e)
          return di[r].has(t)
        }
        onCharacter(e) {
          if (((this.skipNextNewLine = !1), this.tokenizer.inForeignNode))
            !(function (e, t) {
              e._insertCharacters(t), (e.framesetOk = !1)
            })(this, e)
          else
            switch (this.insertionMode) {
              case lo.INITIAL:
                bo(this, e)
                break
              case lo.BEFORE_HTML:
                So(this, e)
                break
              case lo.BEFORE_HEAD:
                Do(this, e)
                break
              case lo.IN_HEAD:
                Oo(this, e)
                break
              case lo.IN_HEAD_NO_SCRIPT:
                yo(this, e)
                break
              case lo.AFTER_HEAD:
                ko(this, e)
                break
              case lo.IN_BODY:
              case lo.IN_CAPTION:
              case lo.IN_CELL:
              case lo.IN_TEMPLATE:
                vo(this, e)
                break
              case lo.TEXT:
              case lo.IN_SELECT:
              case lo.IN_SELECT_IN_TABLE:
                this._insertCharacters(e)
                break
              case lo.IN_TABLE:
              case lo.IN_TABLE_BODY:
              case lo.IN_ROW:
                Vo(this, e)
                break
              case lo.IN_TABLE_TEXT:
                jo(this, e)
                break
              case lo.IN_COLUMN_GROUP:
                Zo(this, e)
                break
              case lo.AFTER_BODY:
                oc(this, e)
                break
              case lo.AFTER_AFTER_BODY:
                cc(this, e)
            }
        }
        onNullCharacter(e) {
          if (((this.skipNextNewLine = !1), this.tokenizer.inForeignNode))
            !(function (e, t) {
              ;(t.chars = Pa), e._insertCharacters(t)
            })(this, e)
          else
            switch (this.insertionMode) {
              case lo.INITIAL:
                bo(this, e)
                break
              case lo.BEFORE_HTML:
                So(this, e)
                break
              case lo.BEFORE_HEAD:
                Do(this, e)
                break
              case lo.IN_HEAD:
                Oo(this, e)
                break
              case lo.IN_HEAD_NO_SCRIPT:
                yo(this, e)
                break
              case lo.AFTER_HEAD:
                ko(this, e)
                break
              case lo.TEXT:
                this._insertCharacters(e)
                break
              case lo.IN_TABLE:
              case lo.IN_TABLE_BODY:
              case lo.IN_ROW:
                Vo(this, e)
                break
              case lo.IN_COLUMN_GROUP:
                Zo(this, e)
                break
              case lo.AFTER_BODY:
                oc(this, e)
                break
              case lo.AFTER_AFTER_BODY:
                cc(this, e)
            }
        }
        onComment(e) {
          if (((this.skipNextNewLine = !1), this.currentNotInHTML)) Co(this, e)
          else
            switch (this.insertionMode) {
              case lo.INITIAL:
              case lo.BEFORE_HTML:
              case lo.BEFORE_HEAD:
              case lo.IN_HEAD:
              case lo.IN_HEAD_NO_SCRIPT:
              case lo.AFTER_HEAD:
              case lo.IN_BODY:
              case lo.IN_TABLE:
              case lo.IN_CAPTION:
              case lo.IN_COLUMN_GROUP:
              case lo.IN_TABLE_BODY:
              case lo.IN_ROW:
              case lo.IN_CELL:
              case lo.IN_SELECT:
              case lo.IN_SELECT_IN_TABLE:
              case lo.IN_TEMPLATE:
              case lo.IN_FRAMESET:
              case lo.AFTER_FRAMESET:
                Co(this, e)
                break
              case lo.IN_TABLE_TEXT:
                Ko(this, e)
                break
              case lo.AFTER_BODY:
                !(function (e, t) {
                  e._appendCommentNode(t, e.openElements.items[0])
                })(this, e)
                break
              case lo.AFTER_AFTER_BODY:
              case lo.AFTER_AFTER_FRAMESET:
                !(function (e, t) {
                  e._appendCommentNode(t, e.document)
                })(this, e)
            }
        }
        onDoctype(e) {
          switch (((this.skipNextNewLine = !1), this.insertionMode)) {
            case lo.INITIAL:
              !(function (e, t) {
                e._setDocumentType(t)
                const r = t.forceQuirks
                  ? ri.QUIRKS
                  : (function (e) {
                      if (e.name !== Gi) return ri.QUIRKS
                      const { systemId: t } = e
                      if (
                        t &&
                        'http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd' ===
                          t.toLowerCase()
                      )
                        return ri.QUIRKS
                      let { publicId: r } = e
                      if (null !== r) {
                        if (((r = r.toLowerCase()), Qi.has(r))) return ri.QUIRKS
                        let e = null === t ? Yi : Vi
                        if (ji(r, e)) return ri.QUIRKS
                        if (((e = null === t ? Wi : Xi), ji(r, e)))
                          return ri.LIMITED_QUIRKS
                      }
                      return ri.NO_QUIRKS
                    })(t)
                ;(function (e) {
                  return (
                    e.name === Gi &&
                    null === e.publicId &&
                    (null === e.systemId ||
                      'about:legacy-compat' === e.systemId)
                  )
                })(t) || e._err(t, qa.nonConformingDoctype),
                  e.treeAdapter.setDocumentMode(e.document, r),
                  (e.insertionMode = lo.BEFORE_HTML)
              })(this, e)
              break
            case lo.BEFORE_HEAD:
            case lo.IN_HEAD:
            case lo.IN_HEAD_NO_SCRIPT:
            case lo.AFTER_HEAD:
              this._err(e, qa.misplacedDoctype)
              break
            case lo.IN_TABLE_TEXT:
              Ko(this, e)
          }
        }
        onStartTag(e) {
          ;(this.skipNextNewLine = !1),
            (this.currentToken = e),
            this._processStartTag(e),
            e.selfClosing &&
              !e.ackSelfClosing &&
              this._err(e, qa.nonVoidHtmlElementStartTagWithTrailingSolidus)
        }
        _processStartTag(e) {
          this.shouldProcessStartTagTokenInForeignContent(e)
            ? (function (e, t) {
                if (
                  (function (e) {
                    const t = e.tagID
                    return (
                      (t === si.FONT &&
                        e.attrs.some(
                          ({ name: e }) =>
                            e === ti.COLOR || e === ti.SIZE || e === ti.FACE
                        )) ||
                      ro.has(t)
                    )
                  })(t)
                )
                  lc(e), e._startTagOutsideForeignContent(t)
                else {
                  const r = e._getAdjustedCurrentElement(),
                    n = e.treeAdapter.getNamespaceURI(r)
                  n === ei.MATHML
                    ? no(t)
                    : n === ei.SVG &&
                      ((function (e) {
                        const t = to.get(e.tagName)
                        null != t &&
                          ((e.tagName = t), (e.tagID = hi(e.tagName)))
                      })(t),
                      so(t)),
                    ao(t),
                    t.selfClosing
                      ? e._appendElement(t, n)
                      : e._insertElement(t, n),
                    (t.ackSelfClosing = !0)
                }
              })(this, e)
            : this._startTagOutsideForeignContent(e)
        }
        _startTagOutsideForeignContent(e) {
          switch (this.insertionMode) {
            case lo.INITIAL:
              bo(this, e)
              break
            case lo.BEFORE_HTML:
              !(function (e, t) {
                t.tagID === si.HTML
                  ? (e._insertElement(t, ei.HTML),
                    (e.insertionMode = lo.BEFORE_HEAD))
                  : So(e, t)
              })(this, e)
              break
            case lo.BEFORE_HEAD:
              !(function (e, t) {
                switch (t.tagID) {
                  case si.HTML:
                    Ho(e, t)
                    break
                  case si.HEAD:
                    e._insertElement(t, ei.HTML),
                      (e.headElement = e.openElements.current),
                      (e.insertionMode = lo.IN_HEAD)
                    break
                  default:
                    Do(e, t)
                }
              })(this, e)
              break
            case lo.IN_HEAD:
              Ro(this, e)
              break
            case lo.IN_HEAD_NO_SCRIPT:
              !(function (e, t) {
                switch (t.tagID) {
                  case si.HTML:
                    Ho(e, t)
                    break
                  case si.BASEFONT:
                  case si.BGSOUND:
                  case si.HEAD:
                  case si.LINK:
                  case si.META:
                  case si.NOFRAMES:
                  case si.STYLE:
                    Ro(e, t)
                    break
                  case si.NOSCRIPT:
                    e._err(t, qa.nestedNoscriptInHead)
                    break
                  default:
                    yo(e, t)
                }
              })(this, e)
              break
            case lo.AFTER_HEAD:
              !(function (e, t) {
                switch (t.tagID) {
                  case si.HTML:
                    Ho(e, t)
                    break
                  case si.BODY:
                    e._insertElement(t, ei.HTML),
                      (e.framesetOk = !1),
                      (e.insertionMode = lo.IN_BODY)
                    break
                  case si.FRAMESET:
                    e._insertElement(t, ei.HTML),
                      (e.insertionMode = lo.IN_FRAMESET)
                    break
                  case si.BASE:
                  case si.BASEFONT:
                  case si.BGSOUND:
                  case si.LINK:
                  case si.META:
                  case si.NOFRAMES:
                  case si.SCRIPT:
                  case si.STYLE:
                  case si.TEMPLATE:
                  case si.TITLE:
                    e._err(t, qa.abandonedHeadElementChild),
                      e.openElements.push(e.headElement, si.HEAD),
                      Ro(e, t),
                      e.openElements.remove(e.headElement)
                    break
                  case si.HEAD:
                    e._err(t, qa.misplacedStartTagForHeadElement)
                    break
                  default:
                    ko(e, t)
                }
              })(this, e)
              break
            case lo.IN_BODY:
              Ho(this, e)
              break
            case lo.IN_TABLE:
              Yo(this, e)
              break
            case lo.IN_TABLE_TEXT:
              Ko(this, e)
              break
            case lo.IN_CAPTION:
              !(function (e, t) {
                const r = t.tagID
                zo.has(r)
                  ? e.openElements.hasInTableScope(si.CAPTION) &&
                    (e.openElements.generateImpliedEndTags(),
                    e.openElements.popUntilTagNamePopped(si.CAPTION),
                    e.activeFormattingElements.clearToLastMarker(),
                    (e.insertionMode = lo.IN_TABLE),
                    Yo(e, t))
                  : Ho(e, t)
              })(this, e)
              break
            case lo.IN_COLUMN_GROUP:
              $o(this, e)
              break
            case lo.IN_TABLE_BODY:
              Jo(this, e)
              break
            case lo.IN_ROW:
              tc(this, e)
              break
            case lo.IN_CELL:
              !(function (e, t) {
                const r = t.tagID
                zo.has(r)
                  ? (e.openElements.hasInTableScope(si.TD) ||
                      e.openElements.hasInTableScope(si.TH)) &&
                    (e._closeTableCell(), tc(e, t))
                  : Ho(e, t)
              })(this, e)
              break
            case lo.IN_SELECT:
              nc(this, e)
              break
            case lo.IN_SELECT_IN_TABLE:
              !(function (e, t) {
                const r = t.tagID
                r === si.CAPTION ||
                r === si.TABLE ||
                r === si.TBODY ||
                r === si.TFOOT ||
                r === si.THEAD ||
                r === si.TR ||
                r === si.TD ||
                r === si.TH
                  ? (e.openElements.popUntilTagNamePopped(si.SELECT),
                    e._resetInsertionMode(),
                    e._processStartTag(t))
                  : nc(e, t)
              })(this, e)
              break
            case lo.IN_TEMPLATE:
              !(function (e, t) {
                switch (t.tagID) {
                  case si.BASE:
                  case si.BASEFONT:
                  case si.BGSOUND:
                  case si.LINK:
                  case si.META:
                  case si.NOFRAMES:
                  case si.SCRIPT:
                  case si.STYLE:
                  case si.TEMPLATE:
                  case si.TITLE:
                    Ro(e, t)
                    break
                  case si.CAPTION:
                  case si.COLGROUP:
                  case si.TBODY:
                  case si.TFOOT:
                  case si.THEAD:
                    ;(e.tmplInsertionModeStack[0] = lo.IN_TABLE),
                      (e.insertionMode = lo.IN_TABLE),
                      Yo(e, t)
                    break
                  case si.COL:
                    ;(e.tmplInsertionModeStack[0] = lo.IN_COLUMN_GROUP),
                      (e.insertionMode = lo.IN_COLUMN_GROUP),
                      $o(e, t)
                    break
                  case si.TR:
                    ;(e.tmplInsertionModeStack[0] = lo.IN_TABLE_BODY),
                      (e.insertionMode = lo.IN_TABLE_BODY),
                      Jo(e, t)
                    break
                  case si.TD:
                  case si.TH:
                    ;(e.tmplInsertionModeStack[0] = lo.IN_ROW),
                      (e.insertionMode = lo.IN_ROW),
                      tc(e, t)
                    break
                  default:
                    ;(e.tmplInsertionModeStack[0] = lo.IN_BODY),
                      (e.insertionMode = lo.IN_BODY),
                      Ho(e, t)
                }
              })(this, e)
              break
            case lo.AFTER_BODY:
              !(function (e, t) {
                t.tagID === si.HTML ? Ho(e, t) : oc(e, t)
              })(this, e)
              break
            case lo.IN_FRAMESET:
              !(function (e, t) {
                switch (t.tagID) {
                  case si.HTML:
                    Ho(e, t)
                    break
                  case si.FRAMESET:
                    e._insertElement(t, ei.HTML)
                    break
                  case si.FRAME:
                    e._appendElement(t, ei.HTML), (t.ackSelfClosing = !0)
                    break
                  case si.NOFRAMES:
                    Ro(e, t)
                }
              })(this, e)
              break
            case lo.AFTER_FRAMESET:
              !(function (e, t) {
                switch (t.tagID) {
                  case si.HTML:
                    Ho(e, t)
                    break
                  case si.NOFRAMES:
                    Ro(e, t)
                }
              })(this, e)
              break
            case lo.AFTER_AFTER_BODY:
              !(function (e, t) {
                t.tagID === si.HTML ? Ho(e, t) : cc(e, t)
              })(this, e)
              break
            case lo.AFTER_AFTER_FRAMESET:
              !(function (e, t) {
                switch (t.tagID) {
                  case si.HTML:
                    Ho(e, t)
                    break
                  case si.NOFRAMES:
                    Ro(e, t)
                }
              })(this, e)
          }
        }
        onEndTag(e) {
          ;(this.skipNextNewLine = !1),
            (this.currentToken = e),
            this.currentNotInHTML
              ? (function (e, t) {
                  if (t.tagID === si.P || t.tagID === si.BR)
                    return lc(e), void e._endTagOutsideForeignContent(t)
                  for (let r = e.openElements.stackTop; r > 0; r--) {
                    const n = e.openElements.items[r]
                    if (e.treeAdapter.getNamespaceURI(n) === ei.HTML) {
                      e._endTagOutsideForeignContent(t)
                      break
                    }
                    const s = e.treeAdapter.getTagName(n)
                    if (s.toLowerCase() === t.tagName) {
                      ;(t.tagName = s), e.openElements.shortenToLength(r)
                      break
                    }
                  }
                })(this, e)
              : this._endTagOutsideForeignContent(e)
        }
        _endTagOutsideForeignContent(e) {
          switch (this.insertionMode) {
            case lo.INITIAL:
              bo(this, e)
              break
            case lo.BEFORE_HTML:
              !(function (e, t) {
                const r = t.tagID
                ;(r !== si.HTML &&
                  r !== si.HEAD &&
                  r !== si.BODY &&
                  r !== si.BR) ||
                  So(e, t)
              })(this, e)
              break
            case lo.BEFORE_HEAD:
              !(function (e, t) {
                const r = t.tagID
                r === si.HEAD || r === si.BODY || r === si.HTML || r === si.BR
                  ? Do(e, t)
                  : e._err(t, qa.endTagWithoutMatchingOpenElement)
              })(this, e)
              break
            case lo.IN_HEAD:
              !(function (e, t) {
                switch (t.tagID) {
                  case si.HEAD:
                    e.openElements.pop(), (e.insertionMode = lo.AFTER_HEAD)
                    break
                  case si.BODY:
                  case si.BR:
                  case si.HTML:
                    Oo(e, t)
                    break
                  case si.TEMPLATE:
                    Lo(e, t)
                    break
                  default:
                    e._err(t, qa.endTagWithoutMatchingOpenElement)
                }
              })(this, e)
              break
            case lo.IN_HEAD_NO_SCRIPT:
              !(function (e, t) {
                switch (t.tagID) {
                  case si.NOSCRIPT:
                    e.openElements.pop(), (e.insertionMode = lo.IN_HEAD)
                    break
                  case si.BR:
                    yo(e, t)
                    break
                  default:
                    e._err(t, qa.endTagWithoutMatchingOpenElement)
                }
              })(this, e)
              break
            case lo.AFTER_HEAD:
              !(function (e, t) {
                switch (t.tagID) {
                  case si.BODY:
                  case si.HTML:
                  case si.BR:
                    ko(e, t)
                    break
                  case si.TEMPLATE:
                    Lo(e, t)
                    break
                  default:
                    e._err(t, qa.endTagWithoutMatchingOpenElement)
                }
              })(this, e)
              break
            case lo.IN_BODY:
              qo(this, e)
              break
            case lo.TEXT:
              !(function (e, t) {
                var r
                t.tagID === si.SCRIPT &&
                  (null === (r = e.scriptHandler) ||
                    void 0 === r ||
                    r.call(e, e.openElements.current)),
                  e.openElements.pop(),
                  (e.insertionMode = e.originalInsertionMode)
              })(this, e)
              break
            case lo.IN_TABLE:
              Qo(this, e)
              break
            case lo.IN_TABLE_TEXT:
              Ko(this, e)
              break
            case lo.IN_CAPTION:
              !(function (e, t) {
                const r = t.tagID
                switch (r) {
                  case si.CAPTION:
                  case si.TABLE:
                    e.openElements.hasInTableScope(si.CAPTION) &&
                      (e.openElements.generateImpliedEndTags(),
                      e.openElements.popUntilTagNamePopped(si.CAPTION),
                      e.activeFormattingElements.clearToLastMarker(),
                      (e.insertionMode = lo.IN_TABLE),
                      r === si.TABLE && Qo(e, t))
                    break
                  case si.BODY:
                  case si.COL:
                  case si.COLGROUP:
                  case si.HTML:
                  case si.TBODY:
                  case si.TD:
                  case si.TFOOT:
                  case si.TH:
                  case si.THEAD:
                  case si.TR:
                    break
                  default:
                    qo(e, t)
                }
              })(this, e)
              break
            case lo.IN_COLUMN_GROUP:
              !(function (e, t) {
                switch (t.tagID) {
                  case si.COLGROUP:
                    e.openElements.currentTagId === si.COLGROUP &&
                      (e.openElements.pop(), (e.insertionMode = lo.IN_TABLE))
                    break
                  case si.TEMPLATE:
                    Lo(e, t)
                    break
                  case si.COL:
                    break
                  default:
                    Zo(e, t)
                }
              })(this, e)
              break
            case lo.IN_TABLE_BODY:
              ec(this, e)
              break
            case lo.IN_ROW:
              rc(this, e)
              break
            case lo.IN_CELL:
              !(function (e, t) {
                const r = t.tagID
                switch (r) {
                  case si.TD:
                  case si.TH:
                    e.openElements.hasInTableScope(r) &&
                      (e.openElements.generateImpliedEndTags(),
                      e.openElements.popUntilTagNamePopped(r),
                      e.activeFormattingElements.clearToLastMarker(),
                      (e.insertionMode = lo.IN_ROW))
                    break
                  case si.TABLE:
                  case si.TBODY:
                  case si.TFOOT:
                  case si.THEAD:
                  case si.TR:
                    e.openElements.hasInTableScope(r) &&
                      (e._closeTableCell(), rc(e, t))
                    break
                  case si.BODY:
                  case si.CAPTION:
                  case si.COL:
                  case si.COLGROUP:
                  case si.HTML:
                    break
                  default:
                    qo(e, t)
                }
              })(this, e)
              break
            case lo.IN_SELECT:
              sc(this, e)
              break
            case lo.IN_SELECT_IN_TABLE:
              !(function (e, t) {
                const r = t.tagID
                r === si.CAPTION ||
                r === si.TABLE ||
                r === si.TBODY ||
                r === si.TFOOT ||
                r === si.THEAD ||
                r === si.TR ||
                r === si.TD ||
                r === si.TH
                  ? e.openElements.hasInTableScope(r) &&
                    (e.openElements.popUntilTagNamePopped(si.SELECT),
                    e._resetInsertionMode(),
                    e.onEndTag(t))
                  : sc(e, t)
              })(this, e)
              break
            case lo.IN_TEMPLATE:
              !(function (e, t) {
                t.tagID === si.TEMPLATE && Lo(e, t)
              })(this, e)
              break
            case lo.AFTER_BODY:
              ic(this, e)
              break
            case lo.IN_FRAMESET:
              !(function (e, t) {
                t.tagID !== si.FRAMESET ||
                  e.openElements.isRootHtmlElementCurrent() ||
                  (e.openElements.pop(),
                  e.fragmentContext ||
                    e.openElements.currentTagId === si.FRAMESET ||
                    (e.insertionMode = lo.AFTER_FRAMESET))
              })(this, e)
              break
            case lo.AFTER_FRAMESET:
              !(function (e, t) {
                t.tagID === si.HTML &&
                  (e.insertionMode = lo.AFTER_AFTER_FRAMESET)
              })(this, e)
              break
            case lo.AFTER_AFTER_BODY:
              cc(this, e)
          }
        }
        onEof(e) {
          switch (this.insertionMode) {
            case lo.INITIAL:
              bo(this, e)
              break
            case lo.BEFORE_HTML:
              So(this, e)
              break
            case lo.BEFORE_HEAD:
              Do(this, e)
              break
            case lo.IN_HEAD:
              Oo(this, e)
              break
            case lo.IN_HEAD_NO_SCRIPT:
              yo(this, e)
              break
            case lo.AFTER_HEAD:
              ko(this, e)
              break
            case lo.IN_BODY:
            case lo.IN_TABLE:
            case lo.IN_CAPTION:
            case lo.IN_COLUMN_GROUP:
            case lo.IN_TABLE_BODY:
            case lo.IN_ROW:
            case lo.IN_CELL:
            case lo.IN_SELECT:
            case lo.IN_SELECT_IN_TABLE:
              Go(this, e)
              break
            case lo.TEXT:
              !(function (e, t) {
                e._err(t, qa.eofInElementThatCanContainOnlyText),
                  e.openElements.pop(),
                  (e.insertionMode = e.originalInsertionMode),
                  e.onEof(t)
              })(this, e)
              break
            case lo.IN_TABLE_TEXT:
              Ko(this, e)
              break
            case lo.IN_TEMPLATE:
              ac(this, e)
              break
            case lo.AFTER_BODY:
            case lo.IN_FRAMESET:
            case lo.AFTER_FRAMESET:
            case lo.AFTER_AFTER_BODY:
            case lo.AFTER_AFTER_FRAMESET:
              Io(this, e)
          }
        }
        onWhitespaceCharacter(e) {
          if (
            this.skipNextNewLine &&
            ((this.skipNextNewLine = !1),
            e.chars.charCodeAt(0) === va.LINE_FEED)
          ) {
            if (1 === e.chars.length) return
            e.chars = e.chars.substr(1)
          }
          if (this.tokenizer.inForeignNode) this._insertCharacters(e)
          else
            switch (this.insertionMode) {
              case lo.IN_HEAD:
              case lo.IN_HEAD_NO_SCRIPT:
              case lo.AFTER_HEAD:
              case lo.TEXT:
              case lo.IN_COLUMN_GROUP:
              case lo.IN_SELECT:
              case lo.IN_SELECT_IN_TABLE:
              case lo.IN_FRAMESET:
              case lo.AFTER_FRAMESET:
                this._insertCharacters(e)
                break
              case lo.IN_BODY:
              case lo.IN_CAPTION:
              case lo.IN_CELL:
              case lo.IN_TEMPLATE:
              case lo.AFTER_BODY:
              case lo.AFTER_AFTER_BODY:
              case lo.AFTER_AFTER_FRAMESET:
                Po(this, e)
                break
              case lo.IN_TABLE:
              case lo.IN_TABLE_BODY:
              case lo.IN_ROW:
                Vo(this, e)
                break
              case lo.IN_TABLE_TEXT:
                Xo(this, e)
            }
        }
      }
      function mo(e, t) {
        let r = e.activeFormattingElements.getElementEntryInScopeWithTagName(
          t.tagName
        )
        return (
          r
            ? e.openElements.contains(r.element)
              ? e.openElements.hasInScope(t.tagID) || (r = null)
              : (e.activeFormattingElements.removeEntry(r), (r = null))
            : Fo(e, t),
          r
        )
      }
      function To(e, t) {
        let r = null,
          n = e.openElements.stackTop
        for (; n >= 0; n--) {
          const s = e.openElements.items[n]
          if (s === t.element) break
          e._isSpecialElement(s, e.openElements.tagIDs[n]) && (r = s)
        }
        return (
          r ||
            (e.openElements.shortenToLength(n < 0 ? 0 : n),
            e.activeFormattingElements.removeEntry(t)),
          r
        )
      }
      function fo(e, t, r) {
        let n = t,
          s = e.openElements.getCommonAncestor(t)
        for (let a = 0, i = s; i !== r; a++, i = s) {
          s = e.openElements.getCommonAncestor(i)
          const r = e.activeFormattingElements.getElementEntry(i),
            o = r && a >= co
          !r || o
            ? (o && e.activeFormattingElements.removeEntry(r),
              e.openElements.remove(i))
            : ((i = Ao(e, r)),
              n === t && (e.activeFormattingElements.bookmark = r),
              e.treeAdapter.detachNode(n),
              e.treeAdapter.appendChild(i, n),
              (n = i))
        }
        return n
      }
      function Ao(e, t) {
        const r = e.treeAdapter.getNamespaceURI(t.element),
          n = e.treeAdapter.createElement(t.token.tagName, r, t.token.attrs)
        return e.openElements.replace(t.element, n), (t.element = n), n
      }
      function go(e, t, r) {
        const n = hi(e.treeAdapter.getTagName(t))
        if (e._isElementCausesFosterParenting(n)) e._fosterParentElement(r)
        else {
          const s = e.treeAdapter.getNamespaceURI(t)
          n === si.TEMPLATE &&
            s === ei.HTML &&
            (t = e.treeAdapter.getTemplateContent(t)),
            e.treeAdapter.appendChild(t, r)
        }
      }
      function _o(e, t, r) {
        const n = e.treeAdapter.getNamespaceURI(r.element),
          { token: s } = r,
          a = e.treeAdapter.createElement(s.tagName, n, s.attrs)
        e._adoptNodes(t, a),
          e.treeAdapter.appendChild(t, a),
          e.activeFormattingElements.insertElementAfterBookmark(a, s),
          e.activeFormattingElements.removeEntry(r),
          e.openElements.remove(r.element),
          e.openElements.insertAfter(t, a, s.tagID)
      }
      function No(e, t) {
        for (let r = 0; r < oo; r++) {
          const r = mo(e, t)
          if (!r) break
          const n = To(e, r)
          if (!n) break
          e.activeFormattingElements.bookmark = r
          const s = fo(e, n, r.element),
            a = e.openElements.getCommonAncestor(r.element)
          e.treeAdapter.detachNode(s), a && go(e, a, s), _o(e, n, r)
        }
      }
      function Co(e, t) {
        e._appendCommentNode(t, e.openElements.currentTmplContentOrNode)
      }
      function Io(e, t) {
        if (((e.stopped = !0), t.location)) {
          const r = e.fragmentContext ? 0 : 2
          for (let n = e.openElements.stackTop; n >= r; n--)
            e._setEndLocation(e.openElements.items[n], t)
          if (!e.fragmentContext && e.openElements.stackTop >= 0) {
            const r = e.openElements.items[0],
              n = e.treeAdapter.getNodeSourceCodeLocation(r)
            if (
              n &&
              !n.endTag &&
              (e._setEndLocation(r, t), e.openElements.stackTop >= 1)
            ) {
              const r = e.openElements.items[1],
                n = e.treeAdapter.getNodeSourceCodeLocation(r)
              n && !n.endTag && e._setEndLocation(r, t)
            }
          }
        }
      }
      function bo(e, t) {
        e._err(t, qa.missingDoctype, !0),
          e.treeAdapter.setDocumentMode(e.document, ri.QUIRKS),
          (e.insertionMode = lo.BEFORE_HTML),
          e._processToken(t)
      }
      function So(e, t) {
        e._insertFakeRootElement(),
          (e.insertionMode = lo.BEFORE_HEAD),
          e._processToken(t)
      }
      function Do(e, t) {
        e._insertFakeElement(ni.HEAD, si.HEAD),
          (e.headElement = e.openElements.current),
          (e.insertionMode = lo.IN_HEAD),
          e._processToken(t)
      }
      function Ro(e, t) {
        switch (t.tagID) {
          case si.HTML:
            Ho(e, t)
            break
          case si.BASE:
          case si.BASEFONT:
          case si.BGSOUND:
          case si.LINK:
          case si.META:
            e._appendElement(t, ei.HTML), (t.ackSelfClosing = !0)
            break
          case si.TITLE:
            e._switchToTextParsing(t, fi.RCDATA)
            break
          case si.NOSCRIPT:
            e.options.scriptingEnabled
              ? e._switchToTextParsing(t, fi.RAWTEXT)
              : (e._insertElement(t, ei.HTML),
                (e.insertionMode = lo.IN_HEAD_NO_SCRIPT))
            break
          case si.NOFRAMES:
          case si.STYLE:
            e._switchToTextParsing(t, fi.RAWTEXT)
            break
          case si.SCRIPT:
            e._switchToTextParsing(t, fi.SCRIPT_DATA)
            break
          case si.TEMPLATE:
            e._insertTemplate(t),
              e.activeFormattingElements.insertMarker(),
              (e.framesetOk = !1),
              (e.insertionMode = lo.IN_TEMPLATE),
              e.tmplInsertionModeStack.unshift(lo.IN_TEMPLATE)
            break
          case si.HEAD:
            e._err(t, qa.misplacedStartTagForHeadElement)
            break
          default:
            Oo(e, t)
        }
      }
      function Lo(e, t) {
        e.openElements.tmplCount > 0
          ? (e.openElements.generateImpliedEndTagsThoroughly(),
            e.openElements.currentTagId !== si.TEMPLATE &&
              e._err(t, qa.closingOfElementWithOpenChildElements),
            e.openElements.popUntilTagNamePopped(si.TEMPLATE),
            e.activeFormattingElements.clearToLastMarker(),
            e.tmplInsertionModeStack.shift(),
            e._resetInsertionMode())
          : e._err(t, qa.endTagWithoutMatchingOpenElement)
      }
      function Oo(e, t) {
        e.openElements.pop(),
          (e.insertionMode = lo.AFTER_HEAD),
          e._processToken(t)
      }
      function yo(e, t) {
        const r =
          t.type === Ga.EOF
            ? qa.openElementsLeftAfterEof
            : qa.disallowedContentInNoscriptInHead
        e._err(t, r),
          e.openElements.pop(),
          (e.insertionMode = lo.IN_HEAD),
          e._processToken(t)
      }
      function ko(e, t) {
        e._insertFakeElement(ni.BODY, si.BODY),
          (e.insertionMode = lo.IN_BODY),
          Mo(e, t)
      }
      function Mo(e, t) {
        switch (t.type) {
          case Ga.CHARACTER:
            vo(e, t)
            break
          case Ga.WHITESPACE_CHARACTER:
            Po(e, t)
            break
          case Ga.COMMENT:
            Co(e, t)
            break
          case Ga.START_TAG:
            Ho(e, t)
            break
          case Ga.END_TAG:
            qo(e, t)
            break
          case Ga.EOF:
            Go(e, t)
        }
      }
      function Po(e, t) {
        e._reconstructActiveFormattingElements(), e._insertCharacters(t)
      }
      function vo(e, t) {
        e._reconstructActiveFormattingElements(),
          e._insertCharacters(t),
          (e.framesetOk = !1)
      }
      function wo(e, t) {
        e._reconstructActiveFormattingElements(),
          e._appendElement(t, ei.HTML),
          (e.framesetOk = !1),
          (t.ackSelfClosing = !0)
      }
      function xo(e) {
        const t = Ya(e, ti.TYPE)
        return null != t && t.toLowerCase() === io
      }
      function Bo(e, t) {
        e._switchToTextParsing(t, fi.RAWTEXT)
      }
      function Uo(e, t) {
        e._reconstructActiveFormattingElements(), e._insertElement(t, ei.HTML)
      }
      function Ho(e, t) {
        switch (t.tagID) {
          case si.I:
          case si.S:
          case si.B:
          case si.U:
          case si.EM:
          case si.TT:
          case si.BIG:
          case si.CODE:
          case si.FONT:
          case si.SMALL:
          case si.STRIKE:
          case si.STRONG:
            !(function (e, t) {
              e._reconstructActiveFormattingElements(),
                e._insertElement(t, ei.HTML),
                e.activeFormattingElements.pushElement(
                  e.openElements.current,
                  t
                )
            })(e, t)
            break
          case si.A:
            !(function (e, t) {
              const r =
                e.activeFormattingElements.getElementEntryInScopeWithTagName(
                  ni.A
                )
              r &&
                (No(e, t),
                e.openElements.remove(r.element),
                e.activeFormattingElements.removeEntry(r)),
                e._reconstructActiveFormattingElements(),
                e._insertElement(t, ei.HTML),
                e.activeFormattingElements.pushElement(
                  e.openElements.current,
                  t
                )
            })(e, t)
            break
          case si.H1:
          case si.H2:
          case si.H3:
          case si.H4:
          case si.H5:
          case si.H6:
            !(function (e, t) {
              e.openElements.hasInButtonScope(si.P) && e._closePElement(),
                pi(e.openElements.currentTagId) && e.openElements.pop(),
                e._insertElement(t, ei.HTML)
            })(e, t)
            break
          case si.P:
          case si.DL:
          case si.OL:
          case si.UL:
          case si.DIV:
          case si.DIR:
          case si.NAV:
          case si.MAIN:
          case si.MENU:
          case si.ASIDE:
          case si.CENTER:
          case si.FIGURE:
          case si.FOOTER:
          case si.HEADER:
          case si.HGROUP:
          case si.DIALOG:
          case si.DETAILS:
          case si.ADDRESS:
          case si.ARTICLE:
          case si.SECTION:
          case si.SUMMARY:
          case si.FIELDSET:
          case si.BLOCKQUOTE:
          case si.FIGCAPTION:
            !(function (e, t) {
              e.openElements.hasInButtonScope(si.P) && e._closePElement(),
                e._insertElement(t, ei.HTML)
            })(e, t)
            break
          case si.LI:
          case si.DD:
          case si.DT:
            !(function (e, t) {
              e.framesetOk = !1
              const r = t.tagID
              for (let t = e.openElements.stackTop; t >= 0; t--) {
                const n = e.openElements.tagIDs[t]
                if (
                  (r === si.LI && n === si.LI) ||
                  ((r === si.DD || r === si.DT) && (n === si.DD || n === si.DT))
                ) {
                  e.openElements.generateImpliedEndTagsWithExclusion(n),
                    e.openElements.popUntilTagNamePopped(n)
                  break
                }
                if (
                  n !== si.ADDRESS &&
                  n !== si.DIV &&
                  n !== si.P &&
                  e._isSpecialElement(e.openElements.items[t], n)
                )
                  break
              }
              e.openElements.hasInButtonScope(si.P) && e._closePElement(),
                e._insertElement(t, ei.HTML)
            })(e, t)
            break
          case si.BR:
          case si.IMG:
          case si.WBR:
          case si.AREA:
          case si.EMBED:
          case si.KEYGEN:
            wo(e, t)
            break
          case si.HR:
            !(function (e, t) {
              e.openElements.hasInButtonScope(si.P) && e._closePElement(),
                e._appendElement(t, ei.HTML),
                (e.framesetOk = !1),
                (t.ackSelfClosing = !0)
            })(e, t)
            break
          case si.RB:
          case si.RTC:
            !(function (e, t) {
              e.openElements.hasInScope(si.RUBY) &&
                e.openElements.generateImpliedEndTags(),
                e._insertElement(t, ei.HTML)
            })(e, t)
            break
          case si.RT:
          case si.RP:
            !(function (e, t) {
              e.openElements.hasInScope(si.RUBY) &&
                e.openElements.generateImpliedEndTagsWithExclusion(si.RTC),
                e._insertElement(t, ei.HTML)
            })(e, t)
            break
          case si.PRE:
          case si.LISTING:
            !(function (e, t) {
              e.openElements.hasInButtonScope(si.P) && e._closePElement(),
                e._insertElement(t, ei.HTML),
                (e.skipNextNewLine = !0),
                (e.framesetOk = !1)
            })(e, t)
            break
          case si.XMP:
            !(function (e, t) {
              e.openElements.hasInButtonScope(si.P) && e._closePElement(),
                e._reconstructActiveFormattingElements(),
                (e.framesetOk = !1),
                e._switchToTextParsing(t, fi.RAWTEXT)
            })(e, t)
            break
          case si.SVG:
            !(function (e, t) {
              e._reconstructActiveFormattingElements(),
                so(t),
                ao(t),
                t.selfClosing
                  ? e._appendElement(t, ei.SVG)
                  : e._insertElement(t, ei.SVG),
                (t.ackSelfClosing = !0)
            })(e, t)
            break
          case si.HTML:
            !(function (e, t) {
              0 === e.openElements.tmplCount &&
                e.treeAdapter.adoptAttributes(e.openElements.items[0], t.attrs)
            })(e, t)
            break
          case si.BASE:
          case si.LINK:
          case si.META:
          case si.STYLE:
          case si.TITLE:
          case si.SCRIPT:
          case si.BGSOUND:
          case si.BASEFONT:
          case si.TEMPLATE:
            Ro(e, t)
            break
          case si.BODY:
            !(function (e, t) {
              const r = e.openElements.tryPeekProperlyNestedBodyElement()
              r &&
                0 === e.openElements.tmplCount &&
                ((e.framesetOk = !1), e.treeAdapter.adoptAttributes(r, t.attrs))
            })(e, t)
            break
          case si.FORM:
            !(function (e, t) {
              const r = e.openElements.tmplCount > 0
              ;(e.formElement && !r) ||
                (e.openElements.hasInButtonScope(si.P) && e._closePElement(),
                e._insertElement(t, ei.HTML),
                r || (e.formElement = e.openElements.current))
            })(e, t)
            break
          case si.NOBR:
            !(function (e, t) {
              e._reconstructActiveFormattingElements(),
                e.openElements.hasInScope(si.NOBR) &&
                  (No(e, t), e._reconstructActiveFormattingElements()),
                e._insertElement(t, ei.HTML),
                e.activeFormattingElements.pushElement(
                  e.openElements.current,
                  t
                )
            })(e, t)
            break
          case si.MATH:
            !(function (e, t) {
              e._reconstructActiveFormattingElements(),
                no(t),
                ao(t),
                t.selfClosing
                  ? e._appendElement(t, ei.MATHML)
                  : e._insertElement(t, ei.MATHML),
                (t.ackSelfClosing = !0)
            })(e, t)
            break
          case si.TABLE:
            !(function (e, t) {
              e.treeAdapter.getDocumentMode(e.document) !== ri.QUIRKS &&
                e.openElements.hasInButtonScope(si.P) &&
                e._closePElement(),
                e._insertElement(t, ei.HTML),
                (e.framesetOk = !1),
                (e.insertionMode = lo.IN_TABLE)
            })(e, t)
            break
          case si.INPUT:
            !(function (e, t) {
              e._reconstructActiveFormattingElements(),
                e._appendElement(t, ei.HTML),
                xo(t) || (e.framesetOk = !1),
                (t.ackSelfClosing = !0)
            })(e, t)
            break
          case si.PARAM:
          case si.TRACK:
          case si.SOURCE:
            !(function (e, t) {
              e._appendElement(t, ei.HTML), (t.ackSelfClosing = !0)
            })(e, t)
            break
          case si.IMAGE:
            !(function (e, t) {
              ;(t.tagName = ni.IMG), (t.tagID = si.IMG), wo(e, t)
            })(e, t)
            break
          case si.BUTTON:
            !(function (e, t) {
              e.openElements.hasInScope(si.BUTTON) &&
                (e.openElements.generateImpliedEndTags(),
                e.openElements.popUntilTagNamePopped(si.BUTTON)),
                e._reconstructActiveFormattingElements(),
                e._insertElement(t, ei.HTML),
                (e.framesetOk = !1)
            })(e, t)
            break
          case si.APPLET:
          case si.OBJECT:
          case si.MARQUEE:
            !(function (e, t) {
              e._reconstructActiveFormattingElements(),
                e._insertElement(t, ei.HTML),
                e.activeFormattingElements.insertMarker(),
                (e.framesetOk = !1)
            })(e, t)
            break
          case si.IFRAME:
            !(function (e, t) {
              ;(e.framesetOk = !1), e._switchToTextParsing(t, fi.RAWTEXT)
            })(e, t)
            break
          case si.SELECT:
            !(function (e, t) {
              e._reconstructActiveFormattingElements(),
                e._insertElement(t, ei.HTML),
                (e.framesetOk = !1),
                (e.insertionMode =
                  e.insertionMode === lo.IN_TABLE ||
                  e.insertionMode === lo.IN_CAPTION ||
                  e.insertionMode === lo.IN_TABLE_BODY ||
                  e.insertionMode === lo.IN_ROW ||
                  e.insertionMode === lo.IN_CELL
                    ? lo.IN_SELECT_IN_TABLE
                    : lo.IN_SELECT)
            })(e, t)
            break
          case si.OPTION:
          case si.OPTGROUP:
            !(function (e, t) {
              e.openElements.currentTagId === si.OPTION && e.openElements.pop(),
                e._reconstructActiveFormattingElements(),
                e._insertElement(t, ei.HTML)
            })(e, t)
            break
          case si.NOEMBED:
            Bo(e, t)
            break
          case si.FRAMESET:
            !(function (e, t) {
              const r = e.openElements.tryPeekProperlyNestedBodyElement()
              e.framesetOk &&
                r &&
                (e.treeAdapter.detachNode(r),
                e.openElements.popAllUpToHtmlElement(),
                e._insertElement(t, ei.HTML),
                (e.insertionMode = lo.IN_FRAMESET))
            })(e, t)
            break
          case si.TEXTAREA:
            !(function (e, t) {
              e._insertElement(t, ei.HTML),
                (e.skipNextNewLine = !0),
                (e.tokenizer.state = fi.RCDATA),
                (e.originalInsertionMode = e.insertionMode),
                (e.framesetOk = !1),
                (e.insertionMode = lo.TEXT)
            })(e, t)
            break
          case si.NOSCRIPT:
            e.options.scriptingEnabled ? Bo(e, t) : Uo(e, t)
            break
          case si.PLAINTEXT:
            !(function (e, t) {
              e.openElements.hasInButtonScope(si.P) && e._closePElement(),
                e._insertElement(t, ei.HTML),
                (e.tokenizer.state = fi.PLAINTEXT)
            })(e, t)
            break
          case si.COL:
          case si.TH:
          case si.TD:
          case si.TR:
          case si.HEAD:
          case si.FRAME:
          case si.TBODY:
          case si.TFOOT:
          case si.THEAD:
          case si.CAPTION:
          case si.COLGROUP:
            break
          default:
            Uo(e, t)
        }
      }
      function Fo(e, t) {
        const r = t.tagName,
          n = t.tagID
        for (let t = e.openElements.stackTop; t > 0; t--) {
          const s = e.openElements.items[t],
            a = e.openElements.tagIDs[t]
          if (
            n === a &&
            (n !== si.UNKNOWN || e.treeAdapter.getTagName(s) === r)
          ) {
            e.openElements.generateImpliedEndTagsWithExclusion(n),
              e.openElements.stackTop >= t && e.openElements.shortenToLength(t)
            break
          }
          if (e._isSpecialElement(s, a)) break
        }
      }
      function qo(e, t) {
        switch (t.tagID) {
          case si.A:
          case si.B:
          case si.I:
          case si.S:
          case si.U:
          case si.EM:
          case si.TT:
          case si.BIG:
          case si.CODE:
          case si.FONT:
          case si.NOBR:
          case si.SMALL:
          case si.STRIKE:
          case si.STRONG:
            No(e, t)
            break
          case si.P:
            !(function (e) {
              e.openElements.hasInButtonScope(si.P) ||
                e._insertFakeElement(ni.P, si.P),
                e._closePElement()
            })(e)
            break
          case si.DL:
          case si.UL:
          case si.OL:
          case si.DIR:
          case si.DIV:
          case si.NAV:
          case si.PRE:
          case si.MAIN:
          case si.MENU:
          case si.ASIDE:
          case si.BUTTON:
          case si.CENTER:
          case si.FIGURE:
          case si.FOOTER:
          case si.HEADER:
          case si.HGROUP:
          case si.DIALOG:
          case si.ADDRESS:
          case si.ARTICLE:
          case si.DETAILS:
          case si.SECTION:
          case si.SUMMARY:
          case si.LISTING:
          case si.FIELDSET:
          case si.BLOCKQUOTE:
          case si.FIGCAPTION:
            !(function (e, t) {
              const r = t.tagID
              e.openElements.hasInScope(r) &&
                (e.openElements.generateImpliedEndTags(),
                e.openElements.popUntilTagNamePopped(r))
            })(e, t)
            break
          case si.LI:
            !(function (e) {
              e.openElements.hasInListItemScope(si.LI) &&
                (e.openElements.generateImpliedEndTagsWithExclusion(si.LI),
                e.openElements.popUntilTagNamePopped(si.LI))
            })(e)
            break
          case si.DD:
          case si.DT:
            !(function (e, t) {
              const r = t.tagID
              e.openElements.hasInScope(r) &&
                (e.openElements.generateImpliedEndTagsWithExclusion(r),
                e.openElements.popUntilTagNamePopped(r))
            })(e, t)
            break
          case si.H1:
          case si.H2:
          case si.H3:
          case si.H4:
          case si.H5:
          case si.H6:
            !(function (e) {
              e.openElements.hasNumberedHeaderInScope() &&
                (e.openElements.generateImpliedEndTags(),
                e.openElements.popUntilNumberedHeaderPopped())
            })(e)
            break
          case si.BR:
            !(function (e) {
              e._reconstructActiveFormattingElements(),
                e._insertFakeElement(ni.BR, si.BR),
                e.openElements.pop(),
                (e.framesetOk = !1)
            })(e)
            break
          case si.BODY:
            !(function (e, t) {
              if (
                e.openElements.hasInScope(si.BODY) &&
                ((e.insertionMode = lo.AFTER_BODY),
                e.options.sourceCodeLocationInfo)
              ) {
                const r = e.openElements.tryPeekProperlyNestedBodyElement()
                r && e._setEndLocation(r, t)
              }
            })(e, t)
            break
          case si.HTML:
            !(function (e, t) {
              e.openElements.hasInScope(si.BODY) &&
                ((e.insertionMode = lo.AFTER_BODY), ic(e, t))
            })(e, t)
            break
          case si.FORM:
            !(function (e) {
              const t = e.openElements.tmplCount > 0,
                { formElement: r } = e
              t || (e.formElement = null),
                (r || t) &&
                  e.openElements.hasInScope(si.FORM) &&
                  (e.openElements.generateImpliedEndTags(),
                  t
                    ? e.openElements.popUntilTagNamePopped(si.FORM)
                    : r && e.openElements.remove(r))
            })(e)
            break
          case si.APPLET:
          case si.OBJECT:
          case si.MARQUEE:
            !(function (e, t) {
              const r = t.tagID
              e.openElements.hasInScope(r) &&
                (e.openElements.generateImpliedEndTags(),
                e.openElements.popUntilTagNamePopped(r),
                e.activeFormattingElements.clearToLastMarker())
            })(e, t)
            break
          case si.TEMPLATE:
            Lo(e, t)
            break
          default:
            Fo(e, t)
        }
      }
      function Go(e, t) {
        e.tmplInsertionModeStack.length > 0 ? ac(e, t) : Io(e, t)
      }
      function Vo(e, t) {
        if (uo.has(e.openElements.currentTagId))
          switch (
            ((e.pendingCharacterTokens.length = 0),
            (e.hasNonWhitespacePendingCharacterToken = !1),
            (e.originalInsertionMode = e.insertionMode),
            (e.insertionMode = lo.IN_TABLE_TEXT),
            t.type)
          ) {
            case Ga.CHARACTER:
              jo(e, t)
              break
            case Ga.WHITESPACE_CHARACTER:
              Xo(e, t)
          }
        else Wo(e, t)
      }
      function Yo(e, t) {
        switch (t.tagID) {
          case si.TD:
          case si.TH:
          case si.TR:
            !(function (e, t) {
              e.openElements.clearBackToTableContext(),
                e._insertFakeElement(ni.TBODY, si.TBODY),
                (e.insertionMode = lo.IN_TABLE_BODY),
                Jo(e, t)
            })(e, t)
            break
          case si.STYLE:
          case si.SCRIPT:
          case si.TEMPLATE:
            Ro(e, t)
            break
          case si.COL:
            !(function (e, t) {
              e.openElements.clearBackToTableContext(),
                e._insertFakeElement(ni.COLGROUP, si.COLGROUP),
                (e.insertionMode = lo.IN_COLUMN_GROUP),
                $o(e, t)
            })(e, t)
            break
          case si.FORM:
            !(function (e, t) {
              e.formElement ||
                0 !== e.openElements.tmplCount ||
                (e._insertElement(t, ei.HTML),
                (e.formElement = e.openElements.current),
                e.openElements.pop())
            })(e, t)
            break
          case si.TABLE:
            !(function (e, t) {
              e.openElements.hasInTableScope(si.TABLE) &&
                (e.openElements.popUntilTagNamePopped(si.TABLE),
                e._resetInsertionMode(),
                e._processStartTag(t))
            })(e, t)
            break
          case si.TBODY:
          case si.TFOOT:
          case si.THEAD:
            !(function (e, t) {
              e.openElements.clearBackToTableContext(),
                e._insertElement(t, ei.HTML),
                (e.insertionMode = lo.IN_TABLE_BODY)
            })(e, t)
            break
          case si.INPUT:
            !(function (e, t) {
              xo(t) ? e._appendElement(t, ei.HTML) : Wo(e, t),
                (t.ackSelfClosing = !0)
            })(e, t)
            break
          case si.CAPTION:
            !(function (e, t) {
              e.openElements.clearBackToTableContext(),
                e.activeFormattingElements.insertMarker(),
                e._insertElement(t, ei.HTML),
                (e.insertionMode = lo.IN_CAPTION)
            })(e, t)
            break
          case si.COLGROUP:
            !(function (e, t) {
              e.openElements.clearBackToTableContext(),
                e._insertElement(t, ei.HTML),
                (e.insertionMode = lo.IN_COLUMN_GROUP)
            })(e, t)
            break
          default:
            Wo(e, t)
        }
      }
      function Qo(e, t) {
        switch (t.tagID) {
          case si.TABLE:
            e.openElements.hasInTableScope(si.TABLE) &&
              (e.openElements.popUntilTagNamePopped(si.TABLE),
              e._resetInsertionMode())
            break
          case si.TEMPLATE:
            Lo(e, t)
            break
          case si.BODY:
          case si.CAPTION:
          case si.COL:
          case si.COLGROUP:
          case si.HTML:
          case si.TBODY:
          case si.TD:
          case si.TFOOT:
          case si.TH:
          case si.THEAD:
          case si.TR:
            break
          default:
            Wo(e, t)
        }
      }
      function Wo(e, t) {
        const r = e.fosterParentingEnabled
        ;(e.fosterParentingEnabled = !0),
          Mo(e, t),
          (e.fosterParentingEnabled = r)
      }
      function Xo(e, t) {
        e.pendingCharacterTokens.push(t)
      }
      function jo(e, t) {
        e.pendingCharacterTokens.push(t),
          (e.hasNonWhitespacePendingCharacterToken = !0)
      }
      function Ko(e, t) {
        let r = 0
        if (e.hasNonWhitespacePendingCharacterToken)
          for (; r < e.pendingCharacterTokens.length; r++)
            Wo(e, e.pendingCharacterTokens[r])
        else
          for (; r < e.pendingCharacterTokens.length; r++)
            e._insertCharacters(e.pendingCharacterTokens[r])
        ;(e.insertionMode = e.originalInsertionMode), e._processToken(t)
      }
      const zo = new Set([
        si.CAPTION,
        si.COL,
        si.COLGROUP,
        si.TBODY,
        si.TD,
        si.TFOOT,
        si.TH,
        si.THEAD,
        si.TR,
      ])
      function $o(e, t) {
        switch (t.tagID) {
          case si.HTML:
            Ho(e, t)
            break
          case si.COL:
            e._appendElement(t, ei.HTML), (t.ackSelfClosing = !0)
            break
          case si.TEMPLATE:
            Ro(e, t)
            break
          default:
            Zo(e, t)
        }
      }
      function Zo(e, t) {
        e.openElements.currentTagId === si.COLGROUP &&
          (e.openElements.pop(),
          (e.insertionMode = lo.IN_TABLE),
          e._processToken(t))
      }
      function Jo(e, t) {
        switch (t.tagID) {
          case si.TR:
            e.openElements.clearBackToTableBodyContext(),
              e._insertElement(t, ei.HTML),
              (e.insertionMode = lo.IN_ROW)
            break
          case si.TH:
          case si.TD:
            e.openElements.clearBackToTableBodyContext(),
              e._insertFakeElement(ni.TR, si.TR),
              (e.insertionMode = lo.IN_ROW),
              tc(e, t)
            break
          case si.CAPTION:
          case si.COL:
          case si.COLGROUP:
          case si.TBODY:
          case si.TFOOT:
          case si.THEAD:
            e.openElements.hasTableBodyContextInTableScope() &&
              (e.openElements.clearBackToTableBodyContext(),
              e.openElements.pop(),
              (e.insertionMode = lo.IN_TABLE),
              Yo(e, t))
            break
          default:
            Yo(e, t)
        }
      }
      function ec(e, t) {
        const r = t.tagID
        switch (t.tagID) {
          case si.TBODY:
          case si.TFOOT:
          case si.THEAD:
            e.openElements.hasInTableScope(r) &&
              (e.openElements.clearBackToTableBodyContext(),
              e.openElements.pop(),
              (e.insertionMode = lo.IN_TABLE))
            break
          case si.TABLE:
            e.openElements.hasTableBodyContextInTableScope() &&
              (e.openElements.clearBackToTableBodyContext(),
              e.openElements.pop(),
              (e.insertionMode = lo.IN_TABLE),
              Qo(e, t))
            break
          case si.BODY:
          case si.CAPTION:
          case si.COL:
          case si.COLGROUP:
          case si.HTML:
          case si.TD:
          case si.TH:
          case si.TR:
            break
          default:
            Qo(e, t)
        }
      }
      function tc(e, t) {
        switch (t.tagID) {
          case si.TH:
          case si.TD:
            e.openElements.clearBackToTableRowContext(),
              e._insertElement(t, ei.HTML),
              (e.insertionMode = lo.IN_CELL),
              e.activeFormattingElements.insertMarker()
            break
          case si.CAPTION:
          case si.COL:
          case si.COLGROUP:
          case si.TBODY:
          case si.TFOOT:
          case si.THEAD:
          case si.TR:
            e.openElements.hasInTableScope(si.TR) &&
              (e.openElements.clearBackToTableRowContext(),
              e.openElements.pop(),
              (e.insertionMode = lo.IN_TABLE_BODY),
              Jo(e, t))
            break
          default:
            Yo(e, t)
        }
      }
      function rc(e, t) {
        switch (t.tagID) {
          case si.TR:
            e.openElements.hasInTableScope(si.TR) &&
              (e.openElements.clearBackToTableRowContext(),
              e.openElements.pop(),
              (e.insertionMode = lo.IN_TABLE_BODY))
            break
          case si.TABLE:
            e.openElements.hasInTableScope(si.TR) &&
              (e.openElements.clearBackToTableRowContext(),
              e.openElements.pop(),
              (e.insertionMode = lo.IN_TABLE_BODY),
              ec(e, t))
            break
          case si.TBODY:
          case si.TFOOT:
          case si.THEAD:
            ;(e.openElements.hasInTableScope(t.tagID) ||
              e.openElements.hasInTableScope(si.TR)) &&
              (e.openElements.clearBackToTableRowContext(),
              e.openElements.pop(),
              (e.insertionMode = lo.IN_TABLE_BODY),
              ec(e, t))
            break
          case si.BODY:
          case si.CAPTION:
          case si.COL:
          case si.COLGROUP:
          case si.HTML:
          case si.TD:
          case si.TH:
            break
          default:
            Qo(e, t)
        }
      }
      function nc(e, t) {
        switch (t.tagID) {
          case si.HTML:
            Ho(e, t)
            break
          case si.OPTION:
            e.openElements.currentTagId === si.OPTION && e.openElements.pop(),
              e._insertElement(t, ei.HTML)
            break
          case si.OPTGROUP:
            e.openElements.currentTagId === si.OPTION && e.openElements.pop(),
              e.openElements.currentTagId === si.OPTGROUP &&
                e.openElements.pop(),
              e._insertElement(t, ei.HTML)
            break
          case si.INPUT:
          case si.KEYGEN:
          case si.TEXTAREA:
          case si.SELECT:
            e.openElements.hasInSelectScope(si.SELECT) &&
              (e.openElements.popUntilTagNamePopped(si.SELECT),
              e._resetInsertionMode(),
              t.tagID !== si.SELECT && e._processStartTag(t))
            break
          case si.SCRIPT:
          case si.TEMPLATE:
            Ro(e, t)
        }
      }
      function sc(e, t) {
        switch (t.tagID) {
          case si.OPTGROUP:
            e.openElements.stackTop > 0 &&
              e.openElements.currentTagId === si.OPTION &&
              e.openElements.tagIDs[e.openElements.stackTop - 1] ===
                si.OPTGROUP &&
              e.openElements.pop(),
              e.openElements.currentTagId === si.OPTGROUP &&
                e.openElements.pop()
            break
          case si.OPTION:
            e.openElements.currentTagId === si.OPTION && e.openElements.pop()
            break
          case si.SELECT:
            e.openElements.hasInSelectScope(si.SELECT) &&
              (e.openElements.popUntilTagNamePopped(si.SELECT),
              e._resetInsertionMode())
            break
          case si.TEMPLATE:
            Lo(e, t)
        }
      }
      function ac(e, t) {
        e.openElements.tmplCount > 0
          ? (e.openElements.popUntilTagNamePopped(si.TEMPLATE),
            e.activeFormattingElements.clearToLastMarker(),
            e.tmplInsertionModeStack.shift(),
            e._resetInsertionMode(),
            e.onEof(t))
          : Io(e, t)
      }
      function ic(e, t) {
        var r
        if (t.tagID === si.HTML) {
          if (
            (e.fragmentContext || (e.insertionMode = lo.AFTER_AFTER_BODY),
            e.options.sourceCodeLocationInfo &&
              e.openElements.tagIDs[0] === si.HTML)
          ) {
            e._setEndLocation(e.openElements.items[0], t)
            const n = e.openElements.items[1]
            n &&
              !(null === (r = e.treeAdapter.getNodeSourceCodeLocation(n)) ||
              void 0 === r
                ? void 0
                : r.endTag) &&
              e._setEndLocation(n, t)
          }
        } else oc(e, t)
      }
      function oc(e, t) {
        ;(e.insertionMode = lo.IN_BODY), Mo(e, t)
      }
      function cc(e, t) {
        ;(e.insertionMode = lo.IN_BODY), Mo(e, t)
      }
      function lc(e) {
        for (
          ;
          e.treeAdapter.getNamespaceURI(e.openElements.current) !== ei.HTML &&
          !e._isIntegrationPoint(
            e.openElements.currentTagId,
            e.openElements.current
          );

        )
          e.openElements.pop()
      }
      const hc = new Map([
        [34, '&quot;'],
        [38, '&amp;'],
        [39, '&apos;'],
        [60, '&lt;'],
        [62, '&gt;'],
      ])
      function uc(e, t) {
        return function (r) {
          let n,
            s = 0,
            a = ''
          for (; (n = e.exec(r)); )
            s !== n.index && (a += r.substring(s, n.index)),
              (a += t.get(n[0].charCodeAt(0))),
              (s = n.index + 1)
          return a + r.substring(s)
        }
      }
      String.prototype.codePointAt, uc(/[&<>'"]/g, hc)
      const dc = uc(
          /["&\u00A0]/g,
          new Map([
            [34, '&quot;'],
            [38, '&amp;'],
            [160, '&nbsp;'],
          ])
        ),
        pc = uc(
          /[&<>\u00A0]/g,
          new Map([
            [38, '&amp;'],
            [60, '&lt;'],
            [62, '&gt;'],
            [160, '&nbsp;'],
          ])
        ),
        Ec = new Set([
          ni.AREA,
          ni.BASE,
          ni.BASEFONT,
          ni.BGSOUND,
          ni.BR,
          ni.COL,
          ni.EMBED,
          ni.FRAME,
          ni.HR,
          ni.IMG,
          ni.INPUT,
          ni.KEYGEN,
          ni.LINK,
          ni.META,
          ni.PARAM,
          ni.SOURCE,
          ni.TRACK,
          ni.WBR,
        ])
      const mc = { treeAdapter: qi, scriptingEnabled: !0 }
      function Tc(e, t) {
        return fc(e, { ...mc, ...t })
      }
      function fc(e, t) {
        return t.treeAdapter.isElementNode(e)
          ? (function (e, t) {
              const r = t.treeAdapter.getTagName(e)
              return `<${r}${(function (e, { treeAdapter: t }) {
                let r = ''
                for (const n of t.getAttrList(e)) {
                  if (((r += ' '), n.namespace))
                    switch (n.namespace) {
                      case ei.XML:
                        r += `xml:${n.name}`
                        break
                      case ei.XMLNS:
                        'xmlns' !== n.name && (r += 'xmlns:'), (r += n.name)
                        break
                      case ei.XLINK:
                        r += `xlink:${n.name}`
                        break
                      default:
                        r += `${n.prefix}:${n.name}`
                    }
                  else r += n.name
                  r += `="${dc(n.value)}"`
                }
                return r
              })(e, t)}>${
                (function (e, t) {
                  return (
                    t.treeAdapter.isElementNode(e) &&
                    t.treeAdapter.getNamespaceURI(e) === ei.HTML &&
                    Ec.has(t.treeAdapter.getTagName(e))
                  )
                })(e, t)
                  ? ''
                  : `${(function (e, t) {
                      let r = ''
                      const n =
                          t.treeAdapter.isElementNode(e) &&
                          t.treeAdapter.getTagName(e) === ni.TEMPLATE &&
                          t.treeAdapter.getNamespaceURI(e) === ei.HTML
                            ? t.treeAdapter.getTemplateContent(e)
                            : e,
                        s = t.treeAdapter.getChildNodes(n)
                      if (s) for (const e of s) r += fc(e, t)
                      return r
                    })(e, t)}</${r}>`
              }`
            })(e, t)
          : t.treeAdapter.isTextNode(e)
          ? (function (e, t) {
              const { treeAdapter: r } = t,
                n = r.getTextNodeContent(e),
                s = r.getParentNode(e),
                a = s && r.isElementNode(s) && r.getTagName(s)
              return a &&
                r.getNamespaceURI(s) === ei.HTML &&
                ((i = a),
                (o = t.scriptingEnabled),
                Ei.has(i) || (o && i === ni.NOSCRIPT))
                ? n
                : pc(n)
              var i, o
            })(e, t)
          : t.treeAdapter.isCommentNode(e)
          ? (function (e, { treeAdapter: t }) {
              return `\x3c!--${t.getCommentNodeContent(e)}--\x3e`
            })(e, t)
          : t.treeAdapter.isDocumentTypeNode(e)
          ? (function (e, { treeAdapter: t }) {
              return `<!DOCTYPE ${t.getDocumentTypeNodeName(e)}>`
            })(e, t)
          : ''
      }
      class Ac {
        constructor() {
          ;(this.parent = null),
            (this.prev = null),
            (this.next = null),
            (this.startIndex = null),
            (this.endIndex = null)
        }
        get parentNode() {
          return this.parent
        }
        set parentNode(e) {
          this.parent = e
        }
        get previousSibling() {
          return this.prev
        }
        set previousSibling(e) {
          this.prev = e
        }
        get nextSibling() {
          return this.next
        }
        set nextSibling(e) {
          this.next = e
        }
        cloneNode(e = !1) {
          return kc(this, e)
        }
      }
      class gc extends Ac {
        constructor(e) {
          super(), (this.data = e)
        }
        get nodeValue() {
          return this.data
        }
        set nodeValue(e) {
          this.data = e
        }
      }
      class _c extends gc {
        constructor() {
          super(...arguments), (this.type = A.Text)
        }
        get nodeType() {
          return 3
        }
      }
      class Nc extends gc {
        constructor() {
          super(...arguments), (this.type = A.Comment)
        }
        get nodeType() {
          return 8
        }
      }
      class Cc extends gc {
        constructor(e, t) {
          super(t), (this.name = e), (this.type = A.Directive)
        }
        get nodeType() {
          return 1
        }
      }
      class Ic extends Ac {
        constructor(e) {
          super(), (this.children = e)
        }
        get firstChild() {
          var e
          return null !== (e = this.children[0]) && void 0 !== e ? e : null
        }
        get lastChild() {
          return this.children.length > 0
            ? this.children[this.children.length - 1]
            : null
        }
        get childNodes() {
          return this.children
        }
        set childNodes(e) {
          this.children = e
        }
      }
      class bc extends Ic {
        constructor() {
          super(...arguments), (this.type = A.CDATA)
        }
        get nodeType() {
          return 4
        }
      }
      class Sc extends Ic {
        constructor() {
          super(...arguments), (this.type = A.Root)
        }
        get nodeType() {
          return 9
        }
      }
      class Dc extends Ic {
        constructor(
          e,
          t,
          r = [],
          n = 'script' === e ? A.Script : 'style' === e ? A.Style : A.Tag
        ) {
          super(r), (this.name = e), (this.attribs = t), (this.type = n)
        }
        get nodeType() {
          return 1
        }
        get tagName() {
          return this.name
        }
        set tagName(e) {
          this.name = e
        }
        get attributes() {
          return Object.keys(this.attribs).map((e) => {
            var t, r
            return {
              name: e,
              value: this.attribs[e],
              namespace:
                null === (t = this['x-attribsNamespace']) || void 0 === t
                  ? void 0
                  : t[e],
              prefix:
                null === (r = this['x-attribsPrefix']) || void 0 === r
                  ? void 0
                  : r[e],
            }
          })
        }
      }
      function Rc(e) {
        return _(e)
      }
      function Lc(e) {
        return e.type === A.Text
      }
      function Oc(e) {
        return e.type === A.Comment
      }
      function yc(e) {
        return e.type === A.Directive
      }
      function kc(e, t = !1) {
        let r
        if (Lc(e)) r = new _c(e.data)
        else if (Oc(e)) r = new Nc(e.data)
        else if (Rc(e)) {
          const n = t ? Mc(e.children) : [],
            s = new Dc(e.name, { ...e.attribs }, n)
          n.forEach((e) => (e.parent = s)),
            null != e.namespace && (s.namespace = e.namespace),
            e['x-attribsNamespace'] &&
              (s['x-attribsNamespace'] = { ...e['x-attribsNamespace'] }),
            e['x-attribsPrefix'] &&
              (s['x-attribsPrefix'] = { ...e['x-attribsPrefix'] }),
            (r = s)
        } else if (
          (function (e) {
            return e.type === A.CDATA
          })(e)
        ) {
          const n = t ? Mc(e.children) : [],
            s = new bc(n)
          n.forEach((e) => (e.parent = s)), (r = s)
        } else if (
          (function (e) {
            return e.type === A.Root
          })(e)
        ) {
          const n = t ? Mc(e.children) : [],
            s = new Sc(n)
          n.forEach((e) => (e.parent = s)),
            e['x-mode'] && (s['x-mode'] = e['x-mode']),
            (r = s)
        } else {
          if (!yc(e)) throw new Error(`Not implemented yet: ${e.type}`)
          {
            const t = new Cc(e.name, e.data)
            null != e['x-name'] &&
              ((t['x-name'] = e['x-name']),
              (t['x-publicId'] = e['x-publicId']),
              (t['x-systemId'] = e['x-systemId'])),
              (r = t)
          }
        }
        return (
          (r.startIndex = e.startIndex),
          (r.endIndex = e.endIndex),
          null != e.sourceCodeLocation &&
            (r.sourceCodeLocation = e.sourceCodeLocation),
          r
        )
      }
      function Mc(e) {
        const t = e.map((e) => kc(e, !0))
        for (let e = 1; e < t.length; e++)
          (t[e].prev = t[e - 1]), (t[e - 1].next = t[e])
        return t
      }
      function Pc(e) {
        return new _c(e)
      }
      function vc(e) {
        const t = e.includes('"') ? "'" : '"'
        return t + e + t
      }
      const wc = {
        isCommentNode: Oc,
        isElementNode: Rc,
        isTextNode: Lc,
        createDocument() {
          const e = new Sc([])
          return (e['x-mode'] = ri.NO_QUIRKS), e
        },
        createDocumentFragment: () => new Sc([]),
        createElement(e, t, r) {
          const n = Object.create(null),
            s = Object.create(null),
            a = Object.create(null)
          for (let e = 0; e < r.length; e++) {
            const t = r[e].name
            ;(n[t] = r[e].value), (s[t] = r[e].namespace), (a[t] = r[e].prefix)
          }
          const i = new Dc(e, n, [])
          return (
            (i.namespace = t),
            (i['x-attribsNamespace'] = s),
            (i['x-attribsPrefix'] = a),
            i
          )
        },
        createCommentNode: (e) => new Nc(e),
        appendChild(e, t) {
          const r = e.children[e.children.length - 1]
          r && ((r.next = t), (t.prev = r)), e.children.push(t), (t.parent = e)
        },
        insertBefore(e, t, r) {
          const n = e.children.indexOf(r),
            { prev: s } = r
          s && ((s.next = t), (t.prev = s)),
            (r.prev = t),
            (t.next = r),
            e.children.splice(n, 0, t),
            (t.parent = e)
        },
        setTemplateContent(e, t) {
          wc.appendChild(e, t)
        },
        getTemplateContent: (e) => e.children[0],
        setDocumentType(e, t, r, n) {
          const s = (function (e, t, r) {
            let n = '!DOCTYPE '
            return (
              e && (n += e),
              t ? (n += ` PUBLIC ${vc(t)}`) : r && (n += ' SYSTEM'),
              r && (n += ` ${vc(r)}`),
              n
            )
          })(t, r, n)
          let a = e.children.find((e) => yc(e) && '!doctype' === e.name)
          a
            ? (a.data = null != s ? s : null)
            : ((a = new Cc('!doctype', s)), wc.appendChild(e, a)),
            (a['x-name'] = null != t ? t : void 0),
            (a['x-publicId'] = null != r ? r : void 0),
            (a['x-systemId'] = null != n ? n : void 0)
        },
        setDocumentMode(e, t) {
          e['x-mode'] = t
        },
        getDocumentMode: (e) => e['x-mode'],
        detachNode(e) {
          if (e.parent) {
            const t = e.parent.children.indexOf(e),
              { prev: r, next: n } = e
            ;(e.prev = null),
              (e.next = null),
              r && (r.next = n),
              n && (n.prev = r),
              e.parent.children.splice(t, 1),
              (e.parent = null)
          }
        },
        insertText(e, t) {
          const r = e.children[e.children.length - 1]
          r && Lc(r) ? (r.data += t) : wc.appendChild(e, Pc(t))
        },
        insertTextBefore(e, t, r) {
          const n = e.children[e.children.indexOf(r) - 1]
          n && Lc(n) ? (n.data += t) : wc.insertBefore(e, Pc(t), r)
        },
        adoptAttributes(e, t) {
          for (let r = 0; r < t.length; r++) {
            const n = t[r].name
            void 0 === e.attribs[n] &&
              ((e.attribs[n] = t[r].value),
              (e['x-attribsNamespace'][n] = t[r].namespace),
              (e['x-attribsPrefix'][n] = t[r].prefix))
          }
        },
        getFirstChild: (e) => e.children[0],
        getChildNodes: (e) => e.children,
        getParentNode: (e) => e.parent,
        getAttrList: (e) => e.attributes,
        getTagName: (e) => e.name,
        getNamespaceURI: (e) => e.namespace,
        getTextNodeContent: (e) => e.data,
        getCommentNodeContent: (e) => e.data,
        getDocumentTypeNodeName(e) {
          var t
          return null !== (t = e['x-name']) && void 0 !== t ? t : ''
        },
        getDocumentTypeNodePublicId(e) {
          var t
          return null !== (t = e['x-publicId']) && void 0 !== t ? t : ''
        },
        getDocumentTypeNodeSystemId(e) {
          var t
          return null !== (t = e['x-systemId']) && void 0 !== t ? t : ''
        },
        isDocumentTypeNode: (e) => yc(e) && '!doctype' === e.name,
        setNodeSourceCodeLocation(e, t) {
          t && ((e.startIndex = t.startOffset), (e.endIndex = t.endOffset)),
            (e.sourceCodeLocation = t)
        },
        getNodeSourceCodeLocation: (e) => e.sourceCodeLocation,
        updateNodeSourceCodeLocation(e, t) {
          null != t.endOffset && (e.endIndex = t.endOffset),
            (e.sourceCodeLocation = { ...e.sourceCodeLocation, ...t })
        },
      }
      const xc = { treeAdapter: wc }
      var Bc, Uc, Hc
      function Fc(e) {
        return (
          e === Bc.Space ||
          e === Bc.NewLine ||
          e === Bc.Tab ||
          e === Bc.FormFeed ||
          e === Bc.CarriageReturn
        )
      }
      function qc(e) {
        return e === Bc.Slash || e === Bc.Gt || Fc(e)
      }
      function Gc(e) {
        return e >= Bc.Zero && e <= Bc.Nine
      }
      !(function (e) {
        ;(e[(e.Tab = 9)] = 'Tab'),
          (e[(e.NewLine = 10)] = 'NewLine'),
          (e[(e.FormFeed = 12)] = 'FormFeed'),
          (e[(e.CarriageReturn = 13)] = 'CarriageReturn'),
          (e[(e.Space = 32)] = 'Space'),
          (e[(e.ExclamationMark = 33)] = 'ExclamationMark'),
          (e[(e.Number = 35)] = 'Number'),
          (e[(e.Amp = 38)] = 'Amp'),
          (e[(e.SingleQuote = 39)] = 'SingleQuote'),
          (e[(e.DoubleQuote = 34)] = 'DoubleQuote'),
          (e[(e.Dash = 45)] = 'Dash'),
          (e[(e.Slash = 47)] = 'Slash'),
          (e[(e.Zero = 48)] = 'Zero'),
          (e[(e.Nine = 57)] = 'Nine'),
          (e[(e.Semi = 59)] = 'Semi'),
          (e[(e.Lt = 60)] = 'Lt'),
          (e[(e.Eq = 61)] = 'Eq'),
          (e[(e.Gt = 62)] = 'Gt'),
          (e[(e.Questionmark = 63)] = 'Questionmark'),
          (e[(e.UpperA = 65)] = 'UpperA'),
          (e[(e.LowerA = 97)] = 'LowerA'),
          (e[(e.UpperF = 70)] = 'UpperF'),
          (e[(e.LowerF = 102)] = 'LowerF'),
          (e[(e.UpperZ = 90)] = 'UpperZ'),
          (e[(e.LowerZ = 122)] = 'LowerZ'),
          (e[(e.LowerX = 120)] = 'LowerX'),
          (e[(e.OpeningSquareBracket = 91)] = 'OpeningSquareBracket')
      })(Bc || (Bc = {})),
        (function (e) {
          ;(e[(e.Text = 1)] = 'Text'),
            (e[(e.BeforeTagName = 2)] = 'BeforeTagName'),
            (e[(e.InTagName = 3)] = 'InTagName'),
            (e[(e.InSelfClosingTag = 4)] = 'InSelfClosingTag'),
            (e[(e.BeforeClosingTagName = 5)] = 'BeforeClosingTagName'),
            (e[(e.InClosingTagName = 6)] = 'InClosingTagName'),
            (e[(e.AfterClosingTagName = 7)] = 'AfterClosingTagName'),
            (e[(e.BeforeAttributeName = 8)] = 'BeforeAttributeName'),
            (e[(e.InAttributeName = 9)] = 'InAttributeName'),
            (e[(e.AfterAttributeName = 10)] = 'AfterAttributeName'),
            (e[(e.BeforeAttributeValue = 11)] = 'BeforeAttributeValue'),
            (e[(e.InAttributeValueDq = 12)] = 'InAttributeValueDq'),
            (e[(e.InAttributeValueSq = 13)] = 'InAttributeValueSq'),
            (e[(e.InAttributeValueNq = 14)] = 'InAttributeValueNq'),
            (e[(e.BeforeDeclaration = 15)] = 'BeforeDeclaration'),
            (e[(e.InDeclaration = 16)] = 'InDeclaration'),
            (e[(e.InProcessingInstruction = 17)] = 'InProcessingInstruction'),
            (e[(e.BeforeComment = 18)] = 'BeforeComment'),
            (e[(e.CDATASequence = 19)] = 'CDATASequence'),
            (e[(e.InSpecialComment = 20)] = 'InSpecialComment'),
            (e[(e.InCommentLike = 21)] = 'InCommentLike'),
            (e[(e.BeforeSpecialS = 22)] = 'BeforeSpecialS'),
            (e[(e.SpecialStartSequence = 23)] = 'SpecialStartSequence'),
            (e[(e.InSpecialTag = 24)] = 'InSpecialTag'),
            (e[(e.BeforeEntity = 25)] = 'BeforeEntity'),
            (e[(e.BeforeNumericEntity = 26)] = 'BeforeNumericEntity'),
            (e[(e.InNamedEntity = 27)] = 'InNamedEntity'),
            (e[(e.InNumericEntity = 28)] = 'InNumericEntity'),
            (e[(e.InHexEntity = 29)] = 'InHexEntity')
        })(Uc || (Uc = {})),
        (function (e) {
          ;(e[(e.NoValue = 0)] = 'NoValue'),
            (e[(e.Unquoted = 1)] = 'Unquoted'),
            (e[(e.Single = 2)] = 'Single'),
            (e[(e.Double = 3)] = 'Double')
        })(Hc || (Hc = {}))
      const Vc = {
        Cdata: new Uint8Array([67, 68, 65, 84, 65, 91]),
        CdataEnd: new Uint8Array([93, 93, 62]),
        CommentEnd: new Uint8Array([45, 45, 62]),
        ScriptEnd: new Uint8Array([60, 47, 115, 99, 114, 105, 112, 116]),
        StyleEnd: new Uint8Array([60, 47, 115, 116, 121, 108, 101]),
        TitleEnd: new Uint8Array([60, 47, 116, 105, 116, 108, 101]),
      }
      class Yc {
        constructor({ xmlMode: e = !1, decodeEntities: t = !0 }, r) {
          ;(this.cbs = r),
            (this.state = Uc.Text),
            (this.buffer = ''),
            (this.sectionStart = 0),
            (this.index = 0),
            (this.baseState = Uc.Text),
            (this.isSpecial = !1),
            (this.running = !0),
            (this.offset = 0),
            (this.currentSequence = void 0),
            (this.sequenceIndex = 0),
            (this.trieIndex = 0),
            (this.trieCurrent = 0),
            (this.entityResult = 0),
            (this.entityExcess = 0),
            (this.xmlMode = e),
            (this.decodeEntities = t),
            (this.entityTrie = e ? z : K)
        }
        reset() {
          ;(this.state = Uc.Text),
            (this.buffer = ''),
            (this.sectionStart = 0),
            (this.index = 0),
            (this.baseState = Uc.Text),
            (this.currentSequence = void 0),
            (this.running = !0),
            (this.offset = 0)
        }
        write(e) {
          ;(this.offset += this.buffer.length), (this.buffer = e), this.parse()
        }
        end() {
          this.running && this.finish()
        }
        pause() {
          this.running = !1
        }
        resume() {
          ;(this.running = !0),
            this.index < this.buffer.length + this.offset && this.parse()
        }
        getIndex() {
          return this.index
        }
        getSectionStart() {
          return this.sectionStart
        }
        stateText(e) {
          e === Bc.Lt || (!this.decodeEntities && this.fastForwardTo(Bc.Lt))
            ? (this.index > this.sectionStart &&
                this.cbs.ontext(this.sectionStart, this.index),
              (this.state = Uc.BeforeTagName),
              (this.sectionStart = this.index))
            : this.decodeEntities &&
              e === Bc.Amp &&
              (this.state = Uc.BeforeEntity)
        }
        stateSpecialStartSequence(e) {
          const t = this.sequenceIndex === this.currentSequence.length
          if (
            t ? qc(e) : (32 | e) === this.currentSequence[this.sequenceIndex]
          ) {
            if (!t) return void this.sequenceIndex++
          } else this.isSpecial = !1
          ;(this.sequenceIndex = 0),
            (this.state = Uc.InTagName),
            this.stateInTagName(e)
        }
        stateInSpecialTag(e) {
          if (this.sequenceIndex === this.currentSequence.length) {
            if (e === Bc.Gt || Fc(e)) {
              const t = this.index - this.currentSequence.length
              if (this.sectionStart < t) {
                const e = this.index
                ;(this.index = t),
                  this.cbs.ontext(this.sectionStart, t),
                  (this.index = e)
              }
              return (
                (this.isSpecial = !1),
                (this.sectionStart = t + 2),
                void this.stateInClosingTagName(e)
              )
            }
            this.sequenceIndex = 0
          }
          ;(32 | e) === this.currentSequence[this.sequenceIndex]
            ? (this.sequenceIndex += 1)
            : 0 === this.sequenceIndex
            ? this.currentSequence === Vc.TitleEnd
              ? this.decodeEntities &&
                e === Bc.Amp &&
                (this.state = Uc.BeforeEntity)
              : this.fastForwardTo(Bc.Lt) && (this.sequenceIndex = 1)
            : (this.sequenceIndex = Number(e === Bc.Lt))
        }
        stateCDATASequence(e) {
          e === Vc.Cdata[this.sequenceIndex]
            ? ++this.sequenceIndex === Vc.Cdata.length &&
              ((this.state = Uc.InCommentLike),
              (this.currentSequence = Vc.CdataEnd),
              (this.sequenceIndex = 0),
              (this.sectionStart = this.index + 1))
            : ((this.sequenceIndex = 0),
              (this.state = Uc.InDeclaration),
              this.stateInDeclaration(e))
        }
        fastForwardTo(e) {
          for (; ++this.index < this.buffer.length + this.offset; )
            if (this.buffer.charCodeAt(this.index - this.offset) === e)
              return !0
          return (this.index = this.buffer.length + this.offset - 1), !1
        }
        stateInCommentLike(e) {
          e === this.currentSequence[this.sequenceIndex]
            ? ++this.sequenceIndex === this.currentSequence.length &&
              (this.currentSequence === Vc.CdataEnd
                ? this.cbs.oncdata(this.sectionStart, this.index, 2)
                : this.cbs.oncomment(this.sectionStart, this.index, 2),
              (this.sequenceIndex = 0),
              (this.sectionStart = this.index + 1),
              (this.state = Uc.Text))
            : 0 === this.sequenceIndex
            ? this.fastForwardTo(this.currentSequence[0]) &&
              (this.sequenceIndex = 1)
            : e !== this.currentSequence[this.sequenceIndex - 1] &&
              (this.sequenceIndex = 0)
        }
        isTagStartChar(e) {
          return this.xmlMode
            ? !qc(e)
            : (function (e) {
                return (
                  (e >= Bc.LowerA && e <= Bc.LowerZ) ||
                  (e >= Bc.UpperA && e <= Bc.UpperZ)
                )
              })(e)
        }
        startSpecial(e, t) {
          ;(this.isSpecial = !0),
            (this.currentSequence = e),
            (this.sequenceIndex = t),
            (this.state = Uc.SpecialStartSequence)
        }
        stateBeforeTagName(e) {
          if (e === Bc.ExclamationMark)
            (this.state = Uc.BeforeDeclaration),
              (this.sectionStart = this.index + 1)
          else if (e === Bc.Questionmark)
            (this.state = Uc.InProcessingInstruction),
              (this.sectionStart = this.index + 1)
          else if (this.isTagStartChar(e)) {
            const t = 32 | e
            ;(this.sectionStart = this.index),
              this.xmlMode || t !== Vc.TitleEnd[2]
                ? (this.state =
                    this.xmlMode || t !== Vc.ScriptEnd[2]
                      ? Uc.InTagName
                      : Uc.BeforeSpecialS)
                : this.startSpecial(Vc.TitleEnd, 3)
          } else
            e === Bc.Slash
              ? (this.state = Uc.BeforeClosingTagName)
              : ((this.state = Uc.Text), this.stateText(e))
        }
        stateInTagName(e) {
          qc(e) &&
            (this.cbs.onopentagname(this.sectionStart, this.index),
            (this.sectionStart = -1),
            (this.state = Uc.BeforeAttributeName),
            this.stateBeforeAttributeName(e))
        }
        stateBeforeClosingTagName(e) {
          Fc(e) ||
            (e === Bc.Gt
              ? (this.state = Uc.Text)
              : ((this.state = this.isTagStartChar(e)
                  ? Uc.InClosingTagName
                  : Uc.InSpecialComment),
                (this.sectionStart = this.index)))
        }
        stateInClosingTagName(e) {
          ;(e === Bc.Gt || Fc(e)) &&
            (this.cbs.onclosetag(this.sectionStart, this.index),
            (this.sectionStart = -1),
            (this.state = Uc.AfterClosingTagName),
            this.stateAfterClosingTagName(e))
        }
        stateAfterClosingTagName(e) {
          ;(e === Bc.Gt || this.fastForwardTo(Bc.Gt)) &&
            ((this.state = Uc.Text),
            (this.baseState = Uc.Text),
            (this.sectionStart = this.index + 1))
        }
        stateBeforeAttributeName(e) {
          e === Bc.Gt
            ? (this.cbs.onopentagend(this.index),
              this.isSpecial
                ? ((this.state = Uc.InSpecialTag), (this.sequenceIndex = 0))
                : (this.state = Uc.Text),
              (this.baseState = this.state),
              (this.sectionStart = this.index + 1))
            : e === Bc.Slash
            ? (this.state = Uc.InSelfClosingTag)
            : Fc(e) ||
              ((this.state = Uc.InAttributeName),
              (this.sectionStart = this.index))
        }
        stateInSelfClosingTag(e) {
          e === Bc.Gt
            ? (this.cbs.onselfclosingtag(this.index),
              (this.state = Uc.Text),
              (this.baseState = Uc.Text),
              (this.sectionStart = this.index + 1),
              (this.isSpecial = !1))
            : Fc(e) ||
              ((this.state = Uc.BeforeAttributeName),
              this.stateBeforeAttributeName(e))
        }
        stateInAttributeName(e) {
          ;(e === Bc.Eq || qc(e)) &&
            (this.cbs.onattribname(this.sectionStart, this.index),
            (this.sectionStart = -1),
            (this.state = Uc.AfterAttributeName),
            this.stateAfterAttributeName(e))
        }
        stateAfterAttributeName(e) {
          e === Bc.Eq
            ? (this.state = Uc.BeforeAttributeValue)
            : e === Bc.Slash || e === Bc.Gt
            ? (this.cbs.onattribend(Hc.NoValue, this.index),
              (this.state = Uc.BeforeAttributeName),
              this.stateBeforeAttributeName(e))
            : Fc(e) ||
              (this.cbs.onattribend(Hc.NoValue, this.index),
              (this.state = Uc.InAttributeName),
              (this.sectionStart = this.index))
        }
        stateBeforeAttributeValue(e) {
          e === Bc.DoubleQuote
            ? ((this.state = Uc.InAttributeValueDq),
              (this.sectionStart = this.index + 1))
            : e === Bc.SingleQuote
            ? ((this.state = Uc.InAttributeValueSq),
              (this.sectionStart = this.index + 1))
            : Fc(e) ||
              ((this.sectionStart = this.index),
              (this.state = Uc.InAttributeValueNq),
              this.stateInAttributeValueNoQuotes(e))
        }
        handleInAttributeValue(e, t) {
          e === t || (!this.decodeEntities && this.fastForwardTo(t))
            ? (this.cbs.onattribdata(this.sectionStart, this.index),
              (this.sectionStart = -1),
              this.cbs.onattribend(
                t === Bc.DoubleQuote ? Hc.Double : Hc.Single,
                this.index
              ),
              (this.state = Uc.BeforeAttributeName))
            : this.decodeEntities &&
              e === Bc.Amp &&
              ((this.baseState = this.state), (this.state = Uc.BeforeEntity))
        }
        stateInAttributeValueDoubleQuotes(e) {
          this.handleInAttributeValue(e, Bc.DoubleQuote)
        }
        stateInAttributeValueSingleQuotes(e) {
          this.handleInAttributeValue(e, Bc.SingleQuote)
        }
        stateInAttributeValueNoQuotes(e) {
          Fc(e) || e === Bc.Gt
            ? (this.cbs.onattribdata(this.sectionStart, this.index),
              (this.sectionStart = -1),
              this.cbs.onattribend(Hc.Unquoted, this.index),
              (this.state = Uc.BeforeAttributeName),
              this.stateBeforeAttributeName(e))
            : this.decodeEntities &&
              e === Bc.Amp &&
              ((this.baseState = this.state), (this.state = Uc.BeforeEntity))
        }
        stateBeforeDeclaration(e) {
          e === Bc.OpeningSquareBracket
            ? ((this.state = Uc.CDATASequence), (this.sequenceIndex = 0))
            : (this.state = e === Bc.Dash ? Uc.BeforeComment : Uc.InDeclaration)
        }
        stateInDeclaration(e) {
          ;(e === Bc.Gt || this.fastForwardTo(Bc.Gt)) &&
            (this.cbs.ondeclaration(this.sectionStart, this.index),
            (this.state = Uc.Text),
            (this.sectionStart = this.index + 1))
        }
        stateInProcessingInstruction(e) {
          ;(e === Bc.Gt || this.fastForwardTo(Bc.Gt)) &&
            (this.cbs.onprocessinginstruction(this.sectionStart, this.index),
            (this.state = Uc.Text),
            (this.sectionStart = this.index + 1))
        }
        stateBeforeComment(e) {
          e === Bc.Dash
            ? ((this.state = Uc.InCommentLike),
              (this.currentSequence = Vc.CommentEnd),
              (this.sequenceIndex = 2),
              (this.sectionStart = this.index + 1))
            : (this.state = Uc.InDeclaration)
        }
        stateInSpecialComment(e) {
          ;(e === Bc.Gt || this.fastForwardTo(Bc.Gt)) &&
            (this.cbs.oncomment(this.sectionStart, this.index, 0),
            (this.state = Uc.Text),
            (this.sectionStart = this.index + 1))
        }
        stateBeforeSpecialS(e) {
          const t = 32 | e
          t === Vc.ScriptEnd[3]
            ? this.startSpecial(Vc.ScriptEnd, 4)
            : t === Vc.StyleEnd[3]
            ? this.startSpecial(Vc.StyleEnd, 4)
            : ((this.state = Uc.InTagName), this.stateInTagName(e))
        }
        stateBeforeEntity(e) {
          ;(this.entityExcess = 1),
            (this.entityResult = 0),
            e === Bc.Number
              ? (this.state = Uc.BeforeNumericEntity)
              : e === Bc.Amp ||
                ((this.trieIndex = 0),
                (this.trieCurrent = this.entityTrie[0]),
                (this.state = Uc.InNamedEntity),
                this.stateInNamedEntity(e))
        }
        stateInNamedEntity(e) {
          if (
            ((this.entityExcess += 1),
            (this.trieIndex = le(
              this.entityTrie,
              this.trieCurrent,
              this.trieIndex + 1,
              e
            )),
            this.trieIndex < 0)
          )
            return this.emitNamedEntity(), void this.index--
          this.trieCurrent = this.entityTrie[this.trieIndex]
          const t = this.trieCurrent & re.VALUE_LENGTH
          if (t) {
            const r = (t >> 14) - 1
            if (this.allowLegacyEntity() || e === Bc.Semi) {
              const e = this.index - this.entityExcess + 1
              e > this.sectionStart && this.emitPartial(this.sectionStart, e),
                (this.entityResult = this.trieIndex),
                (this.trieIndex += r),
                (this.entityExcess = 0),
                (this.sectionStart = this.index + 1),
                0 === r && this.emitNamedEntity()
            } else this.trieIndex += r
          }
        }
        emitNamedEntity() {
          if (((this.state = this.baseState), 0 !== this.entityResult))
            switch (
              (this.entityTrie[this.entityResult] & re.VALUE_LENGTH) >>
              14
            ) {
              case 1:
                this.emitCodePoint(
                  this.entityTrie[this.entityResult] & ~re.VALUE_LENGTH
                )
                break
              case 2:
                this.emitCodePoint(this.entityTrie[this.entityResult + 1])
                break
              case 3:
                this.emitCodePoint(this.entityTrie[this.entityResult + 1]),
                  this.emitCodePoint(this.entityTrie[this.entityResult + 2])
            }
        }
        stateBeforeNumericEntity(e) {
          ;(32 | e) === Bc.LowerX
            ? (this.entityExcess++, (this.state = Uc.InHexEntity))
            : ((this.state = Uc.InNumericEntity), this.stateInNumericEntity(e))
        }
        emitNumericEntity(e) {
          const t = this.index - this.entityExcess - 1
          t + 2 + Number(this.state === Uc.InHexEntity) !== this.index &&
            (t > this.sectionStart && this.emitPartial(this.sectionStart, t),
            (this.sectionStart = this.index + Number(e)),
            this.emitCodePoint(ee(this.entityResult))),
            (this.state = this.baseState)
        }
        stateInNumericEntity(e) {
          e === Bc.Semi
            ? this.emitNumericEntity(!0)
            : Gc(e)
            ? ((this.entityResult = 10 * this.entityResult + (e - Bc.Zero)),
              this.entityExcess++)
            : (this.allowLegacyEntity()
                ? this.emitNumericEntity(!1)
                : (this.state = this.baseState),
              this.index--)
        }
        stateInHexEntity(e) {
          e === Bc.Semi
            ? this.emitNumericEntity(!0)
            : Gc(e)
            ? ((this.entityResult = 16 * this.entityResult + (e - Bc.Zero)),
              this.entityExcess++)
            : (function (e) {
                return (
                  (e >= Bc.UpperA && e <= Bc.UpperF) ||
                  (e >= Bc.LowerA && e <= Bc.LowerF)
                )
              })(e)
            ? ((this.entityResult =
                16 * this.entityResult + ((32 | e) - Bc.LowerA + 10)),
              this.entityExcess++)
            : (this.allowLegacyEntity()
                ? this.emitNumericEntity(!1)
                : (this.state = this.baseState),
              this.index--)
        }
        allowLegacyEntity() {
          return (
            !this.xmlMode &&
            (this.baseState === Uc.Text || this.baseState === Uc.InSpecialTag)
          )
        }
        cleanup() {
          this.running &&
            this.sectionStart !== this.index &&
            (this.state === Uc.Text ||
            (this.state === Uc.InSpecialTag && 0 === this.sequenceIndex)
              ? (this.cbs.ontext(this.sectionStart, this.index),
                (this.sectionStart = this.index))
              : (this.state !== Uc.InAttributeValueDq &&
                  this.state !== Uc.InAttributeValueSq &&
                  this.state !== Uc.InAttributeValueNq) ||
                (this.cbs.onattribdata(this.sectionStart, this.index),
                (this.sectionStart = this.index)))
        }
        shouldContinue() {
          return this.index < this.buffer.length + this.offset && this.running
        }
        parse() {
          for (; this.shouldContinue(); ) {
            const e = this.buffer.charCodeAt(this.index - this.offset)
            switch (this.state) {
              case Uc.Text:
                this.stateText(e)
                break
              case Uc.SpecialStartSequence:
                this.stateSpecialStartSequence(e)
                break
              case Uc.InSpecialTag:
                this.stateInSpecialTag(e)
                break
              case Uc.CDATASequence:
                this.stateCDATASequence(e)
                break
              case Uc.InAttributeValueDq:
                this.stateInAttributeValueDoubleQuotes(e)
                break
              case Uc.InAttributeName:
                this.stateInAttributeName(e)
                break
              case Uc.InCommentLike:
                this.stateInCommentLike(e)
                break
              case Uc.InSpecialComment:
                this.stateInSpecialComment(e)
                break
              case Uc.BeforeAttributeName:
                this.stateBeforeAttributeName(e)
                break
              case Uc.InTagName:
                this.stateInTagName(e)
                break
              case Uc.InClosingTagName:
                this.stateInClosingTagName(e)
                break
              case Uc.BeforeTagName:
                this.stateBeforeTagName(e)
                break
              case Uc.AfterAttributeName:
                this.stateAfterAttributeName(e)
                break
              case Uc.InAttributeValueSq:
                this.stateInAttributeValueSingleQuotes(e)
                break
              case Uc.BeforeAttributeValue:
                this.stateBeforeAttributeValue(e)
                break
              case Uc.BeforeClosingTagName:
                this.stateBeforeClosingTagName(e)
                break
              case Uc.AfterClosingTagName:
                this.stateAfterClosingTagName(e)
                break
              case Uc.BeforeSpecialS:
                this.stateBeforeSpecialS(e)
                break
              case Uc.InAttributeValueNq:
                this.stateInAttributeValueNoQuotes(e)
                break
              case Uc.InSelfClosingTag:
                this.stateInSelfClosingTag(e)
                break
              case Uc.InDeclaration:
                this.stateInDeclaration(e)
                break
              case Uc.BeforeDeclaration:
                this.stateBeforeDeclaration(e)
                break
              case Uc.BeforeComment:
                this.stateBeforeComment(e)
                break
              case Uc.InProcessingInstruction:
                this.stateInProcessingInstruction(e)
                break
              case Uc.InNamedEntity:
                this.stateInNamedEntity(e)
                break
              case Uc.BeforeEntity:
                this.stateBeforeEntity(e)
                break
              case Uc.InHexEntity:
                this.stateInHexEntity(e)
                break
              case Uc.InNumericEntity:
                this.stateInNumericEntity(e)
                break
              default:
                this.stateBeforeNumericEntity(e)
            }
            this.index++
          }
          this.cleanup()
        }
        finish() {
          this.state === Uc.InNamedEntity && this.emitNamedEntity(),
            this.sectionStart < this.index && this.handleTrailingData(),
            this.cbs.onend()
        }
        handleTrailingData() {
          const e = this.buffer.length + this.offset
          this.state === Uc.InCommentLike
            ? this.currentSequence === Vc.CdataEnd
              ? this.cbs.oncdata(this.sectionStart, e, 0)
              : this.cbs.oncomment(this.sectionStart, e, 0)
            : (this.state === Uc.InNumericEntity && this.allowLegacyEntity()) ||
              (this.state === Uc.InHexEntity && this.allowLegacyEntity())
            ? this.emitNumericEntity(!1)
            : this.state === Uc.InTagName ||
              this.state === Uc.BeforeAttributeName ||
              this.state === Uc.BeforeAttributeValue ||
              this.state === Uc.AfterAttributeName ||
              this.state === Uc.InAttributeName ||
              this.state === Uc.InAttributeValueSq ||
              this.state === Uc.InAttributeValueDq ||
              this.state === Uc.InAttributeValueNq ||
              this.state === Uc.InClosingTagName ||
              this.cbs.ontext(this.sectionStart, e)
        }
        emitPartial(e, t) {
          this.baseState !== Uc.Text && this.baseState !== Uc.InSpecialTag
            ? this.cbs.onattribdata(e, t)
            : this.cbs.ontext(e, t)
        }
        emitCodePoint(e) {
          this.baseState !== Uc.Text && this.baseState !== Uc.InSpecialTag
            ? this.cbs.onattribentity(e)
            : this.cbs.ontextentity(e)
        }
      }
      const Qc = new Set([
          'input',
          'option',
          'optgroup',
          'select',
          'button',
          'datalist',
          'textarea',
        ]),
        Wc = new Set(['p']),
        Xc = new Set(['thead', 'tbody']),
        jc = new Set(['dd', 'dt']),
        Kc = new Set(['rt', 'rp']),
        zc = new Map([
          ['tr', new Set(['tr', 'th', 'td'])],
          ['th', new Set(['th'])],
          ['td', new Set(['thead', 'th', 'td'])],
          ['body', new Set(['head', 'link', 'script'])],
          ['li', new Set(['li'])],
          ['p', Wc],
          ['h1', Wc],
          ['h2', Wc],
          ['h3', Wc],
          ['h4', Wc],
          ['h5', Wc],
          ['h6', Wc],
          ['select', Qc],
          ['input', Qc],
          ['output', Qc],
          ['button', Qc],
          ['datalist', Qc],
          ['textarea', Qc],
          ['option', new Set(['option'])],
          ['optgroup', new Set(['optgroup', 'option'])],
          ['dd', jc],
          ['dt', jc],
          ['address', Wc],
          ['article', Wc],
          ['aside', Wc],
          ['blockquote', Wc],
          ['details', Wc],
          ['div', Wc],
          ['dl', Wc],
          ['fieldset', Wc],
          ['figcaption', Wc],
          ['figure', Wc],
          ['footer', Wc],
          ['form', Wc],
          ['header', Wc],
          ['hr', Wc],
          ['main', Wc],
          ['nav', Wc],
          ['ol', Wc],
          ['pre', Wc],
          ['section', Wc],
          ['table', Wc],
          ['ul', Wc],
          ['rt', Kc],
          ['rp', Kc],
          ['tbody', Xc],
          ['tfoot', Xc],
        ]),
        $c = new Set([
          'area',
          'base',
          'basefont',
          'br',
          'col',
          'command',
          'embed',
          'frame',
          'hr',
          'img',
          'input',
          'isindex',
          'keygen',
          'link',
          'meta',
          'param',
          'source',
          'track',
          'wbr',
        ]),
        Zc = new Set(['math', 'svg']),
        Jc = new Set([
          'mi',
          'mo',
          'mn',
          'ms',
          'mtext',
          'annotation-xml',
          'foreignobject',
          'desc',
          'title',
        ]),
        el = /\s|\//
      class tl {
        constructor(e, t = {}) {
          var r, n, s, a, i
          ;(this.options = t),
            (this.startIndex = 0),
            (this.endIndex = 0),
            (this.openTagStart = 0),
            (this.tagname = ''),
            (this.attribname = ''),
            (this.attribvalue = ''),
            (this.attribs = null),
            (this.stack = []),
            (this.foreignContext = []),
            (this.buffers = []),
            (this.bufferOffset = 0),
            (this.writeIndex = 0),
            (this.ended = !1),
            (this.cbs = null != e ? e : {}),
            (this.lowerCaseTagNames =
              null !== (r = t.lowerCaseTags) && void 0 !== r ? r : !t.xmlMode),
            (this.lowerCaseAttributeNames =
              null !== (n = t.lowerCaseAttributeNames) && void 0 !== n
                ? n
                : !t.xmlMode),
            (this.tokenizer = new (
              null !== (s = t.Tokenizer) && void 0 !== s ? s : Yc
            )(this.options, this)),
            null === (i = (a = this.cbs).onparserinit) ||
              void 0 === i ||
              i.call(a, this)
        }
        ontext(e, t) {
          var r, n
          const s = this.getSlice(e, t)
          ;(this.endIndex = t - 1),
            null === (n = (r = this.cbs).ontext) ||
              void 0 === n ||
              n.call(r, s),
            (this.startIndex = t)
        }
        ontextentity(e) {
          var t, r
          const n = this.tokenizer.getSectionStart()
          ;(this.endIndex = n - 1),
            null === (r = (t = this.cbs).ontext) ||
              void 0 === r ||
              r.call(t, J(e)),
            (this.startIndex = n)
        }
        isVoidElement(e) {
          return !this.options.xmlMode && $c.has(e)
        }
        onopentagname(e, t) {
          this.endIndex = t
          let r = this.getSlice(e, t)
          this.lowerCaseTagNames && (r = r.toLowerCase()), this.emitOpenTag(r)
        }
        emitOpenTag(e) {
          var t, r, n, s
          ;(this.openTagStart = this.startIndex), (this.tagname = e)
          const a = !this.options.xmlMode && zc.get(e)
          if (a)
            for (
              ;
              this.stack.length > 0 && a.has(this.stack[this.stack.length - 1]);

            ) {
              const e = this.stack.pop()
              null === (r = (t = this.cbs).onclosetag) ||
                void 0 === r ||
                r.call(t, e, !0)
            }
          this.isVoidElement(e) ||
            (this.stack.push(e),
            Zc.has(e)
              ? this.foreignContext.push(!0)
              : Jc.has(e) && this.foreignContext.push(!1)),
            null === (s = (n = this.cbs).onopentagname) ||
              void 0 === s ||
              s.call(n, e),
            this.cbs.onopentag && (this.attribs = {})
        }
        endOpenTag(e) {
          var t, r
          ;(this.startIndex = this.openTagStart),
            this.attribs &&
              (null === (r = (t = this.cbs).onopentag) ||
                void 0 === r ||
                r.call(t, this.tagname, this.attribs, e),
              (this.attribs = null)),
            this.cbs.onclosetag &&
              this.isVoidElement(this.tagname) &&
              this.cbs.onclosetag(this.tagname, !0),
            (this.tagname = '')
        }
        onopentagend(e) {
          ;(this.endIndex = e), this.endOpenTag(!1), (this.startIndex = e + 1)
        }
        onclosetag(e, t) {
          var r, n, s, a, i, o
          this.endIndex = t
          let c = this.getSlice(e, t)
          if (
            (this.lowerCaseTagNames && (c = c.toLowerCase()),
            (Zc.has(c) || Jc.has(c)) && this.foreignContext.pop(),
            this.isVoidElement(c))
          )
            this.options.xmlMode ||
              'br' !== c ||
              (null === (n = (r = this.cbs).onopentagname) ||
                void 0 === n ||
                n.call(r, 'br'),
              null === (a = (s = this.cbs).onopentag) ||
                void 0 === a ||
                a.call(s, 'br', {}, !0),
              null === (o = (i = this.cbs).onclosetag) ||
                void 0 === o ||
                o.call(i, 'br', !1))
          else {
            const e = this.stack.lastIndexOf(c)
            if (-1 !== e)
              if (this.cbs.onclosetag) {
                let t = this.stack.length - e
                for (; t--; ) this.cbs.onclosetag(this.stack.pop(), 0 !== t)
              } else this.stack.length = e
            else
              this.options.xmlMode ||
                'p' !== c ||
                (this.emitOpenTag('p'), this.closeCurrentTag(!0))
          }
          this.startIndex = t + 1
        }
        onselfclosingtag(e) {
          ;(this.endIndex = e),
            this.options.xmlMode ||
            this.options.recognizeSelfClosing ||
            this.foreignContext[this.foreignContext.length - 1]
              ? (this.closeCurrentTag(!1), (this.startIndex = e + 1))
              : this.onopentagend(e)
        }
        closeCurrentTag(e) {
          var t, r
          const n = this.tagname
          this.endOpenTag(e),
            this.stack[this.stack.length - 1] === n &&
              (null === (r = (t = this.cbs).onclosetag) ||
                void 0 === r ||
                r.call(t, n, !e),
              this.stack.pop())
        }
        onattribname(e, t) {
          this.startIndex = e
          const r = this.getSlice(e, t)
          this.attribname = this.lowerCaseAttributeNames ? r.toLowerCase() : r
        }
        onattribdata(e, t) {
          this.attribvalue += this.getSlice(e, t)
        }
        onattribentity(e) {
          this.attribvalue += J(e)
        }
        onattribend(e, t) {
          var r, n
          ;(this.endIndex = t),
            null === (n = (r = this.cbs).onattribute) ||
              void 0 === n ||
              n.call(
                r,
                this.attribname,
                this.attribvalue,
                e === Hc.Double
                  ? '"'
                  : e === Hc.Single
                  ? "'"
                  : e === Hc.NoValue
                  ? void 0
                  : null
              ),
            this.attribs &&
              !Object.prototype.hasOwnProperty.call(
                this.attribs,
                this.attribname
              ) &&
              (this.attribs[this.attribname] = this.attribvalue),
            (this.attribvalue = '')
        }
        getInstructionName(e) {
          const t = e.search(el)
          let r = t < 0 ? e : e.substr(0, t)
          return this.lowerCaseTagNames && (r = r.toLowerCase()), r
        }
        ondeclaration(e, t) {
          this.endIndex = t
          const r = this.getSlice(e, t)
          if (this.cbs.onprocessinginstruction) {
            const e = this.getInstructionName(r)
            this.cbs.onprocessinginstruction(`!${e}`, `!${r}`)
          }
          this.startIndex = t + 1
        }
        onprocessinginstruction(e, t) {
          this.endIndex = t
          const r = this.getSlice(e, t)
          if (this.cbs.onprocessinginstruction) {
            const e = this.getInstructionName(r)
            this.cbs.onprocessinginstruction(`?${e}`, `?${r}`)
          }
          this.startIndex = t + 1
        }
        oncomment(e, t, r) {
          var n, s, a, i
          ;(this.endIndex = t),
            null === (s = (n = this.cbs).oncomment) ||
              void 0 === s ||
              s.call(n, this.getSlice(e, t - r)),
            null === (i = (a = this.cbs).oncommentend) ||
              void 0 === i ||
              i.call(a),
            (this.startIndex = t + 1)
        }
        oncdata(e, t, r) {
          var n, s, a, i, o, c, l, h, u, d
          this.endIndex = t
          const p = this.getSlice(e, t - r)
          this.options.xmlMode || this.options.recognizeCDATA
            ? (null === (s = (n = this.cbs).oncdatastart) ||
                void 0 === s ||
                s.call(n),
              null === (i = (a = this.cbs).ontext) ||
                void 0 === i ||
                i.call(a, p),
              null === (c = (o = this.cbs).oncdataend) ||
                void 0 === c ||
                c.call(o))
            : (null === (h = (l = this.cbs).oncomment) ||
                void 0 === h ||
                h.call(l, `[CDATA[${p}]]`),
              null === (d = (u = this.cbs).oncommentend) ||
                void 0 === d ||
                d.call(u)),
            (this.startIndex = t + 1)
        }
        onend() {
          var e, t
          if (this.cbs.onclosetag) {
            this.endIndex = this.startIndex
            for (
              let e = this.stack.length;
              e > 0;
              this.cbs.onclosetag(this.stack[--e], !0)
            );
          }
          null === (t = (e = this.cbs).onend) || void 0 === t || t.call(e)
        }
        reset() {
          var e, t, r, n
          null === (t = (e = this.cbs).onreset) || void 0 === t || t.call(e),
            this.tokenizer.reset(),
            (this.tagname = ''),
            (this.attribname = ''),
            (this.attribs = null),
            (this.stack.length = 0),
            (this.startIndex = 0),
            (this.endIndex = 0),
            null === (n = (r = this.cbs).onparserinit) ||
              void 0 === n ||
              n.call(r, this),
            (this.buffers.length = 0),
            (this.bufferOffset = 0),
            (this.writeIndex = 0),
            (this.ended = !1)
        }
        parseComplete(e) {
          this.reset(), this.end(e)
        }
        getSlice(e, t) {
          for (; e - this.bufferOffset >= this.buffers[0].length; )
            this.shiftBuffer()
          let r = this.buffers[0].slice(
            e - this.bufferOffset,
            t - this.bufferOffset
          )
          for (; t - this.bufferOffset > this.buffers[0].length; )
            this.shiftBuffer(),
              (r += this.buffers[0].slice(0, t - this.bufferOffset))
          return r
        }
        shiftBuffer() {
          ;(this.bufferOffset += this.buffers[0].length),
            this.writeIndex--,
            this.buffers.shift()
        }
        write(e) {
          var t, r
          this.ended
            ? null === (r = (t = this.cbs).onerror) ||
              void 0 === r ||
              r.call(t, new Error('.write() after done!'))
            : (this.buffers.push(e),
              this.tokenizer.running &&
                (this.tokenizer.write(e), this.writeIndex++))
        }
        end(e) {
          var t, r
          this.ended
            ? null === (r = (t = this.cbs).onerror) ||
              void 0 === r ||
              r.call(t, new Error('.end() after done!'))
            : (e && this.write(e), (this.ended = !0), this.tokenizer.end())
        }
        pause() {
          this.tokenizer.pause()
        }
        resume() {
          for (
            this.tokenizer.resume();
            this.tokenizer.running && this.writeIndex < this.buffers.length;

          )
            this.tokenizer.write(this.buffers[this.writeIndex++])
          this.ended && this.tokenizer.end()
        }
        parseChunk(e) {
          this.write(e)
        }
        done(e) {
          this.end(e)
        }
      }
      const rl =
        ((nl = (e, t, r, n) =>
          t.xmlMode || t._useHtmlParser2
            ? (function (e, t) {
                const r = new j(void 0, t)
                return new tl(r, t).end(e), r.root
              })(e, t)
            : (function (e, t, r, n) {
                const s = {
                  scriptingEnabled:
                    'boolean' != typeof t.scriptingEnabled ||
                    t.scriptingEnabled,
                  treeAdapter: wc,
                  sourceCodeLocationInfo: t.sourceCodeLocationInfo,
                }
                return r
                  ? (function (e, t) {
                      return Eo.parse(e, t)
                    })(e, s)
                  : (function (e, t, r) {
                      'string' == typeof e && ((r = t), (t = e), (e = null))
                      const n = Eo.getFragmentParser(e, r)
                      return n.tokenizer.write(t, !0), n.getFragment()
                    })(n, e, s)
              })(e, t, r, n)),
        function (e, t, r, n) {
          if (
            ('undefined' != typeof Buffer &&
              Buffer.isBuffer(e) &&
              (e = e.toString()),
            'string' == typeof e)
          )
            return nl(e, t, r, n)
          const s = e
          if (!Array.isArray(s) && V(s)) return s
          const a = new B([])
          return Js(s, a), a
        })
      var nl
      const sl =
          ((ll = rl),
          function t(r, n, s = !0) {
            if (null == r) throw new Error('cheerio.load() expects a string')
            const a = { ...m, ...f(n) },
              i = ll(r, a, s, null)
            class o extends ka {
              _make(e, t) {
                const r = c(e, t)
                return (r.prevObject = this), r
              }
              _parse(e, t, r, n) {
                return ll(e, t, r, n)
              }
              _render(e) {
                return ((e, t) =>
                  t.xmlMode || t._useHtmlParser2
                    ? De(e, t)
                    : (function (e) {
                        const t = 'length' in e ? e : [e]
                        for (let e = 0; e < t.length; e += 1) {
                          const r = t[e]
                          V(r) &&
                            Array.prototype.splice.call(t, e, 1, ...r.children)
                        }
                        let r = ''
                        for (let e = 0; e < t.length; e += 1) r += Tc(t[e], xc)
                        return r
                      })(e))(e, this.options)
              }
            }
            function c(e, t, r = i, n) {
              if (e && je(e)) return e
              const s = { ...a, ...f(n) },
                c =
                  'string' == typeof r
                    ? [ll(r, s, !1, null)]
                    : 'length' in r
                    ? r
                    : [r],
                l = je(c) ? c : new o(c, null, s)
              if (((l._root = l), !e)) return new o(void 0, l, s)
              const h =
                'string' == typeof e && $e(e)
                  ? ll(e, s, !1, null).children
                  : (u = e).name ||
                    'root' === u.type ||
                    'text' === u.type ||
                    'comment' === u.type
                  ? [e]
                  : Array.isArray(e)
                  ? e
                  : void 0
              var u
              const d = new o(h, l, s)
              if (h) return d
              if ('string' != typeof e)
                throw new Error('Unexpected type of selector')
              let p = e
              const E = t
                ? 'string' == typeof t
                  ? $e(t)
                    ? new o([ll(t, s, !1, null)], l, s)
                    : ((p = `${t} ${p}`), l)
                  : je(t)
                  ? t
                  : new o(Array.isArray(t) ? t : [t], l, s)
                : l
              return E ? E.find(p) : d
            }
            return (
              Object.assign(c, e, {
                load: t,
                _root: i,
                _options: a,
                fn: o.prototype,
                prototype: o.prototype,
              }),
              c
            )
          }),
        { contains: al } = (sl([]), e),
        { merge: il } = e,
        { parseHTML: ol } = e,
        { root: cl } = e
      var ll,
        hl = function (e, t, r, n) {
          return new (r || (r = Promise))(function (s, a) {
            function i(e) {
              try {
                c(n.next(e))
              } catch (e) {
                a(e)
              }
            }
            function o(e) {
              try {
                c(n.throw(e))
              } catch (e) {
                a(e)
              }
            }
            function c(e) {
              var t
              e.done
                ? s(e.value)
                : ((t = e.value),
                  t instanceof r
                    ? t
                    : new r(function (e) {
                        e(t)
                      })).then(i, o)
            }
            c((n = n.apply(e, t || [])).next())
          })
        },
        ul = function (e, t) {
          var r,
            n,
            s,
            a,
            i = {
              label: 0,
              sent: function () {
                if (1 & s[0]) throw s[1]
                return s[1]
              },
              trys: [],
              ops: [],
            }
          return (
            (a = { next: o(0), throw: o(1), return: o(2) }),
            'function' == typeof Symbol &&
              (a[Symbol.iterator] = function () {
                return this
              }),
            a
          )
          function o(o) {
            return function (c) {
              return (function (o) {
                if (r) throw new TypeError('Generator is already executing.')
                for (; a && ((a = 0), o[0] && (i = 0)), i; )
                  try {
                    if (
                      ((r = 1),
                      n &&
                        (s =
                          2 & o[0]
                            ? n.return
                            : o[0]
                            ? n.throw || ((s = n.return) && s.call(n), 0)
                            : n.next) &&
                        !(s = s.call(n, o[1])).done)
                    )
                      return s
                    switch (((n = 0), s && (o = [2 & o[0], s.value]), o[0])) {
                      case 0:
                      case 1:
                        s = o
                        break
                      case 4:
                        return i.label++, { value: o[1], done: !1 }
                      case 5:
                        i.label++, (n = o[1]), (o = [0])
                        continue
                      case 7:
                        ;(o = i.ops.pop()), i.trys.pop()
                        continue
                      default:
                        if (
                          !(
                            (s = (s = i.trys).length > 0 && s[s.length - 1]) ||
                            (6 !== o[0] && 2 !== o[0])
                          )
                        ) {
                          i = 0
                          continue
                        }
                        if (
                          3 === o[0] &&
                          (!s || (o[1] > s[0] && o[1] < s[3]))
                        ) {
                          i.label = o[1]
                          break
                        }
                        if (6 === o[0] && i.label < s[1]) {
                          ;(i.label = s[1]), (s = o)
                          break
                        }
                        if (s && i.label < s[2]) {
                          ;(i.label = s[2]), i.ops.push(o)
                          break
                        }
                        s[2] && i.ops.pop(), i.trys.pop()
                        continue
                    }
                    o = t.call(e, i)
                  } catch (e) {
                    ;(o = [6, e]), (n = 0)
                  } finally {
                    r = s = 0
                  }
                if (5 & o[0]) throw o[1]
                return { value: o[0] ? o[1] : void 0, done: !0 }
              })([o, c])
            }
          }
        }
      function dl() {
        return hl(this, void 0, void 0, function () {
          return ul(this, function (e) {
            return [
              2,
              ((t = u.resolve(process.cwd(), './apps')),
              E()
                .readdirSync(t)
                .filter(function (e) {
                  var r = u.join(t, e)
                  return E().statSync(r).isDirectory()
                })
                .map(function (e) {
                  var r,
                    n,
                    s = u.join(t, e),
                    a = '',
                    i = '',
                    o = '',
                    c = ''
                  try {
                    var l = E().readFileSync(u.join(s, 'index.html'), {
                        encoding: 'utf-8',
                      }),
                      h = sl(l)
                    ;(a = h('title').text().trim().replace(/\n/g, '')),
                      (o =
                        (null ===
                          (r = h('meta[name=author]').attr('content')) ||
                        void 0 === r
                          ? void 0
                          : r.trim().replace(/\n/g, '')) || ''),
                      (i =
                        (null ===
                          (n = h('meta[name=description]').attr('content')) ||
                        void 0 === n
                          ? void 0
                          : n.trim().replace(/\n/g, '')) || ''),
                      (c = d.format({
                        pathname: u.resolve(
                          s,
                          h('link[rel=icon]').attr('href') || ''
                        ),
                        protocol: 'file:',
                        slashes: !0,
                      }))
                  } catch (e) {
                    a = '未命名'
                  }
                  return {
                    dir_name: e,
                    path: u.join(t, e),
                    title: a,
                    description: i,
                    author: o,
                    ico: c,
                  }
                })),
            ]
            var t
          })
        })
      }
      function pl() {
        return hl(this, void 0, void 0, function () {
          return ul(this, function (e) {
            return [2, c.screen.getAllDisplays()]
          })
        })
      }
      c.ipcMain.on('ipc-example', function (e, t) {
        return hl(void 0, void 0, void 0, function () {
          return ul(this, function (t) {
            return e.reply('ipc-example', 'pong'), [2]
          })
        })
      })
      var El = function () {
        var e = new c.BrowserWindow({
            fullscreen: JSON.parse('false'),
            width: 1920,
            height: 1080,
            webPreferences: {
              preload: u.join(__dirname, './preloads/main-preload.js'),
              webSecurity: !1,
            },
          }),
          t = h()
            ? 'http://localhost:3000'
            : d.format({
                pathname: u.join(__dirname, '../build/index.html'),
                protocol: 'file:',
                slashes: !0,
              })
        e.loadURL(t), h() && e.webContents.openDevTools()
      }
      function ml(e, t, r) {
        return hl(this, void 0, void 0, function () {
          var e, n, s
          return ul(this, function (a) {
            return (
              (e = c.screen.getAllDisplays()),
              (n = e.find(function (e) {
                return e.id == (null == r ? void 0 : r.id)
              })) &&
                ((s = new c.BrowserWindow({
                  fullscreen: JSON.parse('true'),
                  width: 1920,
                  height: 1080,
                  x: n.bounds.x + n.bounds.width / 2 - 960,
                  y: n.bounds.y + n.bounds.height / 2 - 540,
                  webPreferences: {
                    webSecurity: !1,
                    nodeIntegration: !0,
                    contextIsolation: !1,
                  },
                })).loadURL(
                  d.format({
                    pathname: u.join(
                      null == t ? void 0 : t.path,
                      './index.html'
                    ),
                    protocol: 'file:',
                    slashes: !0,
                  })
                ),
                h() && s.webContents.openDevTools()),
              [2]
            )
          })
        })
      }
      c.app.whenReady().then(function () {
        c.ipcMain.handle('event:getApps', dl),
          c.ipcMain.handle('event:getScreens', pl),
          c.ipcMain.handle('event:openApp', ml),
          El(),
          c.app.on('activate', function () {
            0 === c.BrowserWindow.getAllWindows().length && El()
          })
      }),
        c.app.on('window-all-closed', function () {
          'darwin' !== process.platform && c.app.quit()
        })
    })()
})()
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
